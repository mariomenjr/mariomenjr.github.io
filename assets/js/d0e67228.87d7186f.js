"use strict";(self.webpackChunkmariomenjr=self.webpackChunkmariomenjr||[]).push([[4757],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(t),m=o,g=d["".concat(l,".").concat(m)]||d[m]||p[m]||r;return t?a.createElement(g,i(i({ref:n},u),{},{components:t})):a.createElement(g,i({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8215:function(e,n,t){t.d(n,{Z:function(){return o}});var a=t(7294);function o(e){var n=e.children,t=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:o},n)}},9877:function(e,n,t){t.d(n,{Z:function(){return u}});var a=t(3117),o=t(7294),r=t(2389),i=t(3342),s=t(6010),l="tabItem_LplD";function c(e){var n,t,r,c=e.lazy,u=e.block,p=e.defaultValue,d=e.values,m=e.groupId,g=e.className,h=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=d?d:h.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),b=(0,i.lx)(k,(function(e,n){return e.value===n.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===p?p:null!=(n=null!=p?p:null==(t=h.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(r=h[0])?void 0:r.props.value;if(null!==v&&!k.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var f=(0,i.UB)(),y=f.tabGroupChoices,N=f.setTabGroupChoices,C=(0,o.useState)(v),w=C[0],I=C[1],S=[],j=(0,i.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var A=y[m];null!=A&&A!==w&&k.some((function(e){return e.value===A}))&&I(A)}var q=function(e){var n=e.currentTarget,t=S.indexOf(n),a=k[t].value;a!==w&&(j(n),I(a),null!=m&&N(m,a))},T=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=S.indexOf(e.currentTarget)+1;t=S[a]||S[0];break;case"ArrowLeft":var o=S.indexOf(e.currentTarget)-1;t=S[o]||S[S.length-1]}null==(n=t)||n.focus()};return o.createElement("div",{className:"tabs-container"},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":u},g)},k.map((function(e){var n=e.value,t=e.label,r=e.attributes;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===n?0:-1,"aria-selected":w===n,key:n,ref:function(e){return S.push(e)},onKeyDown:T,onFocus:q,onClick:q},r,{className:(0,s.Z)("tabs__item",l,null==r?void 0:r.className,{"tabs__item--active":w===n})}),null!=t?t:n)}))),c?(0,o.cloneElement)(h.filter((function(e){return e.props.value===w}))[0],{className:"margin-vert--md"}):o.createElement("div",{className:"margin-vert--md"},h.map((function(e,n){return(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==w})}))))}function u(e){var n=(0,r.Z)();return o.createElement(c,(0,a.Z)({key:String(n)},e))}},3045:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return u},default:function(){return h},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return m}});var a=t(3117),o=t(102),r=(t(7294),t(3905)),i=t(9877),s=t(8215),l=["components"],c={slug:"2021/07/29/autenticacion-como-servicio-con-identity-server-4",title:"Autenticaci\xf3n como servicio con Identity Server 4",author:"Mario Menj\xedvar",author_title:"Software Engineer",author_url:"https://github.com/mariomenjr",author_image_url:"https://avatars3.githubusercontent.com/u/1946936?s=460&v=4",tags:["oauth2.0","openid","csharp","identity server","nodejs"],keywords:["oauth 2.0","validar bearer token nodejs","openid","espa\xf1ol","que es identity server","como proteger api con identity server","como proteger api jwt","como proteger api nodejs","implementar autenticacion jwt react","que es bearer token","autenticando api rest con nodejS y jwt","implementar JSON web token","como implementar autenticacion basada en token","autenticacion y autorizacion","que es jwks"],date:new Date("2021-07-29T23:31:18.000Z"),description:"En esta entrada, hablaremos de quiz\xe1 la m\xe1s conocida implementaci\xf3n de los protocolos OpenID Connect y OAuth 2.0 para .NET Core: Identity Server 4. Te mostrar\xe9 c\xf3mo implementarlo y consumir sus servicios de autorizaci\xf3n/autenticaci\xf3n para asegurar una SPA junto con una API en NodeJS.",image:"https://images.unsplash.com/photo-1532604146921-0e8bd9ab0891?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=256&q=80"},u=void 0,p={permalink:"/blog/2021/07/29/autenticacion-como-servicio-con-identity-server-4",editUrl:"https://github.com/mariomenjr/mariomenjr/edit/main/blog/2021-07-29_autenticacion-como-servicio-con-identity-server-4.md",source:"@site/blog/2021-07-29_autenticacion-como-servicio-con-identity-server-4.md",title:"Autenticaci\xf3n como servicio con Identity Server 4",description:"En esta entrada, hablaremos de quiz\xe1 la m\xe1s conocida implementaci\xf3n de los protocolos OpenID Connect y OAuth 2.0 para .NET Core: Identity Server 4. Te mostrar\xe9 c\xf3mo implementarlo y consumir sus servicios de autorizaci\xf3n/autenticaci\xf3n para asegurar una SPA junto con una API en NodeJS.",date:"2021-07-29T23:31:18.000Z",formattedDate:"29 de julio de 2021",tags:[{label:"oauth2.0",permalink:"/blog/tags/oauth-2-0"},{label:"openid",permalink:"/blog/tags/openid"},{label:"csharp",permalink:"/blog/tags/csharp"},{label:"identity server",permalink:"/blog/tags/identity-server"},{label:"nodejs",permalink:"/blog/tags/nodejs"}],readingTime:17.3,truncated:!0,authors:[{name:"Mario Menj\xedvar",title:"Software Engineer",url:"https://github.com/mariomenjr",imageURL:"https://avatars3.githubusercontent.com/u/1946936?s=460&v=4"}],frontMatter:{slug:"2021/07/29/autenticacion-como-servicio-con-identity-server-4",title:"Autenticaci\xf3n como servicio con Identity Server 4",author:"Mario Menj\xedvar",author_title:"Software Engineer",author_url:"https://github.com/mariomenjr",author_image_url:"https://avatars3.githubusercontent.com/u/1946936?s=460&v=4",tags:["oauth2.0","openid","csharp","identity server","nodejs"],keywords:["oauth 2.0","validar bearer token nodejs","openid","espa\xf1ol","que es identity server","como proteger api con identity server","como proteger api jwt","como proteger api nodejs","implementar autenticacion jwt react","que es bearer token","autenticando api rest con nodejS y jwt","implementar JSON web token","como implementar autenticacion basada en token","autenticacion y autorizacion","que es jwks"],date:"2021-07-29T23:31:18.000Z",description:"En esta entrada, hablaremos de quiz\xe1 la m\xe1s conocida implementaci\xf3n de los protocolos OpenID Connect y OAuth 2.0 para .NET Core: Identity Server 4. Te mostrar\xe9 c\xf3mo implementarlo y consumir sus servicios de autorizaci\xf3n/autenticaci\xf3n para asegurar una SPA junto con una API en NodeJS.",image:"https://images.unsplash.com/photo-1532604146921-0e8bd9ab0891?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=256&q=80"},prevItem:{title:"C\xf3mo consultar y persistir datos en MongoDB con .NET",permalink:"/blog/2021/08/18/como-consultar-y-persistir-datos-en-mongodb-con--net"},nextItem:{title:"C\xf3mo trabajar con React Context y Hooks",permalink:"/blog/2021/04/04/como-trabajar-con-react-context-y-hooks"}},d={authorsImageUrls:[void 0]},m=[{value:"OAuth 2.0 + OpenID",id:"oauth-20--openid",level:2},{value:"Identity Server 4",id:"identity-server-4",level:2},{value:"Instalaci\xf3n",id:"instalaci\xf3n",level:3},{value:"dotnet --version",id:"dotnet---version",level:3},{value:"Discovery Document",id:"discovery-document",level:3},{value:"Scopes + Clients",id:"scopes--clients",level:3},{value:"Asegura el API",id:"asegura-el-api",level:2},{value:"ExpressJS",id:"expressjs",level:3},{value:"JWKS",id:"jwks",level:3},{value:"Bearer token",id:"bearer-token",level:2},{value:"React App + Authorization Code Flow",id:"react-app--authorization-code-flow",level:3},{value:"Identity Server + Authorization Code Flow",id:"identity-server--authorization-code-flow",level:3},{value:"API + Bearer Token",id:"api--bearer-token",level:3},{value:"Autenticaci\xf3n, \xf3 c\xf3mo saber qui\xe9n est\xe1 siendo autorizado",id:"autenticaci\xf3n-\xf3-c\xf3mo-saber-qui\xe9n-est\xe1-siendo-autorizado",level:2},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2},{value:"Referencias",id:"referencias",level:2}],g={toc:m};function h(e){var n=e.components,c=(0,o.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},g,c,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Antes de comenzar debemos hacer una distinci\xf3n muy importante. Autenticar y autorizar son dos aspectos completamente independientes pero centrales a la seguridad. Aut\xe9nticar se refiere a confirmar que los usuarios son quienes dicen ser. Autorizar, por otro lado, es dar acceso a los recursos a esos usuarios."),(0,r.kt)("p",null,"En esta entrada, hablaremos de quiz\xe1 la m\xe1s conocida implementaci\xf3n de los protocolos OpenID Connect y OAuth 2.0 para .NET Core: Identity Server 4. Te mostrar\xe9 c\xf3mo implementarlo y consumir sus servicios de autorizaci\xf3n/autenticaci\xf3n para asegurar una SPA junto con una API en NodeJS."),(0,r.kt)("h2",{id:"oauth-20--openid"},"OAuth 2.0 + OpenID"),(0,r.kt)("p",null,"Lo m\xe1s seguro es que en alg\xfan momento hayas visto una p\xe1gina como esta:"),(0,r.kt)("figure",{class:"md-captioned-image"},(0,r.kt)("img",{src:t(5472).Z,alt:"Google OAuth Sample"}),(0,r.kt)("figcaption",null,"Este es un ejemplo de una implementaci\xf3n de OAuth y OpenID que tiene como objetivo permitir que Medium pueda utilizar tu cuenta de Google para loguearte. Sin embargo, para lograrlo, Medium debe pedirte permiso para acceder a ciertos datos de tu perfil de Google con los cu\xe1les puede identificar tu cuenta.")),(0,r.kt)("p",null,"OAuth 2.0 y OpenID conforman el est\xe1ndar de la industria para llevar a cabo este importante proceso de aut\xe9nticar y autorizar usuarios. M\xe1s que aplicaciones o servicios que puedan ser instalados, ambos son est\xe1ndares abiertos de autorizaci\xf3n y autenticaci\xf3n que pueden ser implementados por cualquiera."),(0,r.kt)("h2",{id:"identity-server-4"},"Identity Server 4"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"In a nutshell"),", Identity Server 4 es un framework de OAuth 2.0 y OpenID para ASP.NET Core. Est\xe1 certificado por la ",(0,r.kt)("a",{parentName:"p",href:"https://openid.net/"},"OpenID Foundation"),". Es quiz\xe1 la m\xe1s conocida implementaci\xf3n de OAuth 2.0 y OpenID para .NET Core."),(0,r.kt)("p",null,"Puedes probar un demo online con Client Credentials ahora mismo en ",(0,r.kt)("a",{parentName:"p",href:"https://identity.mariomenjr.com"},"identity.mariomenjr.com"),". Para obtener un ",(0,r.kt)("inlineCode",{parentName:"p"},"bearer token"),"ejecuta el siguiente comando en una l\xednea de comandos, por ejemplo."),(0,r.kt)(i.Z,{groupId:"demos-mariomenjr-bearer-token",defaultValue:"curl",values:[{label:"cURL",value:"curl"},{label:"wget",value:"wget"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"curl",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl --location --request POST 'https://identity.mariomenjr.com:443/connect/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'client_id=test.client' \\\n--data-urlencode 'client_secret=test.secret' \\\n--data-urlencode 'scope=test.scope' \\\n--data-urlencode 'grant_type=client_credentials'\n"))),(0,r.kt)(s.Z,{value:"wget",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Content-Type: application/x-www-form-urlencoded' \\\n  --body-data 'client_id=test.client&client_secret=test.secret&scope=test.scope&grant_type=client_credentials' \\\n   'https://identity.mariomenjr.com:443/connect/token'\n")))),(0,r.kt)("p",null,"En cualquier caso, obtendr\xe1s un JSON como respuesta:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"access_token":"eyJhbGciOiJSUzI1NiIsImtpZCI6IkRCRkM5QUY5QURCMTU2REVDMDI5REQ0MjdFREVDRTNFIiwidHlwIjoiYXQrand0In0.eyJuYmYiOjE2MjY1NzcxNTEsImV4cCI6MTYyNjU4MDc1MSwiaXNzIjoiaHR0cHM6Ly9pZGVudGl0eS5tYXJpb21lbmpyLmNvbSIsImF1ZCI6WyJjb250aW51ZWUuYXBpIiwidGVzdC5hcGkiXSwiY2xpZW50X2lkIjoidGVzdC5jbGllbnQiLCJqdGkiOiIwOTRBQjkwNEEyQjQzN0ZDOUEzQjc4Q0ZCRjM2M0UyNCIsImlhdCI6MTYyNjU3NzE1MSwic2NvcGUiOlsidGVzdC5zY29wZSJdfQ.P9Ku7YkVL-SymVYpqUj9xnAK8Y_1msKHqAt42BbNdebLb_QWHGtIpgbgaMZpOh0j5-Kl4iNPeSYI0920LoFj__GymaGvqzFnJ1tuEJ-cafJUenmbIVadx6-UsfR8o91oznuMtmoWXeAWieX5cEt-f3Qr4IKJ2Jr5_-r99haN1m3yuE8aAJncz9O-eLQ0hmS8EjQQ62PYQbThdmzmtlYm5A33IYKxJsN8HjRsYTDC-6XvEKkBfT8CqEEMj06lBpfT67pi0iU7WmVCqaSl60Vk828b74WEj4c7P-6rRP7kCoqkfTzr_2D0OtoOxzCye4GswAaatSAdVDQbJ9xkfc4_kw","expires_in":3600,"token_type":"Bearer","scope":"test.scope"}\n')),(0,r.kt)("h3",{id:"instalaci\xf3n"},"Instalaci\xf3n"),(0,r.kt)("p",null,"Para empezar a trabajar con este framework, debemos instalarlo. Esto lo podemos hacer a trav\xe9s de Visual Studio (Windows o Mac) \xf3 con el comando ",(0,r.kt)("strong",{parentName:"p"},"dotnet")," en la terminal (Linux)."),(0,r.kt)("p",null,"Una forma f\xe1cil de empezar es instalando localmente las distintas plantillas provista por sus creadores."),(0,r.kt)(i.Z,{groupId:"operating-systems",defaultValue:"cli",values:[{label:"Command Line Interface",value:"cli"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"cli",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet new -i IdentityServer4.Templates\n")))),(0,r.kt)("p",null,"Una vez instaladas, escogeremos la plantilla con ",(0,r.kt)("inlineCode",{parentName:"p"},"stores")," en memoria y usuarios de prueba: ",(0,r.kt)("inlineCode",{parentName:"p"},"is4inmem"),". "),(0,r.kt)(i.Z,{groupId:"operating-systems",defaultValue:"cli",values:[{label:"Command Line Interface",value:"cli"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"cli",mdxType:"TabItem"},(0,r.kt)("p",null,"Creamos un nuevo folder para nuestro proyecto."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"md Identity && cd Identity\n")),(0,r.kt)("p",null,"Creamos un nuevo proyecto apartir de una de la plantilla con ",(0,r.kt)("inlineCode",{parentName:"p"},"stores")," en memoria y usuarios de prueba."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet new is4inmem -n Identity.API\n")),(0,r.kt)("p",null,"El cu\xe1l mostrar\xe1 el siguiente mensaje."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},'The template "IdentityServer4 with In-Memory Stores and Test Users" was created successfully.')))),(0,r.kt)("p",null,"Finalmente, crearemos una soluci\xf3n para nuestra plantilla. Para eso necesitamos ejecutar los siguientes comandos."),(0,r.kt)(i.Z,{groupId:"operating-systems",defaultValue:"cli",values:[{label:"Command Line Interface",value:"cli"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"cli",mdxType:"TabItem"},(0,r.kt)("p",null,"Creamos la soluci\xf3n."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet new sln -n Identity\n")),(0,r.kt)("p",null,"Para luego a\xf1adir nuestro proyecto a esta soluci\xf3n."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet sln add Identity.API/Identity.API.csproj\n")),(0,r.kt)("p",null,"As\xed, recibiremos el siguiente mensaje."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Project ",(0,r.kt)("inlineCode",{parentName:"p"},"Identity.API/Identity.API.csproj")," added to the solution.")),(0,r.kt)("p",null,"Por \xfaltimo, ejecutamos el comando de restauraci\xf3n. Esto instalar\xe1 cualquier dependencia faltante."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet restore\n")))),(0,r.kt)("h3",{id:"dotnet---version"},"dotnet --version"),(0,r.kt)("p",null,"Por defecto, la version de .NET Core para la que est\xe1n configuradas las plantillas es la 3.1. Sin embargo, la \xfaltima versi\xf3n de .NET al d\xeda de hoy es la 5 y es muy probable que sea la que tengas instalada. Para no tener ning\xfan problema al ejecutar el proyecto, basta con cambiar la versi\xf3n a la que apunta."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'\x3c!-- Identity.API/Identity.API.csproj --\x3e\n\n<Project Sdk="Microsoft.NET.Sdk.Web">\n\n  <PropertyGroup>\n    // highlight-start\n    \x3c!-- <TargetFramework>netcoreapp3.1</TargetFramework> --\x3e\n    <TargetFramework>net5.0</TargetFramework>\n    // highlight-end\n  </PropertyGroup>\n  \n  <ItemGroup>\n    <PackageReference Include="IdentityServer4" Version="4.0.0" />\n\n    <PackageReference Include="Serilog.AspNetCore" Version="3.2.0" />\n  </ItemGroup>\n</Project>\n')),(0,r.kt)("p",null,"Y ya lo tienes. Si ejecutas el proyecto ya deber\xedas ver el ",(0,r.kt)("a",{parentName:"p",href:"https://localhost:5001/.well-known/openid-configuration"},"Discovery Document"),"."),(0,r.kt)(i.Z,{groupId:"operating-systems",defaultValue:"cli",values:[{label:"Command Line Interface",value:"cli"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"cli",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet run --project Identity.API\n")))),(0,r.kt)("h3",{id:"discovery-document"},"Discovery Document"),(0,r.kt)("p",null,"El ",(0,r.kt)("em",{parentName:"p"},"Discovery Document")," (o documento de descubrimiento, en espa\xf1ol) no es m\xe1s que un documento JSON que contiene la informaci\xf3n sobre los ",(0,r.kt)("em",{parentName:"p"},"endpoints"),", material clave y caracter\xedsticas de tu Identity Server."),(0,r.kt)("p",null,"Tambi\xe9n es conocido como el ",(0,r.kt)("em",{parentName:"p"},"well-known document"),". Este documento permite a los clientes del servicio configurarse a s\xed mismos para poder autorizar/aut\xe9nticar usuarios."),(0,r.kt)("h3",{id:"scopes--clients"},"Scopes + Clients"),(0,r.kt)("p",null,"Un ",(0,r.kt)("inlineCode",{parentName:"p"},"scope")," es un recurso en tu sistema que quieres proteger. Con Identity Server 4, podemos definir recursos de varias maneras. Desde c\xf3digo hasta bases de datos. En este ejemplo, los definiremos por c\xf3digo."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Identity.API/Config.cs"',title:'"Identity.API/Config.cs"'},'// ...\npublic static IEnumerable<ApiScope> ApiScopes =>\n    new ApiScope[]\n    {\n        // highlight-start \n        new ApiScope("test-scope", "Test Scope")\n        // highlight-end\n    };\n// ...\n')),(0,r.kt)("p",null,"Lo siguiente en la lista es registrar una aplicaci\xf3n cliente que consuma nuestro servicio de autenticaci\xf3n."),(0,r.kt)("p",null,"Hasta este momento, nuestro cliente no necesita ser interactivo para el usuario. Se autenticar\xe1 usando el ",(0,r.kt)("em",{parentName:"p"},"Client Credentials Flow")," con Identity Server."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Identity.API/Config.cs"',title:'"Identity.API/Config.cs"'},'// ...\npublic static IEnumerable<Client> Clients =>\n    new Client[] \n    { \n        // highlight-start \n        new Client\n        {\n            ClientId = "api-client",\n\n            // no interactive user, use the clientid/secret for authentication\n            AllowedGrantTypes = GrantTypes.ClientCredentials,\n\n            // secret for authentication\n            ClientSecrets =\n            {\n                new Secret("api-secret".Sha256())\n            },\n\n            // scopes that client has access to\n            AllowedScopes = { "test-scope" }\n        }\n        // highlight-end \n    };\n// ...\n')),(0,r.kt)("p",null,"Con esto, ya podemos conseguir un ",(0,r.kt)("inlineCode",{parentName:"p"},"bearer token")," desde nuestro proyecto."),(0,r.kt)(i.Z,{groupId:"demos-mariomenjr-bearer-token",defaultValue:"curl",values:[{label:"cURL",value:"curl"},{label:"wget",value:"wget"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"curl",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"curl --insecure --location --request POST 'https://localhost:5001/connect/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'client_id=api-client' \\\n--data-urlencode 'client_secret=api-secret' \\\n--data-urlencode 'scope=test-scope' \\\n--data-urlencode 'grant_type=client_credentials'\n"))),(0,r.kt)(s.Z,{value:"wget",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Content-Type: application/x-www-form-urlencoded' \\\n  --body-data 'client_id=api-client&client_secret=api-secret&scope=test-scope&grant_type=client_credentials' \\\n   'https://localhost:5001/connect/token'\n")))),(0,r.kt)("h2",{id:"asegura-el-api"},"Asegura el API"),(0,r.kt)("p",null,"Si has llegado hasta aqu\xed, \xa1Felicidades! ya tienes un servicio de autenticaci\xf3n funcional. En caso hayas llegado directo hasta aqu\xed, deber\xedas revisar lo de arriba. De todas formas, vamos a empezar lo bueno."),(0,r.kt)("p",null,"En realidad podr\xedamos usar casi cualquier lenguaje y librer\xeda que nos permita construir APIs. En esta entrada, utilizaremos NodeJS y ExpressJS, ya que son parte de los stacks m\xe1s populares actualmente."),(0,r.kt)("p",null,"Si no tienes nodejs en tu computadora, puedes descargar el instalador desde aqu\xed: ",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/en/download/"},"https://nodejs.org/en/download/"),". Si est\xe1s en Linux, y dependiendo del distro, puedes encontrarlo en los repositorios de paquetes como ",(0,r.kt)("inlineCode",{parentName:"p"},"nodejs"),"."),(0,r.kt)("h3",{id:"expressjs"},"ExpressJS"),(0,r.kt)("p",null,"Veamos c\xf3mo levantar una API con ExpressJS en menos de 5 minutos."),(0,r.kt)("p",null,"Creamos el folder del nuevo proyecto."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"md api-sample && cd api-sample\n")),(0,r.kt)("p",null,"Creamos un nuevo proyecto con NPM."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm init -y\n")),(0,r.kt)("p",null,"Instalamos ExpressJS."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install express --save\n")),(0,r.kt)("p",null,"Solo nos queda crear un archivo ",(0,r.kt)("inlineCode",{parentName:"p"},"app.js")," y hacer unas peque\xf1as modificaciones en el existente ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="app.js"',title:'"app.js"'},"const express = require('express');\nconst app = express();\nconst port = 3005;\n\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n\napp.listen(port, () => {\n  console.log(`App listening at http://localhost:${port}`);\n});\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'// ...\n  // highlight-start \n  // "main": "index.js",\n  "main": "app.js",\n  // highlight-end\n  "scripts": {\n    // highlight-start \n    // "test": "echo \\"Error: no test specified\\" && exit 1",\n    "dev": "node app.js"\n    // highlight-end\n  },\n  "keywords": [],\n// ...\n')),(0,r.kt)("p",null,"Y ahora podemos arrancar el API."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run dev\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"}," ",">"," ",(0,r.kt)("a",{parentName:"p",href:"mailto:api-sample@1.0.0"},"api-sample@1.0.0")," dev /home/mariomenjr/Samples/api-sample ",(0,r.kt)("br",null),"\n",">"," node app.js"),(0,r.kt)("p",{parentName:"blockquote"}," App listening at http://localhost:3005")),(0,r.kt)("h3",{id:"jwks"},"JWKS"),(0,r.kt)("p",null,"Un JSON Web Key Set (\xf3 Conjunto de llaves JSON Web, en espa\xf1ol) es un conjunto de llaves que contiene a la llave p\xfablica que debe ser usada para verificar cualquier JSON  Web Token (",(0,r.kt)("inlineCode",{parentName:"p"},"JWT"),", \xf3 ",(0,r.kt)("inlineCode",{parentName:"p"},"bearer token"),") que fue emitido por un servidor de autorizaci\xf3n y firmado por uno de los algoritmos RSA o ECDSA."),(0,r.kt)("p",null,"En palabras m\xe1s simples, lo anterior nos dice que una de las formas para verificar que nuestro ",(0,r.kt)("inlineCode",{parentName:"p"},"bearer token")," es leg\xedtimo, y podemos usarlo para autorizar al usuario, es hacer uso de un ",(0,r.kt)("inlineCode",{parentName:"p"},"JWKS"),". Nuestra instalaci\xf3n de Identity Server ya nos provee un endpoint para conseguir uno: ",(0,r.kt)("a",{parentName:"p",href:"https://localhost:5001/.well-known/openid-configuration/jwks"},"https://localhost:5001/.well-known/openid-configuration/jwks"),"."),(0,r.kt)("p",null,"Para hacer uso de \xe9l desde nuestra API en nodejs, vamos a instalar los siguientes paquetes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install express-jwt jwks-rsa --save\n")),(0,r.kt)("p",null,"Una vez instalados, es hora de crear un middleware para ayudarnos a asegurar nuestra API."),(0,r.kt)("p",null,"Creamos el archivo ",(0,r.kt)("inlineCode",{parentName:"p"},"auth.middleware.js")," dentro del folder ",(0,r.kt)("inlineCode",{parentName:"p"},"src/middlewares"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"md src/middlewares && cd src/middlewares && touch auth.middleware.js\n")),(0,r.kt)("p",null,"En este archivo, configuraremos los paquetes ",(0,r.kt)("inlineCode",{parentName:"p"},"express-jwt")," y ",(0,r.kt)("inlineCode",{parentName:"p"},"jwks-rsa")," para obtener una funci\xf3n que nos permita asegurar rutas espec\xedficas."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/middlewares/auth.middleware.js"',title:'"src/middlewares/auth.middleware.js"'},'const jwt = require("express-jwt");\nconst jwksRsa = require("jwks-rsa");\n\n// For simplicity, we\'ve hardcoded these values here.\n// However, you must keep these values a secret. \n// Do not commit them to Git.\n// I highly recommend to use the dot-env package.\nconst IDENTITY_ISSUER = `https://localhost:5001`;\n\nconsole.info(`[issuer]: ${IDENTITY_ISSUER}`);\n\nconst authorize = jwt({\n  secret: jwksRsa.expressJwtSecret({\n    cache: true,\n    rateLimit: true,\n    jwksRequestsPerMinute: 5,\n    jwksUri: `${IDENTITY_ISSUER}/.well-known/openid-configuration/jwks`,\n  }),\n  issuer: `${IDENTITY_ISSUER}`,\n  algorithms: [`RS256`],\n});\n\nmodule.exports = authorize;\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="app.js"',title:'"app.js"'},"const express = require('express');\nconst app = express();\nconst port = 3005;\n\n// highlight-start \nconst authorize = require(\"./src/middlewares/auth.middleware\");\n// highlight-end\n\napp.get(`/`, (req, res) => {\n  res.send(`Hello World!`);\n});\n\n// highlight-start \n// To be available by anyone\napp.get(`/allow-anonymous`, (req, res) => {\n  res.send(`No token needed to see this message!`);\n});\n\n// To be available only for those with a bearer token\napp.get(`/authorization-needed`, authorize, (req, res) => {\n  res.send(`A bearer token was needed to see this message!`);\n});\n// highlight-end\n\napp.listen(port, () => {\n  console.log(`App listening at http://localhost:${port}`);\n})\n")),(0,r.kt)("p",null,"\xa1Genial! Al ejecutar el proyecto de nuevo y acceder a esos endpoints desde el navegador, veremos que \xfanicamente ",(0,r.kt)("inlineCode",{parentName:"p"},"/allow-anonymous")," nos devuelve el mensaje que hemos escrito mientras que ",(0,r.kt)("inlineCode",{parentName:"p"},"/authorization-needed")," nos devuelve un ",(0,r.kt)("inlineCode",{parentName:"p"},"UnauthorizedError"),"."),(0,r.kt)("figure",{class:"md-captioned-image"},(0,r.kt)("img",{src:t(9450).Z,alt:"Allow Anonymous Endpoint"}),(0,r.kt)("figcaption",null,"http://localhost:3005/allow-anonymous")),(0,r.kt)("figure",{class:"md-captioned-image"},(0,r.kt)("img",{src:t(4924).Z,alt:"Authorization Needed Endpoint"}),(0,r.kt)("figcaption",null,"http://localhost:3005/authorization-needed")),(0,r.kt)("p",null,"Aunque hayamos llegado tan lejos, a\xfan nos falta responder a un par de preguntas. Primero, \xbfC\xf3mo hago para hacer llegar el ",(0,r.kt)("inlineCode",{parentName:"p"},"bearer token")," al endpoint ",(0,r.kt)("inlineCode",{parentName:"p"},"authorization-needed"),"? y segundo, m\xe1s importante a\xfan, \xbfC\xf3mo obtengo un ",(0,r.kt)("inlineCode",{parentName:"p"},"bearer token"),"?"),(0,r.kt)("h2",{id:"bearer-token"},"Bearer token"),(0,r.kt)("p",null,"En la secci\xf3n ",(0,r.kt)("a",{parentName:"p",href:"#scopes--clients"},(0,r.kt)("em",{parentName:"a"},"Scopes + Clients")),", te mostr\xe9 como obtener un ",(0,r.kt)("inlineCode",{parentName:"p"},"bearer token")," haciendo uso del ",(0,r.kt)("em",{parentName:"p"},"grant_type")," ",(0,r.kt)("inlineCode",{parentName:"p"},"client_credential"),"."),(0,r.kt)(i.Z,{groupId:"demos-mariomenjr-bearer-token",defaultValue:"curl",values:[{label:"cURL",value:"curl"},{label:"wget",value:"wget"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"curl",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"curl --insecure --location --request POST 'https://localhost:5001/connect/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'client_id=testClient' \\\n--data-urlencode 'client_secret=testSecret' \\\n--data-urlencode 'scope=testApi' \\\n--data-urlencode 'grant_type=client_credentials'\n"))),(0,r.kt)(s.Z,{value:"wget",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Content-Type: application/x-www-form-urlencoded' \\\n  --body-data 'client_id=testClient&client_secret=testSecret&scope=testApi&grant_type=client_credentials' \\\n   'https://localhost:5001/connect/token'\n")))),(0,r.kt)("p",null,"El ",(0,r.kt)("em",{parentName:"p"},"grant_type")," ",(0,r.kt)("inlineCode",{parentName:"p"},"client_credential")," est\xe1 dise\xf1ado para permitir la comunicaci\xf3n de m\xe1quina a m\xe1quina. Es usado cuando aplicaciones requieren de un ",(0,r.kt)("inlineCode",{parentName:"p"},"access token")," pero no hay ninguna intervenci\xf3n del usuario. Por ejemplo, un ",(0,r.kt)("em",{parentName:"p"},"cron job")," que ejecuta una API para hacer backups de informaci\xf3n."),(0,r.kt)("p",null,"Sin embargo, si quisieramos utilizar nuestro reci\xe9n creado servicio de autorizaci\xf3n con en una aplicaci\xf3n web, tenemos que ponernos creativos. Para esto existe el ",(0,r.kt)("em",{parentName:"p"},"Authorization Code Flow con PKCE"),"."),(0,r.kt)("h3",{id:"react-app--authorization-code-flow"},"React App + Authorization Code Flow"),(0,r.kt)("p",null,"Vamos a crear una Single Page Application usando el famosis\xedmo ",(0,r.kt)("inlineCode",{parentName:"p"},"creat-react-app"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx create-react-app my-app\n")),(0,r.kt)("p",null,"Ya que estamos en la l\xednea de comando, vamos a instalar un paquete que nos permitir\xe1 hacer uso del Identity Server."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install oidc-client --save\n")),(0,r.kt)("p",null,"Ahora crearemos dos archivos, un ",(0,r.kt)("inlineCode",{parentName:"p"},"callback.html")," dentro del folder ",(0,r.kt)("inlineCode",{parentName:"p"},"public")," y un ",(0,r.kt)("inlineCode",{parentName:"p"},"oidcUtils.js")," en el folder ",(0,r.kt)("inlineCode",{parentName:"p"},"src"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="public/callback.html"',title:'"public/callback.html"'},'<!DOCTYPE html>\n<html>\n<head>\n    <meta charset="utf-8" />\n    <title></title>\n</head>\n<body>\n    <script src="https://cdnjs.cloudflare.com/ajax/libs/oidc-client/1.11.5/oidc-client.min.js"><\/script>\n    <script>\n        new Oidc.UserManager({response_mode:"query"}).signinRedirectCallback().then(function() {\n            window.location = "index.html";\n        }).catch(function(e) {\n            console.error(e);\n        });\n    <\/script>\n</body>\n</html>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/oidcUtils.js"',title:'"src/oidcUtils.js"'},'import Oidc from "oidc-client";\n\nexport const oidcManager = new Oidc.UserManager({\n  authority: "http://localhost:5000",\n  client_id: "js",\n  redirect_uri: "http://localhost:3001/callback.html",\n  response_type: "code",\n  scope: "openid profile test-scope",\n  post_logout_redirect_uri: "http://localhost:3001/index.html",\n});\n\n// Redirecciona a la aplicaci\xf3n una vez aut\xe9nticado\nexport function signinRedirectCallback() {\n  new Oidc.UserManager({ response_mode: "query" })\n    .signinRedirectCallback()\n    .then(function () {\n      window.location.reload();\n    })\n    .catch(function (e) {\n      console.error(e);\n    });\n}\n\n// Redirecciona al IdentityServer para autenticarnos\nexport function login() {\n  oidcManager.signinRedirect();\n}\n\nexport function callApi() {\n  oidcManager.getUser().then(function (user) {\n    var url = "http://localhost:3005/authorization-needed";\n\n    var xhr = new XMLHttpRequest();\n    xhr.open("GET", url);\n    xhr.onload = function () {\n      console.debug({ xhr });\n      log(xhr.status, xhr.responseText);\n    };\n    xhr.setRequestHeader(\n      "Authorization",\n      !!user ? "Bearer " + user.access_token : ``\n    );\n    xhr.send();\n  });\n}\n\n// Invalida nuestro token\nexport function logout() {\n  oidcManager.signoutRedirect();\n}\n\nexport function log() {\n  document.getElementById("results").innerText = "";\n\n  Array.prototype.forEach.call(arguments, function (msg) {\n    if (msg instanceof Error) {\n      msg = "Error: " + msg.message;\n    } else if (typeof msg !== "string") {\n      msg = JSON.stringify(msg, null, 2);\n    }\n    document.getElementById("results").innerHTML += msg + "\\r\\n";\n  });\n}\n')),(0,r.kt)("p",null,"Con esto, reemplaza el contenido de ",(0,r.kt)("inlineCode",{parentName:"p"},"App.js")," por lo siguiente."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.js"',title:'"App.js"'},'import React from "react";\nimport \'./App.css\';\n\nimport { oidcManager, signinRedirectCallback, log, login, logout } from "./oidcUtils";\n\nfunction App() {\n  const [isLogged, isLoggedSet] = React.useState(false);\n\n  React.useEffect(() => {\n    if (window.location.pathname === `/callback.html`) signinRedirectCallback();\n    else\n      oidcManager.getUser().then((u) => {\n        isLoggedSet(!!u);\n        \n        if (!!u) log("User logged in", u.profile);\n        else log("User not logged in");\n      });\n  }, []);\n\n  return <div style={{padding: 5}}>\n    {!isLogged && <button onClick={login}>Login</button>}\n    <button>Call API</button>\n    {isLogged && <button onClick={logout}>Logout</button>}\n\n    <div id="results"></div>\n  </div>;\n}\n\nexport default App;\n\n')),(0,r.kt)("p",null,"Seguro notaste que configuramos el ",(0,r.kt)("inlineCode",{parentName:"p"},"authority")," con la direcci\xf3n ",(0,r.kt)("em",{parentName:"p"},"http://localhost:5000"),", pero nuestro Identity Server corre sobre ",(0,r.kt)("inlineCode",{parentName:"p"},"https")," y el puerto ",(0,r.kt)("inlineCode",{parentName:"p"},"5001"),". "),(0,r.kt)("p",null,"Bien, debemos hacer ciertos cambios y adiciones en el Identity Server."),(0,r.kt)("h3",{id:"identity-server--authorization-code-flow"},"Identity Server + Authorization Code Flow"),(0,r.kt)("p",null,"Para evitar problemas con Chrome, y mientras estamos en el ambiente de desarrollo, vamos a cambiar esta configuraci\xf3n en el Identity Server."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Identity/Identity.API/Properties/launchSettings.json"',title:'"Identity/Identity.API/Properties/launchSettings.json"'},'{\n  "profiles": {\n    "SelfHost": {\n      "commandName": "Project",\n      "launchBrowser": true,\n      "environmentVariables": {\n        "ASPNETCORE_ENVIRONMENT": "Development"\n      },\n      // highlight-start\n      // "applicationUrl": "https://localhost:5001"\n      "applicationUrl": "http://localhost:5000"\n      // highlight-end\n    }\n  }\n}\n')),(0,r.kt)("p",null,"Esto no es suficiente. Al googlear un rato, me top\xe9 con esta ",(0,r.kt)("a",{parentName:"p",href:"https://stackoverflow.com/a/61302188/3135446"},"respuesta")," en ",(0,r.kt)("em",{parentName:"p"},"StackOverflow")," y funcion\xf3 de maravilla. Primero creamos una extensi\xf3n al ",(0,r.kt)("inlineCode",{parentName:"p"},"IServiceCollection"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Identity.API/SameSiteCookiesServiceCollectionExtensions.cs"',title:'"Identity.API/SameSiteCookiesServiceCollectionExtensions.cs"'},'using System;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Http;\n \nnamespace Microsoft.Extensions.DependencyInjection\n{\n   public static class SameSiteCookiesServiceCollectionExtensions\n   {\n      private const SameSiteMode Unspecified = (SameSiteMode) (-1);\n \n      public static IServiceCollection ConfigureNonBreakingSameSiteCookies(this IServiceCollection services)\n      {\n         services.Configure<CookiePolicyOptions>(options =>\n         {\n            options.MinimumSameSitePolicy = Unspecified;\n            options.OnAppendCookie = cookieContext =>\n               CheckSameSite(cookieContext.Context, cookieContext.CookieOptions);\n            options.OnDeleteCookie = cookieContext =>\n               CheckSameSite(cookieContext.Context, cookieContext.CookieOptions);\n         });\n \n         return services;\n      }\n\n      private static void CheckSameSite(HttpContext httpContext, CookieOptions options)\n      {\n         if (options.SameSite == SameSiteMode.None)\n         {\n            var userAgent = httpContext.Request.Headers["User-Agent"].ToString();\n\n            if (DisallowsSameSiteNone(userAgent))\n            {\n               options.SameSite = Unspecified;\n            }\n         }\n      }\n \n      private static bool DisallowsSameSiteNone(string userAgent)\n      {\n         if (userAgent.Contains("CPU iPhone OS 12")\n            || userAgent.Contains("iPad; CPU OS 12"))\n         {\n            return true;\n         }\n\n         if (userAgent.Contains("Safari")\n            && userAgent.Contains("Macintosh; Intel Mac OS X 10_14")\n            && userAgent.Contains("Version/"))\n         {\n            return true;\n         }\n\n         if (userAgent.Contains("Chrome/5") || userAgent.Contains("Chrome/6"))\n         {\n            return true;\n         }\n\n         var chromeVersion = GetChromeVersion(userAgent);\n         if (chromeVersion >= 80)\n         {\n            return true;\n         }\n\n         return false;\n      }\n\n      private static int GetChromeVersion(string userAgent)\n      {\n         try\n         {\n            var subStr = Convert.ToInt32(userAgent.Split("Chrome/")[1].Split(\'.\')[0]);\n            return subStr;\n         }\n         catch (Exception)\n         {\n            return 0;\n         }\n      }\n   }\n}\n')),(0,r.kt)("p",null,"Y luego la implementamos en las configuraciones del ",(0,r.kt)("inlineCode",{parentName:"p"},"Startup.cs"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Identity.API/Startup.cs"',title:'"Identity.API/Startup.cs"'},"public void ConfigureServices(IServiceCollection services)\n{\n   // ...\n   // highlight-start\n   services.ConfigureNonBreakingSameSiteCookies();\n   // highlight-end\n}\n // ...\npublic void Configure(IApplicationBuilder app)\n{\n   // ...\n   // A\xf1ade esta l\xednea antes de cualquier `middleware` que pueda escribir `cookies`\n   // highlight-start\n   app.UseCookiePolicy();\n   // highlight-end\n   // ...\n   // Esto escribir\xe1 `cookies`, aseg\xfarate que se a\xf1ada despu\xe9s de la pol\xedtica de `cookies`\n   app.UseAuthentication();\n   // ...\n}\n")),(0,r.kt)("p",null,"Tambi\xe9n debemos configurar CORS."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Identity.API/Startup.cs"',title:'"Identity.API/Startup.cs"'},'public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n    // highlight-start\n    services.AddCors(options =>\n    {\n        // Esto define una pol\xedtica de CORS llamada "default"\n        options.AddPolicy("default", policy =>\n        {\n           // El puerto de la React App\n            policy.WithOrigins("http://localhost:3001")\n                .AllowAnyHeader()\n                .AllowAnyMethod();\n        });\n    });\n    // highlight-end\n}\n// ...\npublic void Configure(IApplicationBuilder app)\n{\n    // ...\n    app.UseRouting();\n    // ...\n    // highlight-start\n    app.UseCors("default");\n    // highlight-end\n    // ...\n}\n')),(0,r.kt)("p",null,"Al ejecutar el project de nuevo, ver\xe1s que ahora corre en la nueva direcci\xf3n."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"[21:48:29 Debug]"," IdentityServer4.Startup ",(0,r.kt)("br",null),"\nUsing idsrv as default ASP.NET Core scheme for forbid ",(0,r.kt)("br",null)),(0,r.kt)("p",{parentName:"blockquote"},"[21:48:29 Information]"," Microsoft.Hosting.Lifetime ",(0,r.kt)("br",null),"\nNow listening on: http://localhost:5000")),(0,r.kt)(i.Z,{groupId:"operating-systems",defaultValue:"cli",values:[{label:"Command Line Interface",value:"cli"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"cli",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet run --project Identity.API\n")))),(0,r.kt)("figure",{class:"md-captioned-image"},(0,r.kt)("img",{src:t(1370).Z,alt:"Authorization Code Flow"}),(0,r.kt)("figcaption",null,"Authorization Code Flow con PKCE en acci\xf3n.")),(0,r.kt)("h3",{id:"api--bearer-token"},"API + Bearer Token"),(0,r.kt)("p",null,"Finalmente, consumiremos nuestra API desde la React App haciendo uso del ",(0,r.kt)("inlineCode",{parentName:"p"},"access token")," que acabamos de obtener desde el Identity Server."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src/App.js"',title:'"src/App.js"'},'import React from "react";\nimport \'./App.css\';\n\n// highlight-start\nimport { oidcManager, signinRedirectCallback, log, login, logout, callApi } from "./oidcUtils";\n// highlight-end\n\nfunction App() {\n  const [isLogged, isLoggedSet] = React.useState(false);\n\n  React.useEffect(() => {\n    if (window.location.pathname === `/callback.html`) signinRedirectCallback();\n    else\n      oidcManager.getUser().then((u) => {\n        isLoggedSet(!!u);\n        \n        if (!!u) log("User logged in", u.profile);\n        else log("User not logged in");\n      });\n  }, []);\n\n  return <div style={{padding: 5}}>\n    {!isLogged && <button onClick={login}>Login</button>}\n    // highlight-start\n    <button onClick={callApi}>Call API</button>\n    // highlight-end\n    {isLogged && <button onClick={logout}>Logout</button>}\n\n    <div id="results"></div>\n  </div>;\n}\n\nexport default App;\n')),(0,r.kt)("p",null,"Haz click sobre el bot\xf3n ",(0,r.kt)("em",{parentName:"p"},"Call API")," antes de loguearte, notar\xe1s que recibes un ",(0,r.kt)("inlineCode",{parentName:"p"},"UnauthorizedError"),". Una vez nos logueamos a trav\xe9s del Identity Server, nuestro ",(0,r.kt)("em",{parentName:"p"},"/authorization-needed")," endpoint nos devuelve el mensaje escrito sin problemas."),(0,r.kt)("figure",{class:"md-captioned-image"},(0,r.kt)("img",{src:t(1886).Z,alt:"Consumiendo un API protegida desde una SPA"}),(0,r.kt)("figcaption",null,"Consumiendo un API protegida desde una SPA.")),(0,r.kt)("h2",{id:"autenticaci\xf3n-\xf3-c\xf3mo-saber-qui\xe9n-est\xe1-siendo-autorizado"},"Autenticaci\xf3n, \xf3 c\xf3mo saber qui\xe9n est\xe1 siendo autorizado"),(0,r.kt)("p",null,"Hasta este momento, hemos visto c\xf3mo Identity Server nos ha permitido asegurar APIs con un ",(0,r.kt)("inlineCode",{parentName:"p"},"access token"),". Sin embargo, a\xfan no conocemos qui\xe9n es ese usuario del cu\xe1l recibimos el ",(0,r.kt)("inlineCode",{parentName:"p"},"token"),". Recuerda, autorizar no es lo mismo que aut\xe9nticar."),(0,r.kt)("p",null,"Vamos a instalar un paquete, crear un nuevo archivo y hacer unas peque\xf1as modificaciones en nuestra ",(0,r.kt)("em",{parentName:"p"},"ExpressJS API")," para lograr identificar a nuestro usuario."),(0,r.kt)("p",null,"El paquete a instalar es:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install jwt-decode --save\n")),(0,r.kt)("p",null,"El nuevo archivo se llamar\xe1 ",(0,r.kt)("inlineCode",{parentName:"p"},"identity.middleware")," dentro del folder ",(0,r.kt)("inlineCode",{parentName:"p"},"middlewares"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/middlewares/identity.middleware"',title:'"src/middlewares/identity.middleware"'},'const jwt_decode = require("jwt-decode");\n\nfunction identify() {\n  return function(req, res, next) {\n    req.user = jwt_decode(req.headers.authorization.split(` `)[1]);\n    console.debug({ user: req.user, accessToken: req.headers.authorization.split(` `)[1] });\n    next();\n  }\n}\n\nmodule.exports = identify;\n')),(0,r.kt)("p",null,"Y ahora configuramos este middleware en nuestra API. El middleware se encargar\xe1 de decodificar el ",(0,r.kt)("inlineCode",{parentName:"p"},"access token")," para obtener informaci\xf3n del acceso, incluyendo un ",(0,r.kt)("inlineCode",{parentName:"p"},"user identifier"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/App.js"',title:'"src/App.js"'},'// ...\nconst authorize = require("./src/middlewares/auth.middleware");\n// highlight-start\nconst identify = require("./src/middlewares/identity.middleware");\n// highlight-end\n\napp.use(cors());\n// highlight-start\napp.use(identify());\n// highlight-end\n// ...\n')),(0,r.kt)("p",null,"Una vez volvemos a ejecutar nuestra API y loguearnos en nuestra ReactApp, al hacer click en el bot\xf3n ",(0,r.kt)("em",{parentName:"p"},"Call API")),(0,r.kt)("figure",{class:"md-captioned-image"},(0,r.kt)("img",{src:t(83).Z,alt:"Consumiendo un API protegida desde una SPA"}),(0,r.kt)("figcaption",null,"En el access token usado para autorizar el uso del API, hay una propiedad llamada sub. Es est\xe1 propiedad la que identifica al usuario. Es un user ID.")),(0,r.kt)("p",null,"Al imprimir el ",(0,r.kt)("inlineCode",{parentName:"p"},"access token")," en la consola de JavaScript, podemos copiar y pegarlo en el comando cURL de abajo, reemplazando el ",(0,r.kt)("inlineCode",{parentName:"p"},"<accessToken>"),", y al ejecutarlo obtener la informaci\xf3n de usuario. Con esta informaci\xf3n, podr\xedamos realizar condicionante en nuestra l\xf3gica de negocio que est\xe9n basadas en los ",(0,r.kt)("em",{parentName:"p"},"claims")," o roles que definamos en nuestros ",(0,r.kt)("em",{parentName:"p"},"clientes")," del Identity Server."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl --location --request GET 'http://localhost:5000/connect/userinfo' \\\n--header 'Authorization: Bearer <accessToken>'\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"{ ",(0,r.kt)("br",null),'\n"name": "Bob Smith", ',(0,r.kt)("br",null),'\n"given_name": "Bob", ',(0,r.kt)("br",null),'\n"family_name": "Smith", ',(0,r.kt)("br",null),'\n"website": "',(0,r.kt)("a",{parentName:"p",href:"http://bob.com%22"},'http://bob.com"'),", ",(0,r.kt)("br",null),'\n"sub": "88421113" ',(0,r.kt)("br",null),"\n} ",(0,r.kt)("br",null))),(0,r.kt)("p",null,"Podr\xedamos incorporar esta informaci\xf3n en nuestro ciclo de vida del request, pero dejaremos eso para otro post."),(0,r.kt)("h2",{id:"conclusi\xf3n"},"Conclusi\xf3n"),(0,r.kt)("p",null,"Una de las principales ventajas al delegar la autorizaci\xf3n y aut\xe9nticaci\xf3n de tus aplicaciones a una implementaci\xf3n del OAuth 2.0 y OpenID es la seguridad. Al ser un est\xe1ndar avalado por grandes compa\xf1\xedas y consorcios podemos estar seguros de su efectividad y fiabilidad."),(0,r.kt)("p",null,"Desde un punto de vista m\xe1s enfocado a la arquitectura de nuestra aplicaci\xf3n, es interesante c\xf3mo ninguna de las Apps aqu\xed mostradas (piensa el API de Express JS y la SPA de React) tuvo la necesidad de manejar ni el usuario ni la contrase\xf1a del usuario. Esto es poderoso. Permite que Apps de terceros trabajen juntas sin necesidad de preocuparse en los mecanismos de autenticaci\xf3n y autorizaci\xf3n."),(0,r.kt)("p",null,"Sin embargo, ning\xfan software es perfecto. Como vimos, OAuth va por su segunda versi\xf3n y es del otod probable que en el futuro haya una tercera. Lo qu\xe9 nos queda es nunca para de aprender."),(0,r.kt)("p",null,"Espero este post te haya servido, si es as\xed, comp\xe1rtelo con tus colegas. Happy coding!"),(0,r.kt)("h2",{id:"referencias"},"Referencias"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.okta.com/identity-101/authentication-vs-authorization/"},"Authentication vs. Authorization")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://auth0.com/intro-to-iam/what-is-oauth-2/"},"What is OAuth 2.0?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://auth0.com/docs/flows"},"Authentication and Authorization Flows")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://identityserver4.readthedocs.io/en/latest/intro/big_picture.html"},"Identity Server 4: The Big Picture")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.ibm.com/docs/en/sva/10.0.1?topic=applications-jwks"},"JKWS by IBM")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://identityserver4.readthedocs.io/en/latest/quickstarts/4_javascript_client.html"},"Adding a JavaScript client")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.thinktecture.com/en/identity/samesite/prepare-your-identityserver/"},"How to prepare your IdentityServer for Chrome's SameSite cookie changes - and how to deal with Safari, nevertheless"))))}h.isMDXComponent=!0},1370:function(e,n,t){n.Z=t.p+"assets/images/001-authorization-code-flow-170790e0666afb267bf3e39e92a1db93.gif"},5472:function(e,n,t){n.Z=t.p+"assets/images/001-google-oauth-d9e8bb89cd9d8f3a3ed69a59ab5b6eac.png"},9450:function(e,n,t){n.Z=t.p+"assets/images/002-api-allow-anonymous-5bfd3cad13ceca2891c3107cda297caa.png"},1886:function(e,n,t){n.Z=t.p+"assets/images/002-consume-api-bearer-6f2b1197e13a0f85f3fd5856d0b4efda.gif"},4924:function(e,n,t){n.Z=t.p+"assets/images/003-api-authorization-needed-99c9048107f4ffbceef09a5679941224.png"},83:function(e,n,t){n.Z=t.p+"assets/images/004-sub-in-token-9641068a60827dd8200f689ecda5e1b1.png"}}]);