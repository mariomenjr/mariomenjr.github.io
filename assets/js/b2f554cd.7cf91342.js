"use strict";(self.webpackChunkmariomenjr=self.webpackChunkmariomenjr||[]).push([[1477],{10:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"2021/08/18/como-consultar-y-persistir-datos-en-mongodb-con--net","metadata":{"permalink":"/blog/2021/08/18/como-consultar-y-persistir-datos-en-mongodb-con--net","editUrl":"https://github.com/mariomenjr/mariomenjr/edit/main/blog/2021-08-18_como-consultar-y-persistir-datos-en-mongodb-con-net.md","source":"@site/blog/2021-08-18_como-consultar-y-persistir-datos-en-mongodb-con-net.md","title":"C\xf3mo consultar y persistir datos en MongoDB con .NET","description":"En esta entrada, te mostrar\xe9 como implementar una capa de datos siguiendo el patr\xf3n repositorio para consultar y persistir datos a una instalaci\xf3n de MongoDB haciendo uso de C# y el .NET Core Framework.","date":"2021-08-18T23:31:18.000Z","formattedDate":"18 de agosto de 2021","tags":[{"label":"csharp","permalink":"/blog/tags/csharp"},{"label":"mongodb","permalink":"/blog/tags/mongodb"},{"label":"repository pattern","permalink":"/blog/tags/repository-pattern"},{"label":"patr\xf3n de repositorio","permalink":"/blog/tags/patron-de-repositorio"},{"label":"dao","permalink":"/blog/tags/dao"},{"label":"data layer","permalink":"/blog/tags/data-layer"}],"readingTime":16.545,"truncated":true,"authors":[{"name":"Mario Menj\xedvar","title":"Software Engineer","url":"https://github.com/mariomenjr","imageURL":"https://avatars3.githubusercontent.com/u/1946936?s=460&v=4"}],"frontMatter":{"slug":"2021/08/18/como-consultar-y-persistir-datos-en-mongodb-con--net","title":"C\xf3mo consultar y persistir datos en MongoDB con .NET","author":"Mario Menj\xedvar","author_title":"Software Engineer","author_url":"https://github.com/mariomenjr","author_image_url":"https://avatars3.githubusercontent.com/u/1946936?s=460&v=4","tags":["csharp","mongodb","repository pattern","patr\xf3n de repositorio","dao","data layer"],"keywords":["consultar mongodb net","insertar documento mongodb net","crud mongodb net csharp","repository pattern mongodb net","mongodb csharp espa\xf1ol"],"date":"2021-08-18T23:31:18.000Z","description":"En esta entrada, te mostrar\xe9 como implementar una capa de datos siguiendo el patr\xf3n repositorio para consultar y persistir datos a una instalaci\xf3n de MongoDB haciendo uso de C# y el .NET Core Framework.","image":"https://images.unsplash.com/photo-1597852074816-d933c7d2b988?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=512&q=80"},"nextItem":{"title":"Autenticaci\xf3n como servicio con Identity Server 4","permalink":"/blog/2021/07/29/autenticacion-como-servicio-con-identity-server-4"}},"content":"import Tabs from \\"@theme/Tabs\\";\\nimport TabItem from \\"@theme/TabItem\\"; \\n\\nSe ha escrito much\xedsimo acerca de las ventajas (y desventajas) de las bases de datos NoSQL frente a las SQL. Sin embargo, el tiempo nos ha ense\xf1ado que ambas son meras herramientas que son preferidas para casos espec\xedficos.\\n\\nEn esta entrada, te mostrar\xe9 como implementar una capa de datos siguiendo el patr\xf3n repositorio para consultar y persistir datos a una instalaci\xf3n de MongoDB haciendo uso de C# y el .NET Core Framework.\\n\\n\x3c!--truncate--\x3e\\n\\n## MongoDB\\n\\nPara empezar esta entrada vamos a crear una peque\xf1a base de datos usando MongoDB. Para esto, podemos usar un servicio online llamado `MongoDB Atlas` o una imagen de `Docker` con todo lo necesario para ejecutar nuestra base de datos localmente. Veamos c\xf3mo hacerlo con Docker.\\n\\n### Contenedor de Docker\\n\\nSin duda, esta opci\xf3n se te har\xe1 m\xe1s util si lo que quieres es una instalaci\xf3n local. Si haz usado Docker antes, sabr\xe1s de lo qu\xe9 te estoy hablando. Si no, ve\xe1moslo.\\n\\nEl primer paso es instalar Docker, eso depender\xe1 de tu sistema.\\n\\n<Tabs\\n\\tgroupId=\\"install-docker\\"\\n\\tdefaultValue=\\"linux\\"\\n\\tvalues={[\\n\\t\\t{label: \'Linux\', value: \'linux\'},\\n\\t\\t{label: \'macOs\', value: \'macos\'},\\n\\t\\t{label: \'Windows\', value: \'windows\'}\\n\\t]}>\\n\\n<TabItem value=\\"linux\\">\\n\\nPor lo general, hay que completar dos pasos para tener Docker listo en cualquier distro Linux. As\xed lo har\xedamos en Manjaro:\\n\\n1. Instalar el paquete desde los repositorios\\n\\n```bash\\nsudo pacman -S docker\\n```\\n\\n2. Una vez instalado, debemos `habilitarlo` e `iniciarlo`:\\n\\n```bash\\nsudo systemctl start docker\\n```\\n```bash\\nsudo systemctl enable docker\\n```\\n\\nAhora puedes ejecutar Docker como `root`. Opcionalmente, puedes agregar tu usuario al grupo de Docker. De este modo, puedes ejecutar contenedores sin necesidad del comando `sudo`.\\n\\n```bash\\nsudo usermod -aG docker $USER\\n```\\n\\nAnd, to make our lives easier, let\'s install `docker-compose`:\\n\\n```bash\\nsudo pacman -S docker-compose\\n```\\n\\n</TabItem>\\n<TabItem value=\\"macos\\">\\n\\n```bash\\nbrew install docker docker-compose docker-machine xhyve docker-machine-driver-xhyve\\n```\\n\\nM\xe1s detalles [aqu\xed](https://pilsniak.com/how-to-install-docker-on-mac-os-using-brew).\\n\\n</TabItem>\\n<TabItem value=\\"windows\\">\\n\\nSigue las siguientes [instrucciones](https://docs.docker.com/docker-for-windows/install/#install-docker-desktop-on-windows).\\n\\n</TabItem>\\n\\n</Tabs>\\n\\nYa que Docker est\xe1 listo, el siguiente paso es instalar y ejecutar un contenedor que tenga todo lo necesario para alojar una base de datos MongoDB. \\n\\nPor suerte, existe una [imagen oficial](https://hub.docker.com/_/mongo) que cumple con esas caracter\xedsticas. \\n\\nPara hacer crear un contenedor apartir de esta imagen, seguiremos los pasos en la documentaci\xf3n oficial. Crearemos el siguiente archivo en el directorio que prefieras.\\n\\n```yml title=\\"~/Samples/docker-mongo/docker-compose.yml\\"\\n# Usa root/password como usuario/contrase\xf1a\\nversion: \'3.1\'\\n\\nservices:\\n\\n  mongo:\\n    image: mongo\\n    restart: always\\n    ports:\\n      - 27017:27017\\n    environment:\\n      MONGO_INITDB_ROOT_USERNAME: root\\n      MONGO_INITDB_ROOT_PASSWORD: password\\n\\n  mongo-express:\\n    image: mongo-express\\n    restart: always\\n    ports:\\n      - 8081:8081\\n    environment:\\n      ME_CONFIG_MONGODB_ADMINUSERNAME: root\\n      ME_CONFIG_MONGODB_ADMINPASSWORD: password\\n      ME_CONFIG_MONGODB_URL: mongodb://root:password@mongo:27017/\\n```\\n\\nUna vez creado, es hora de construir nuestro contendor. Para eso, nos posicionamos en el directorio.\\n\\n```bash\\ncd ~/Samples/docker-mongo\\n```\\n\\nY ejecutamos `docker-compose up`:\\n\\n```bash\\ndocker-compose up\\n```\\n\\nSi todo sali\xf3 bien, deber\xedas ver las siguientes l\xedneas:\\n\\n> mongo-express_1  | Mongo Express server listening at http://0.0.0.0:8081 <br />\\n> mongo-express_1  | Server is open to allow connections from anyone (0.0.0.0) <br />\\n> mongo-express_1  | basicAuth credentials are \\"admin:pass\\", it is recommended(...) <br />\\n\\nSi llevas tiempo desarrollando software, seguro recordar\xe1s a PhpMyAdmin. La imagen oficial de _MongoDB_ provee un servicio muy parecido llamado `Mongo Express`, dir\xedgete a [http://localhost:8081](http://localhost:8081) para acceder.\\n\\n## Preparando el ejemplo\\n\\n### Base de datos\\n\\nAl acceder a _Mongo Express_, lo primero que haremos ser\xe1 crear una base de datos.\\n\\n<figure class=\\"md-captioned-image\\">\\n  <img src={require(\'../static/img/blog/007/007-mongo-express.png\').default} alt=\\"Mongo Express\\" />\\n  <figcaption>Instancia local de Mongo Express.</figcaption>\\n</figure>\\n\\n<figure class=\\"md-captioned-image\\">\\n  <img src={require(\'../static/img/blog/007/007-db-created.png\').default} alt=\\"DB Created\\" />\\n  <figcaption>Base de datos creada.</figcaption>\\n</figure>\\n\\nEn el siguiente paso crearemos una collecci\xf3n.\\n\\n<figure class=\\"md-captioned-image\\">\\n  <img src={require(\'../static/img/blog/007/007-collection-created.png\').default} alt=\\"Collection Created\\" />\\n  <figcaption>Creating Collection.</figcaption>\\n</figure>\\n\\nY por \xfaltimo el primer documento, siguiendo un esquema sencillo. \xdanicamente una propiedad: `username`.\\n\\n<figure class=\\"md-captioned-image\\">\\n  <img src={require(\'../static/img/blog/007/007-new-document.png\').default} alt=\\"Document Created\\" />\\n  <figcaption>Nuevo documento creado.</figcaption>\\n</figure>\\n\\n> En este ejemplo, tenemos que crear un usuario distinto a `root` para poder consultar y persistir datos desde la aplicaci\xf3n a trav\xe9s MongoDB.Driver para .NET. La forma m\xe1s sencilla de logralo es a trav\xe9s de [Robo 3T](https://robomongo.org/).\\n\\n<figure class=\\"md-captioned-image\\">\\n  <img src={require(\'../static/img/blog/007/007-create-user.png\').default} alt=\\"Sample->Users\\" />\\n  <figcaption>Click derecho en Sample->Users.</figcaption>\\n</figure>\\n\\n### API en .NET\\n\\nLo siguiente que haremos ser\xe1 crear una API en .NET para poder consumir la base de datos a trav\xe9s de endpoints. En realidad podr\xeda ser un proyecto de consola, una librer\xeda, o lo qu\xe9 tu quieras.\\n\\n<Tabs\\n\\tgroupId=\\"dotnet-webapi\\"\\n\\tdefaultValue=\\"cli\\"\\n\\tvalues={[\\n\\t\\t{label: \'.NET CLI\', value: \'cli\'},\\n\\t]}>\\n\\n<TabItem value=\\"cli\\">\\n\\nPrimero creamos el directorio de la soluci\xf3n.\\n\\n```bash\\nmkdir ~/Samples/dotnet-webapi/Sample.API && cd ~/Samples/dotnet-webapi/Sample.API\\n```\\n\\nUna vez ah\xed, creamos el proyecto API de `dotnet`.\\n\\n```bash\\ndotnet new webapi\\n```\\n\\nAhora creamos una soluci\xf3n, para que nuestro proyecto sea amigable con un IDE (en mi caso, Rider).\\n\\n```bash\\ncd .. & dotnet new sln -n Sample\\n```\\n\\n> The template \\"Solution File\\" was created successfully.\\n\\nY a\xf1adimos nuestro reci\xe9n creado proyecto `Sample.API` a la soluci\xf3n.\\n\\n```bash\\ndotnet sln add Sample.API/Sample.API.csproj\\n```\\n> The template \\"Solution File\\" was created successfully.\\n\\nEjecutamos nuestro proyecto para asegurarnos que hicimos todo bien.\\n\\n```bash\\ndotnet run --project Sample.API\\n```\\n\\nDeber\xedas ver una lista JSON en ese enlace: [https://localhost:5001/WeatherForecast](https://localhost:5001/WeatherForecast).\\n\\n</TabItem>\\n\\n</Tabs>\\n\\n### MongoDB.Driver\\n\\nPor \xfaltimo, instalaremos el driver oficial de MongoDB para .NET con el cu\xe1l podremos consultar e insertar datos. Haz click en el siguiente [link](https://www.nuget.org/packages/MongoDB.Driver/) para determinar la \xfaltima versi\xf3n estable y poder ejecutar el comando de abajo.\\n\\n```bash\\ndotnet add Sample.API/Sample.API.csproj package MongoDB.Driver -v {VERSION}\\n```\\n\\nUna vez instalado, crearemos un nuevo endpoint para conectarnos a MongoDB y validar la instalaci\xf3n.\\n\\nEl primer paso es crear un controlador llamado `ApiController`.\\n\\n```bash\\ntouch Sample.API/Controllers/ApiController.cs\\n```\\n\\nCon el siguiente contenido:\\n\\n```csharp title=\\"Sample.API/Controllers/ApiController.cs\\"\\nusing System.Linq;\\nusing Microsoft.AspNetCore.Mvc;\\nusing MongoDB.Driver;\\n\\nnamespace Sample.API.Controllers\\n{\\n    [Route(\\"[controller]\\")]\\n    [ApiController]\\n    public class ApiController : ControllerBase\\n    {\\n        [HttpGet, Route(\\"[action]\\")]\\n        public JsonResult GetUsers()\\n        {\\n            var client = new MongoClient(\\"mongodb://mariomenjr:mariomenjr@localhost:27017/sample\\");\\n            var database = client.GetDatabase(\\"sample\\");\\n\\n            var users = database.GetCollection<object>(\\"users\\");\\n            var datos = users.AsQueryable().Select(s => s);\\n\\n            return new JsonResult(datos);\\n        }\\n    }\\n}\\n```\\n\\nAl dirigirnos al nuevo endpoint, veremos que nuestro \xfanico usuario registrado es devuelto en formato JSON.\\n\\n<figure class=\\"md-captioned-image\\">\\n  <img src={require(\'../static/img/blog/007/007-ApiGetUsers.png\').default} alt=\\"Consulta Users MongoDB\\" />\\n  <figcaption>Consultando colecci\xf3n Users de MongoDB.</figcaption>\\n</figure>\\n\\n## Repository Pattern\\n\\nCon nuestra base de datos y API listas, el siguiente paso para consumir nuestra base de datos es crear nuestro repositorio.\\n\\nEl _Repository Pattern_ (o, Patr\xf3n de Repositorio en espa\xf1ol) es una estrategia en desarrollo de software para abstraer el acceso de datos en nuestra aplicaci\xf3n. En palabras m\xe1s simples, es el c\xf3digo que tiene como responsabilidad exclusiva el consultar y guardar datos en una aplicaci\xf3n.\\n\\nSin capa de abstracci\xf3n, podr\xedamos encontrarnos que el c\xf3digo de interacci\xf3n con la base de datos es parte de la l\xf3gica de negocio de tu aplicaci\xf3n.\\n\\n<figure class=\\"md-captioned-image\\">\\n  <img src={require(\'../static/img/blog/007/007-non-repository-diagram.png\').default} alt=\\"Non Repository Diagram\\" />\\n  <figcaption>Diagrama de acceso a datos sin una capa de abstracci\xf3n.</figcaption>\\n</figure>\\n\\nAlgo similar a esto:\\n\\n```csharp title=\\"Sample.API/Controllers/ApiController.cs\\"\\n// ... M\xe9todo GetUsers  \\n\\n// highlight-start \\n// C\xf3digo para conectarnos a la base de datos\\nvar client = new MongoClient(\\"mongodb://mariomenjr:mariomenjr@localhost:27017/sample\\");\\nvar database = client.GetDatabase(\\"sample\\");\\n// highlight-end\\n\\n// highlight-start \\n// C\xf3digo de consulta de datos\\nvar users = database.GetCollection<object>(\\"users\\");\\nvar datos = users.AsQueryable().Select(s => s);\\n// highlight-end\\n\\n// C\xf3digo de aplicaci\xf3n que devuelve datos como JSON\\nreturn new JsonResult(datos);\\n\\n// ...\\n```\\n\\nPodr\xedas argumentar que esta pieza de c\xf3digo _hace el trabajo_, \xbfPor qu\xe9 querr\xedamos abstraerlo? Claro, es una pregunta v\xe1lida. Hay muchas razones por las qu\xe9 nos conviene m\xe1s tener una capa dedicada al acceso a datos que repetir c\xf3digo por todos lados.\\n\\n<figure class=\\"md-captioned-image\\">\\n  <img src={require(\'../static/img/blog/007/007-repository-diagram.png\').default} alt=\\"Repository Diagram\\" />\\n  <figcaption>Diagrama de acceso a datos con el Patr\xf3n de Repositorio</figcaption>\\n</figure>\\n\\nEn primera, las aplicaciones nunca est\xe1n terminadas. Siempre habr\xe1 una actualizaci\xf3n por hacer. Por ejemplo, \xbfQu\xe9 pasa si agregas un nuevo campo a la tabla `Users`? Tendr\xedas que reescribir cada parte de tu aplicaci\xf3n d\xf3nde accedas a estos datos. Esto implica no solo la reescritura, pero una revalidaci\xf3n de toda la aplicaci\xf3n. Nada bonito, cr\xe9eme.\\n\\n## Sample.DAL\\n\\nSi has trabajado con .NET antes, seguro habr\xe1s escuchado la palabra DAL. Aunque no es propia de este lenguaje de programaci\xf3n, es muy com\xfan ver esta abstracci\xf3n en proyectos con esta tecnolog\xeda. No es raro ver soluciones con m\xe1s de un proyecto, y uno de los cu\xe1les lleve en su nombre el sufijo `.DAL` o `Data Access Layer` (o _capa de acceso a datos_ en espa\xf1ol).\\n\\nPor lo general, las soluciones de .NET que implementan un proyecto .DAL consumen datos de una base de datos en Microsoft SQL Server. En nuestro caso, haremos algo muy parecido pero con MongoDB. Let\'s have fun.\\n\\n### Cortana, crea un segundo proyecto\\n\\nVamos a crear un segundo proyecto dentro de nuestra soluci\xf3n, ser\xe1 nuestra `DAL`.\\n\\n```bash\\nmkdir Sample.DAL && dotnet new classlib\\n```\\n\\nY ahora lo a\xf1adimos a nuestra soluci\xf3n.\\n\\n```bash\\ncd .. && dotnet sln add Sample.DAL/Sample.DAL.csproj\\n```\\n\\n### Instalamos MongoDB.Driver, de nuevo\\n\\nEsta vez en nuestro proyecto DAL. Para mayor detalle, [MongoDB.Driver](#mongodbdriver).\\n\\n```bash\\ndotnet add Sample.DAL/Sample.DAL.csproj package MongoDB.Driver -v {VERSION}\\n```\\n\\n### Referencia DAL en API\\n\\nNuestra API debe ser capaz de consumir nuestro proyecto DAL.\\n\\n```bash\\ndotnet add Sample.API/Sample.API.csproj reference Sample.DAL/Sample.DAL.csproj\\n```\\n\\n### Estructura del paquete DAL\\n\\nNuestro paquete _DAL_ tendr\xe1 la siguiente estructura. En el directorio `Mongo`, escribiremos c\xf3digo necesario para conectarnos a la base de datos y para proveer un ancla en nuestro proyecto, el API. Por otro lado, el directorio `Repository` albergar\xe1 c\xf3digo necesario por consumir datos de cada colecci\xf3n.\\n\\n```\\n\u251c Sample.DAL\\n\u2502 \u251c Mongo\\n| | \u251c Extensions\\n| | \u251c Connections\\n\u2502 \u251c Repository\\n| | \u251c Managers\\n| | \u251c IServices\\n| \u251c Entidades // Podr\xedamos crear un tercer proyecto apartir de este directorio, por simplicidad lo dejaremos aqu\xed.\\n```\\n\\nEmpecemos por crear los dos directorios con mayor jerarqu\xeda en este proyecto.\\n\\n```bash\\nmkdir Sample.DAL/Mongo && mkdir Sample.DAL/Repository && mkdir Sample.DAL/Entidades\\n```\\n\\nY luego todos los dem\xe1s.\\n\\n```bash\\nmkdir Sample.DAL/Mongo/Extensions && mkdir Sample.DAL/Mongo/Connections \\\\\\n&& mkdir Sample.DAL/Repository/Managers && mkdir Sample.DAL/Repository/IServices\\n```\\n\\n### MongoDB, Conexi\xf3n e Interfaz\\n\\nEmpezamos por la configuraci\xf3n, el par de archivos `IMongoSettings.cs` y `MongoSettings.cs` nos ayudar\xe1 a contener el nombre de la base de datos y la cadena de conexi\xf3n.\\n\\n```csharp title=\\"Sample.DAL/Mongo/Connections/IMongoSettings.cs\\"\\nnamespace Sample.DAL.Mongo.Connections\\n{\\n    public interface IMongoSettings\\n    {\\n        public string DatabaseName { get; set; }\\n        public string ConnectionString { get; set; }\\n    }\\n}\\n```\\n\\n```csharp title=\\"Sample.DAL/Mongo/Connections/MongoSettings.cs\\"\\nnamespace Sample.DAL.Mongo.Connections\\n{\\n    public class MongoSettings : IMongoSettings\\n    {\\n        public string DatabaseName { get; set; }\\n        public string ConnectionString { get; set; }\\n    }\\n}\\n```\\n\\nConforme la base de datos crezca, cada colecci\xf3n estar\xe1 formada de propiedades con un significado espec\xedfico. Es muy importante mantener un modelo de cada colecci\xf3n en la base datos. En C#, esto lo lograremos creando una clase que refleje los miembros de cada colecci\xf3n y nos permita manipular estos datos de manera sencilla.\\n\\nA pesar de que estos modelos pueden variar much\xedsimo uno del otro, con MongoDB tenemos la certeza de que siempre existir\xe1 una propiedad `_id` en cada colecci\xf3n. Propia de c\xf3mo MongoDB organiza los datos. Es por esto que el siguiente paso en el desarrollo de la DAL es crear un _tipo de dato_ que asuma la existencia de esta propiedad y nos de la pauta de identificar un modelo de cualquier otro tipo de dato.\\n\\n```csharp title=\\"Sample.DAL/Entidades/IDocument.cs\\"\\nusing System;\\nusing MongoDB.Bson;\\nusing MongoDB.Bson.Serialization.Attributes;\\n\\nnamespace Sample.DAL.Entidades\\n{\\n    public interface IDocument\\n    {\\n        [BsonId]\\n        [BsonRepresentation(BsonType.String)]\\n        public ObjectId Id { get; set; }\\n\\n        public DateTimeOffset CreatedOn { get; }\\n    }\\n}\\n```\\n\\n```csharp title=\\"Sample.DAL/Entidades/Document.cs\\"\\nusing System;\\nusing MongoDB.Bson;\\n\\nnamespace Sample.DAL.Entidades\\n{\\n    public abstract class Document : IDocument \\n    {\\n        public ObjectId Id { get; set; }\\n\\n        public DateTimeOffset CreatedOn => Id.CreationTime.ToLocalTime();\\n    }\\n}\\n```\\n\\nUna pieza cr\xedtica del patr\xf3n de repositorio es el poder definir una plantilla de los m\xe9todos y propiedades que ser\xe1n necesarios para poder consultar o persistir datos en cada colecci\xf3n de MongoDB. Para eso, definimos la interfaz `IMongoRepository<TDocument>`. En ella, daremos forma a nuestro repositorio de datos.\\n\\n```csharp title=\\"Sample.DAL/Mongo/Connections/IMongoRepository.cs\\"\\nusing System;\\nusing System.Collections.Generic;\\nusing System.Linq;\\nusing System.Linq.Expressions;\\nusing System.Threading.Tasks;\\n\\nusing Sample.DAL.Entidades;\\n\\nnamespace Sample.DAL.Mongo.Connections\\n{\\n    public interface IMongoRepository<TDocument> where TDocument : IDocument\\n    {\\n        // highlight-start\\n        IQueryable<TDocument> AsQueryable();\\n\\n        IEnumerable<TDocument> FilterBy(\\n            Expression<Func<TDocument, bool>> filterExpression);\\n\\n        IEnumerable<TProjected> FilterBy<TProjected>(\\n            Expression<Func<TDocument, bool>> filterExpression,\\n            Expression<Func<TDocument, TProjected>> projectionExpression);\\n\\n        TDocument FindOne(Expression<Func<TDocument, bool>> filterExpression);\\n\\n        Task<TDocument> FindOneAsync(Expression<Func<TDocument, bool>> filterExpression);\\n\\n        TDocument FindById(string id);\\n\\n        Task<TDocument> FindByIdAsync(string id);\\n        \\n        IEnumerable<TDocument> Find();\\n\\n        Task<IEnumerable<TDocument>> FindAsync();\\n\\n        void InsertOne(TDocument document);\\n\\n        Task InsertOneAsync(TDocument document);\\n\\n        void InsertMany(ICollection<TDocument> documents);\\n\\n        Task InsertManyAsync(ICollection<TDocument> documents);\\n\\n        void ReplaceOne(TDocument document);\\n\\n        Task ReplaceOneAsync(TDocument document);\\n\\n        void DeleteOne(Expression<Func<TDocument, bool>> filterExpression);\\n\\n        Task DeleteOneAsync(Expression<Func<TDocument, bool>> filterExpression);\\n\\n        void DeleteById(string id);\\n\\n        Task DeleteByIdAsync(string id);\\n\\n        void DeleteMany(Expression<Func<TDocument, bool>> filterExpression);\\n\\n        Task DeleteManyAsync(Expression<Func<TDocument, bool>> filterExpression);\\n        // highlight-end\\n    }\\n}\\n```\\n\\nAntes de implementar la plantilla, crearemos un atributo que nos permitir\xe1 definir el nombre de la colecci\xf3n para nuestro repositorio.\\n\\n```csharp\\nusing System;\\n\\nnamespace Sample.DAL.Mongo.Connections\\n{\\n    [AttributeUsage(AttributeTargets.Class, Inherited = false)]\\n    public class BsonCollectionAttribute : Attribute\\n    {\\n        public string CollectionName { get; }\\n\\n        public BsonCollectionAttribute(string collectionName)\\n        {\\n            this.CollectionName = collectionName;\\n        }\\n    }\\n}\\n```\\n\\nYa que tenemos este atributo y la plantilla, es hora de implementarla. Vamos a empezar por el `constructor` que es d\xf3nde configuraremos la conexi\xf3n a la base de datos.\\n\\n```csharp title=\\"Sample.DAL/Mongo/Connections/MongoRepository.cs\\"\\nusing System;\\nusing System.Collections.Generic;\\nusing System.Linq;\\nusing System.Linq.Expressions;\\nusing System.Threading.Tasks;\\nusing Sample.DAL.Mongo.Settings;\\n\\nusing Identity.Entities.Utils.Attributes;\\nusing MongoDB.Bson;\\nusing MongoDB.Bson.Serialization.Conventions;\\nusing MongoDB.Driver;\\n\\nnamespace Sample.DAL.Mongo.Connections\\n{\\n    public class MongoRepository<TDocument> : IMongoRepository<TDocument> where TDocument : IDocument\\n    {\\n        // highlight-start\\n        private readonly IMongoCollection<TDocument> _collection;\\n\\n        /* \\n         * Setups connection to MongoDB\\n         *\\n         **/\\n        public MongoRepository(IMongoSettings settings)\\n        {\\n            // Aplica la nomenclatura `camelCase` al momento de parsear el Modelo\\n            ConventionRegistry.Register(\\"camelCase\\", new ConventionPack {new CamelCaseElementNameConvention()}, t => true);\\n            \\n            // Configura un MongoClient y la conexi\xf3n a la base de datos\\n            var client = new MongoClient(settings.ConnectionString);  // mongodb://mariomenjr:mariomenjr@localhost:27017/sample\\n            var database = client.GetDatabase(settings.DatabaseName); // sample\\n            \\n            // Configura el manejador de la colecci\xf3n\\n            var collectionName = this.GetCollectionName(typeof(TDocument));\\n            this._collection = database.GetCollection<TDocument>(collectionName);\\n        }\\n\\n        /* \\n         * Gets the collection name from a Model\\n         *\\n         **/\\n        private protected string GetCollectionName(Type documentType)\\n        {\\n            return ((BsonCollectionAttribute) documentType.GetCustomAttributes(\\n                    typeof(BsonCollectionAttribute),\\n                    true)\\n                .FirstOrDefault())?.CollectionName;\\n        }\\n        // highlight-end\\n        // ...\\n    }\\n}\\n```\\n\\nUna vez tenemos la conexi\xf3n configurada, es hora de cubrir los m\xe9todos de interacci\xf3n con la base de datos. Nos referimos al CRUD. Crear, leer, actualizar y eliminar, por sus siglas en ingl\xe9s.\\n\\n```csharp title=\\"Sample.DAL/Mongo/Connections/MongoRepository.cs\\"\\n        // ...\\n        // highlight-start\\n        public virtual IQueryable<TDocument> AsQueryable()\\n        {\\n            return _collection.AsQueryable();\\n        }\\n\\n        public virtual IEnumerable<TDocument> FilterBy(\\n            Expression<Func<TDocument, bool>> filterExpression)\\n        {\\n            return _collection.Find(filterExpression).ToEnumerable();\\n        }\\n\\n        public virtual IEnumerable<TProjected> FilterBy<TProjected>(\\n            Expression<Func<TDocument, bool>> filterExpression,\\n            Expression<Func<TDocument, TProjected>> projectionExpression)\\n        {\\n            return _collection.Find(filterExpression).Project(projectionExpression).ToEnumerable();\\n        }\\n\\n        public virtual TDocument FindOne(Expression<Func<TDocument, bool>> filterExpression)\\n        {\\n            return _collection.Find(filterExpression).FirstOrDefault();\\n        }\\n\\n        public virtual Task<TDocument> FindOneAsync(Expression<Func<TDocument, bool>> filterExpression)\\n        {\\n            return Task.Run(() => _collection.Find(filterExpression).FirstOrDefaultAsync());\\n        }\\n\\n        public virtual TDocument FindById(string id)\\n        {\\n            var objectId = new ObjectId(id);\\n            var filter = Builders<TDocument>.Filter.Eq(doc => doc.Id, objectId);\\n            return _collection.Find(filter).SingleOrDefault();\\n        }\\n\\n        public virtual Task<TDocument> FindByIdAsync(string id)\\n        {\\n            return Task.Run(() =>\\n            {\\n                var objectId = new ObjectId(id);\\n                var filter = Builders<TDocument>.Filter.Eq(doc => doc.Id, objectId);\\n                return _collection.Find(filter).SingleOrDefaultAsync();\\n            });\\n        }\\n\\n        public virtual IEnumerable<TDocument> Find()\\n        {\\n            return _collection.Find(Builders<TDocument>.Filter.Empty).ToList();\\n        }\\n\\n        public virtual Task<IEnumerable<TDocument>> FindAsync()\\n        {\\n            return Task.Run(() =>\\n            {\\n                return _collection.Find(Builders<TDocument>.Filter.Empty).ToListAsync().ContinueWith(task => task.Result.AsEnumerable());\\n            });\\n        }\\n\\n        public virtual void InsertOne(TDocument document)\\n        {\\n            _collection.InsertOne(document);\\n        }\\n\\n        public virtual Task InsertOneAsync(TDocument document)\\n        {\\n            return Task.Run(() => _collection.InsertOneAsync(document));\\n        }\\n\\n        public void InsertMany(ICollection<TDocument> documents)\\n        {\\n            _collection.InsertMany(documents);\\n        }\\n\\n        public virtual async Task InsertManyAsync(ICollection<TDocument> documents)\\n        {\\n            await _collection.InsertManyAsync(documents);\\n        }\\n\\n        public void ReplaceOne(TDocument document)\\n        {\\n            var filter = Builders<TDocument>.Filter.Eq(doc => doc.Id, document.Id);\\n            _collection.FindOneAndReplace(filter, document);\\n        }\\n\\n        public virtual async Task ReplaceOneAsync(TDocument document)\\n        {\\n            var filter = Builders<TDocument>.Filter.Eq(doc => doc.Id, document.Id);\\n            await _collection.FindOneAndReplaceAsync(filter, document);\\n        }\\n\\n        public void DeleteOne(Expression<Func<TDocument, bool>> filterExpression)\\n        {\\n            _collection.FindOneAndDelete(filterExpression);\\n        }\\n\\n        public Task DeleteOneAsync(Expression<Func<TDocument, bool>> filterExpression)\\n        {\\n            return Task.Run(() => _collection.FindOneAndDeleteAsync(filterExpression));\\n        }\\n\\n        public void DeleteById(string id)\\n        {\\n            var objectId = new ObjectId(id);\\n            var filter = Builders<TDocument>.Filter.Eq(doc => doc.Id, objectId);\\n            _collection.FindOneAndDelete(filter);\\n        }\\n\\n        public Task DeleteByIdAsync(string id)\\n        {\\n            return Task.Run(() =>\\n            {\\n                var objectId = new ObjectId(id);\\n                var filter = Builders<TDocument>.Filter.Eq(doc => doc.Id, objectId);\\n                _collection.FindOneAndDeleteAsync(filter);\\n            });\\n        }\\n\\n        public void DeleteMany(Expression<Func<TDocument, bool>> filterExpression)\\n        {\\n            _collection.DeleteMany(filterExpression);\\n        }\\n\\n        public Task DeleteManyAsync(Expression<Func<TDocument, bool>> filterExpression)\\n        {\\n            return Task.Run(() => _collection.DeleteManyAsync(filterExpression));\\n        }\\n        // highlight-end\\n    }\\n}\\n```\\n\\nCon esto, tenemos listo el esqueleto de nuestro repositorio de datos. El siguiente paso es aplicarlo a cada colecci\xf3n.\\n\\n### Entidades\\n\\nPara poder crear un repositorio, necesitamos los modelos. En nuestro caso, solo tenemos una colecci\xf3n por lo qu\xe9 solo crearemos un modelo.\\n\\n```csharp title=\\"Sample.DAL/Entidades/User.cs\\"\\nusing Sample.DAL.Mongo.Connections;\\n\\nnamespace Sample.DAL.Entidades\\n{\\n    [BsonCollection(\\"users\\")]\\n    public partial class User : Document\\n    {\\n        public string Username { get; set; }\\n    }\\n}\\n```\\n\\n### IService y Manager\\n\\nPara terminar de configurar nuestro repositorio basta con aplicar lo qu\xe9 ya escribimos en el archivo `Sample.DAL/Mongo/Connections/MongoRepository.cs` a cada colecci\xf3n. Es aqu\xed d\xf3nde definiremos el c\xf3mo accederemos o modificaremos la base de datos. C\xf3mo buena pr\xe1ctica, crearemos para cada colecci\xf3n una plantilla y una implementaci\xf3n, o en otras palabras un `IService` y un `Manager`.\\n\\nEn nuestra base de datos de MongoDB solo tenemos una colecci\xf3n, por lo qu\xe9 ser\xe1 muy sencillo implementar este par.\\n\\n```csharp title=\\"Sample.DAL/Repository/IServices/IUserService.cs\\"\\nusing Sample.DAL.Entidades;\\nusing Sample.DAL.Mongo.Connections;\\n\\nnamespace Sample.DAL.Repository.IServices\\n{\\n    public interface IUserService : IMongoRepository<User>\\n    {}\\n}\\n```\\n\\n```csharp title=\\"Sample.DAL/Repository/Managers/UsersManager.cs\\"\\nusing Sample.DAL.Entidades;\\nusing Sample.DAL.Mongo.Connections;\\nusing Sample.DAL.Repository.IServices;\\n\\nnamespace Sample.DAL.Repository.Managers\\n{\\n    public class UserManager : MongoRepository<User>, IUserService\\n    {\\n        public UserManager(IMongoSettings settings) : base(settings)\\n        {}\\n    }\\n}\\n```\\n\\n## Dependency Injection\\n\\nAntes de configurar la inyecci\xf3n de dependencias tenemos que instalar un paquete de extensiones para la configuraci\xf3n. El paquete se encuentra en el repositorio de NuGet. Revisa cu\xe1l es la \xfaltima versi\xf3n disponible en este [enlace](https://www.nuget.org/packages/Microsoft.Extensions.Options.ConfigurationExtensions/) y ejecuta el siguiente comando. \\n\\n```bash\\ndotnet add Sample.DAL/Sample.DAL.csproj package Microsoft.Extensions.Options.ConfigurationExtensions --version {VERSION}\\n```\\n\\nLleg\xf3 la hora de crear una extensi\xf3n propia de nuestro paquete. Dejaremos toda la complejidad aqu\xed, y en nuestra API simplemente llamaremos a un m\xe9todo.\\n\\n```csharp title=\\"Sample.DAL/Mongo/Extensions/MongoExtension.cs\\"\\nusing Microsoft.Extensions.Configuration;\\nusing Microsoft.Extensions.DependencyInjection;\\nusing Microsoft.Extensions.Options;\\nusing Sample.DAL.Mongo.Connections;\\nusing Sample.DAL.Repository.IServices;\\nusing Sample.DAL.Repository.Managers;\\n\\nnamespace Sample.DAL.Mongo.Extensions\\n{\\n    public static class MongoExtension\\n    {\\n        public static IServiceCollection AddMongoDb(this IServiceCollection services, IConfigurationSection mongoSettings)\\n        {\\n            services.Configure<MongoSettings>(mongoSettings);\\n            \\n            services.AddSingleton<IMongoSettings>(srvProvider =>\\n                srvProvider.GetRequiredService<IOptions<MongoSettings>>().Value);\\n            \\n            services.AddTransient<IUserService, UserManager>();\\n\\n            return services;\\n        }\\n    }\\n}\\n```\\n\\nY en nuestra API, configuramos lo siguiente:\\n\\n```csharp title=\\"Sample.API/Startup.cs\\"\\n    // ...\\n    public void ConfigureServices(IServiceCollection services)\\n    {\\n        // highlight-start\\n        services.AddMongoDb(Configuration.GetSection(\\"MongoSettings\\"));\\n        // highlight-end\\n        // ...\\n```\\n\\nPara que lo anterior tenga sentido, agregamos esto al archivo `appsettings.json`.\\n\\n```json\\n  // ...\\n  // highlight-start\\n  \\"MongoSettings\\": {\\n    \\"ConnectionString\\": \\"mongodb://mariomenjr:mariomenjr@localhost:27017/sample\\",\\n    \\"DatabaseName\\": \\"sample\\"\\n  }\\n  // highlight-end\\n```\\n\\n> Por ning\xfan motivo debemos compartir estas credenciales en alg\xfan controlador de version p\xfablico. Para un proyecto, recomiendo leer sobre [`secrets.json`](https://docs.microsoft.com/en-us/aspnet/core/security/app-secrets?view=aspnetcore-5.0)\\n\\nPor \xfaltimo, inyectamos la dependencia en el API.\\n\\n```csharp title=\\"Sample.API/Controllers/ApiController.cs\\"\\n// ...\\nnamespace Sample.API.Controllers\\n{\\n    [Route(\\"[controller]\\")]\\n    [ApiController]\\n    public class ApiController : ControllerBase\\n    {\\n        // highlight-start\\n        private readonly IUserService _userService;\\n        \\n        public ApiController(IUserService userService)\\n        {\\n            this._userService = userService;\\n        }\\n        // highlight-end\\n        // ...\\n```\\n\\n## CRUD\\n\\nUna vez hemos implementado el patr\xf3n de repositorio para acceder y persistir datos, un CRUD es tan sencillo como lo siguiente.\\n\\n```csharp\\n        // ...\\n        // highlight-start\\n        [HttpGet, Route(\\"[action]\\")]\\n        public JsonResult GetUsers()\\n        {\\n            return new JsonResult(this._userService.Find());\\n            // highlight-end\\n\\n            // Este es el c\xf3digo que nos permiti\xf3 consultar la lista de usuario al inicio del Post.\\n            // Ya no lo necesitamos y podemos borrarlo.\\n\\n            var client = new MongoClient(\\"mongodb://mariomenjr:mariomenjr@localhost:27017/sample\\");\\n            var database = client.GetDatabase(\\"sample\\");\\n            \\n            var users = database.GetCollection<object>(\\"users\\");\\n            \\n            return new JsonResult(users.AsQueryable().Select(s => s));\\n            // highlight-start\\n        }\\n\\n        [HttpPost, Route(\\"[action]\\")]\\n        public JsonResult AddUser(string username)\\n        {\\n            var newUser = new User {Username = username};\\n            this._userService.InsertOne(newUser);\\n            \\n            return new JsonResult(newUser);\\n        }\\n        \\n        [HttpPut, Route(\\"[action]\\")]\\n        public JsonResult UpdateUser(string oldUsername, string newUsername)\\n        {\\n            var user = this._userService.FindOne(x => x.Username == oldUsername);\\n            user.Username = newUsername;\\n            \\n            this._userService.ReplaceOne(user);\\n            \\n            return new JsonResult(user);\\n        }\\n        \\n        [HttpDelete, Route(\\"[action]\\")]\\n        public JsonResult DeleteUser(string username)\\n        {\\n            this._userService.DeleteOne(x => x.Username == username);\\n            \\n            return new JsonResult(username);\\n        }\\n        // highlight-end\\n        //...\\n```\\n\\nListo, ya tenemos una interfaz para consultar y persistir datos en la colecci\xf3n _Users_.\\n\\n<figure class=\\"md-captioned-image\\">\\n  <img src={require(\'../static/img/blog/007/007-crud.png\').default} alt=\\"CRUD\\" />\\n  <figcaption>CRUD para colecci\xf3n Users</figcaption>\\n</figure>\\n\\n## Conclusi\xf3n\\n\\nEspero que este post te haya sido de mucha ayuda. Despu\xe9s de implementar el patr\xf3n de repositorio, es muy sencillo escalar cualquier consulta a la base de datos. No necesitamos conocer ning\xfan detalle de conexi\xf3n, ya que eso es manejado propiamente por esta nueva capa.\\n\\nLa ventaja de esto es que si la base de datos sufre alg\xfan cambio, no debemos ir a cada parte de la aplicaci\xf3n para implementarlos. \xdanicamente nuestro paquete DAL sufrir\xe1 los cambios. Reduciendo ambos el tiempo de programaci\xf3n y pruebas.\\n\\n## Referencias\\n\\n- [MongoDB C#/.NET Driver](https://docs.mongodb.com/drivers/csharp/)\\n- [The WHY Series: Why should you use the repository pattern?](https://makingloops.com/why-should-you-use-the-repository-pattern/)\\n- [Quick Start: C# and MongoDB - Read Operations](https://www.mongodb.com/blog/post/quick-start-c-and-mongodb--read-operations)\\n- [Tutorial: Create a .NET class library using Visual Studio Code](https://docs.microsoft.com/en-us/dotnet/core/tutorials/library-with-visual-studio-code)"},{"id":"2021/07/29/autenticacion-como-servicio-con-identity-server-4","metadata":{"permalink":"/blog/2021/07/29/autenticacion-como-servicio-con-identity-server-4","editUrl":"https://github.com/mariomenjr/mariomenjr/edit/main/blog/2021-07-29_autenticacion-como-servicio-con-identity-server-4.md","source":"@site/blog/2021-07-29_autenticacion-como-servicio-con-identity-server-4.md","title":"Autenticaci\xf3n como servicio con Identity Server 4","description":"En esta entrada, hablaremos de quiz\xe1 la m\xe1s conocida implementaci\xf3n de los protocolos OpenID Connect y OAuth 2.0 para .NET Core: Identity Server 4. Te mostrar\xe9 c\xf3mo implementarlo y consumir sus servicios de autorizaci\xf3n/autenticaci\xf3n para asegurar una SPA junto con una API en NodeJS.","date":"2021-07-29T23:31:18.000Z","formattedDate":"29 de julio de 2021","tags":[{"label":"oauth2.0","permalink":"/blog/tags/oauth-2-0"},{"label":"openid","permalink":"/blog/tags/openid"},{"label":"csharp","permalink":"/blog/tags/csharp"},{"label":"identity server","permalink":"/blog/tags/identity-server"},{"label":"nodejs","permalink":"/blog/tags/nodejs"}],"readingTime":17.3,"truncated":true,"authors":[{"name":"Mario Menj\xedvar","title":"Software Engineer","url":"https://github.com/mariomenjr","imageURL":"https://avatars3.githubusercontent.com/u/1946936?s=460&v=4"}],"frontMatter":{"slug":"2021/07/29/autenticacion-como-servicio-con-identity-server-4","title":"Autenticaci\xf3n como servicio con Identity Server 4","author":"Mario Menj\xedvar","author_title":"Software Engineer","author_url":"https://github.com/mariomenjr","author_image_url":"https://avatars3.githubusercontent.com/u/1946936?s=460&v=4","tags":["oauth2.0","openid","csharp","identity server","nodejs"],"keywords":["oauth 2.0","validar bearer token nodejs","openid","espa\xf1ol","que es identity server","como proteger api con identity server","como proteger api jwt","como proteger api nodejs","implementar autenticacion jwt react","que es bearer token","autenticando api rest con nodejS y jwt","implementar JSON web token","como implementar autenticacion basada en token","autenticacion y autorizacion","que es jwks"],"date":"2021-07-29T23:31:18.000Z","description":"En esta entrada, hablaremos de quiz\xe1 la m\xe1s conocida implementaci\xf3n de los protocolos OpenID Connect y OAuth 2.0 para .NET Core: Identity Server 4. Te mostrar\xe9 c\xf3mo implementarlo y consumir sus servicios de autorizaci\xf3n/autenticaci\xf3n para asegurar una SPA junto con una API en NodeJS.","image":"https://images.unsplash.com/photo-1532604146921-0e8bd9ab0891?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=256&q=80"},"prevItem":{"title":"C\xf3mo consultar y persistir datos en MongoDB con .NET","permalink":"/blog/2021/08/18/como-consultar-y-persistir-datos-en-mongodb-con--net"},"nextItem":{"title":"C\xf3mo trabajar con React Context y Hooks","permalink":"/blog/2021/04/04/como-trabajar-con-react-context-y-hooks"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\nAntes de comenzar debemos hacer una distinci\xf3n muy importante. Autenticar y autorizar son dos aspectos completamente independientes pero centrales a la seguridad. Aut\xe9nticar se refiere a confirmar que los usuarios son quienes dicen ser. Autorizar, por otro lado, es dar acceso a los recursos a esos usuarios.\\n\\nEn esta entrada, hablaremos de quiz\xe1 la m\xe1s conocida implementaci\xf3n de los protocolos OpenID Connect y OAuth 2.0 para .NET Core: Identity Server 4. Te mostrar\xe9 c\xf3mo implementarlo y consumir sus servicios de autorizaci\xf3n/autenticaci\xf3n para asegurar una SPA junto con una API en NodeJS.\\n\\n\x3c!--truncate--\x3e\\n\\n## OAuth 2.0 + OpenID\\n\\nLo m\xe1s seguro es que en alg\xfan momento hayas visto una p\xe1gina como esta:\\n\\n<figure class=\\"md-captioned-image\\">\\n  <img src={require(\'../static/img/blog/2021-07-29/001-google-oauth.png\').default} alt=\\"Google OAuth Sample\\" />\\n  <figcaption>Este es un ejemplo de una implementaci\xf3n de OAuth y OpenID que tiene como objetivo permitir que Medium pueda utilizar tu cuenta de Google para loguearte. Sin embargo, para lograrlo, Medium debe pedirte permiso para acceder a ciertos datos de tu perfil de Google con los cu\xe1les puede identificar tu cuenta.</figcaption>\\n</figure>\\n\\nOAuth 2.0 y OpenID conforman el est\xe1ndar de la industria para llevar a cabo este importante proceso de aut\xe9nticar y autorizar usuarios. M\xe1s que aplicaciones o servicios que puedan ser instalados, ambos son est\xe1ndares abiertos de autorizaci\xf3n y autenticaci\xf3n que pueden ser implementados por cualquiera.\\n\\n## Identity Server 4\\n\\n_In a nutshell_, Identity Server 4 es un framework de OAuth 2.0 y OpenID para ASP.NET Core. Est\xe1 certificado por la [OpenID Foundation](https://openid.net/). Es quiz\xe1 la m\xe1s conocida implementaci\xf3n de OAuth 2.0 y OpenID para .NET Core.\\n\\nPuedes probar un demo online con Client Credentials ahora mismo en [identity.mariomenjr.com](https://identity.mariomenjr.com). Para obtener un `bearer token`ejecuta el siguiente comando en una l\xednea de comandos, por ejemplo.\\n\\n<Tabs\\n  groupId=\\"demos-mariomenjr-bearer-token\\"\\n  defaultValue=\\"curl\\"\\n  values={[\\n    {label: \'cURL\', value: \'curl\'},\\n    {label: \'wget\', value: \'wget\'},\\n  ]\\n}>\\n<TabItem value=\\"curl\\">\\n\\n```bash\\ncurl --location --request POST \'https://identity.mariomenjr.com:443/connect/token\' \\\\\\n--header \'Content-Type: application/x-www-form-urlencoded\' \\\\\\n--data-urlencode \'client_id=test.client\' \\\\\\n--data-urlencode \'client_secret=test.secret\' \\\\\\n--data-urlencode \'scope=test.scope\' \\\\\\n--data-urlencode \'grant_type=client_credentials\'\\n```\\n\\n</TabItem>\\n<TabItem value=\\"wget\\">\\n\\n```bash\\nwget --no-check-certificate --quiet \\\\\\n  --method POST \\\\\\n  --timeout=0 \\\\\\n  --header \'Content-Type: application/x-www-form-urlencoded\' \\\\\\n  --body-data \'client_id=test.client&client_secret=test.secret&scope=test.scope&grant_type=client_credentials\' \\\\\\n   \'https://identity.mariomenjr.com:443/connect/token\'\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\nEn cualquier caso, obtendr\xe1s un JSON como respuesta:\\n\\n```json\\n{\\"access_token\\":\\"eyJhbGciOiJSUzI1NiIsImtpZCI6IkRCRkM5QUY5QURCMTU2REVDMDI5REQ0MjdFREVDRTNFIiwidHlwIjoiYXQrand0In0.eyJuYmYiOjE2MjY1NzcxNTEsImV4cCI6MTYyNjU4MDc1MSwiaXNzIjoiaHR0cHM6Ly9pZGVudGl0eS5tYXJpb21lbmpyLmNvbSIsImF1ZCI6WyJjb250aW51ZWUuYXBpIiwidGVzdC5hcGkiXSwiY2xpZW50X2lkIjoidGVzdC5jbGllbnQiLCJqdGkiOiIwOTRBQjkwNEEyQjQzN0ZDOUEzQjc4Q0ZCRjM2M0UyNCIsImlhdCI6MTYyNjU3NzE1MSwic2NvcGUiOlsidGVzdC5zY29wZSJdfQ.P9Ku7YkVL-SymVYpqUj9xnAK8Y_1msKHqAt42BbNdebLb_QWHGtIpgbgaMZpOh0j5-Kl4iNPeSYI0920LoFj__GymaGvqzFnJ1tuEJ-cafJUenmbIVadx6-UsfR8o91oznuMtmoWXeAWieX5cEt-f3Qr4IKJ2Jr5_-r99haN1m3yuE8aAJncz9O-eLQ0hmS8EjQQ62PYQbThdmzmtlYm5A33IYKxJsN8HjRsYTDC-6XvEKkBfT8CqEEMj06lBpfT67pi0iU7WmVCqaSl60Vk828b74WEj4c7P-6rRP7kCoqkfTzr_2D0OtoOxzCye4GswAaatSAdVDQbJ9xkfc4_kw\\",\\"expires_in\\":3600,\\"token_type\\":\\"Bearer\\",\\"scope\\":\\"test.scope\\"}\\n```\\n\\n### Instalaci\xf3n \\n\\nPara empezar a trabajar con este framework, debemos instalarlo. Esto lo podemos hacer a trav\xe9s de Visual Studio (Windows o Mac) \xf3 con el comando **dotnet** en la terminal (Linux).\\n\\nUna forma f\xe1cil de empezar es instalando localmente las distintas plantillas provista por sus creadores.\\n\\n\x3c!-- TODO: Include Tab for Visual Studio --\x3e\\n\\n<Tabs\\n  groupId=\\"operating-systems\\"\\n  defaultValue=\\"cli\\"\\n  values={[\\n    {label: \'Command Line Interface\', value: \'cli\'},\\n  ]\\n}>\\n<TabItem value=\\"cli\\">\\n\\n```bash \\ndotnet new -i IdentityServer4.Templates\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\nUna vez instaladas, escogeremos la plantilla con `stores` en memoria y usuarios de prueba: `is4inmem`. \\n\\n<Tabs\\n  groupId=\\"operating-systems\\"\\n  defaultValue=\\"cli\\"\\n  values={[\\n    {label: \'Command Line Interface\', value: \'cli\'},\\n  ]\\n}>\\n<TabItem value=\\"cli\\">\\n\\nCreamos un nuevo folder para nuestro proyecto.\\n\\n```bash \\nmd Identity && cd Identity\\n```\\n\\nCreamos un nuevo proyecto apartir de una de la plantilla con `stores` en memoria y usuarios de prueba.\\n\\n```bash\\ndotnet new is4inmem -n Identity.API\\n```\\n\\nEl cu\xe1l mostrar\xe1 el siguiente mensaje.\\n\\n> The template \\"IdentityServer4 with In-Memory Stores and Test Users\\" was created successfully.\\n\\n</TabItem>\\n</Tabs>\\n\\nFinalmente, crearemos una soluci\xf3n para nuestra plantilla. Para eso necesitamos ejecutar los siguientes comandos.\\n\\n<Tabs\\n  groupId=\\"operating-systems\\"\\n  defaultValue=\\"cli\\"\\n  values={[\\n    {label: \'Command Line Interface\', value: \'cli\'},\\n  ]\\n}>\\n<TabItem value=\\"cli\\">\\n\\nCreamos la soluci\xf3n.\\n\\n```bash\\ndotnet new sln -n Identity\\n```\\n\\nPara luego a\xf1adir nuestro proyecto a esta soluci\xf3n.\\n\\n```bash\\ndotnet sln add Identity.API/Identity.API.csproj\\n```\\n\\nAs\xed, recibiremos el siguiente mensaje.\\n\\n> Project `Identity.API/Identity.API.csproj` added to the solution.\\n\\nPor \xfaltimo, ejecutamos el comando de restauraci\xf3n. Esto instalar\xe1 cualquier dependencia faltante.\\n\\n```bash\\ndotnet restore\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n### dotnet --version\\n\\nPor defecto, la version de .NET Core para la que est\xe1n configuradas las plantillas es la 3.1. Sin embargo, la \xfaltima versi\xf3n de .NET al d\xeda de hoy es la 5 y es muy probable que sea la que tengas instalada. Para no tener ning\xfan problema al ejecutar el proyecto, basta con cambiar la versi\xf3n a la que apunta.\\n\\n```xml\\n\x3c!-- Identity.API/Identity.API.csproj --\x3e\\n\\n<Project Sdk=\\"Microsoft.NET.Sdk.Web\\">\\n\\n  <PropertyGroup>\\n    // highlight-start\\n    \x3c!-- <TargetFramework>netcoreapp3.1</TargetFramework> --\x3e\\n    <TargetFramework>net5.0</TargetFramework>\\n    // highlight-end\\n  </PropertyGroup>\\n  \\n  <ItemGroup>\\n    <PackageReference Include=\\"IdentityServer4\\" Version=\\"4.0.0\\" />\\n\\n    <PackageReference Include=\\"Serilog.AspNetCore\\" Version=\\"3.2.0\\" />\\n  </ItemGroup>\\n</Project>\\n```\\n\\nY ya lo tienes. Si ejecutas el proyecto ya deber\xedas ver el [Discovery Document](https://localhost:5001/.well-known/openid-configuration).\\n\\n<Tabs\\n  groupId=\\"operating-systems\\"\\n  defaultValue=\\"cli\\"\\n  values={[\\n    {label: \'Command Line Interface\', value: \'cli\'},\\n  ]\\n}>\\n<TabItem value=\\"cli\\">\\n\\n```bash \\ndotnet run --project Identity.API\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n### Discovery Document\\n\\nEl _Discovery Document_ (o documento de descubrimiento, en espa\xf1ol) no es m\xe1s que un documento JSON que contiene la informaci\xf3n sobre los _endpoints_, material clave y caracter\xedsticas de tu Identity Server.\\n\\nTambi\xe9n es conocido como el _well-known document_. Este documento permite a los clientes del servicio configurarse a s\xed mismos para poder autorizar/aut\xe9nticar usuarios.\\n\\n### Scopes + Clients\\n\\nUn `scope` es un recurso en tu sistema que quieres proteger. Con Identity Server 4, podemos definir recursos de varias maneras. Desde c\xf3digo hasta bases de datos. En este ejemplo, los definiremos por c\xf3digo.\\n\\n```csharp title=\\"Identity.API/Config.cs\\"\\n// ...\\npublic static IEnumerable<ApiScope> ApiScopes =>\\n    new ApiScope[]\\n    {\\n        // highlight-start \\n        new ApiScope(\\"test-scope\\", \\"Test Scope\\")\\n        // highlight-end\\n    };\\n// ...\\n```\\n\\nLo siguiente en la lista es registrar una aplicaci\xf3n cliente que consuma nuestro servicio de autenticaci\xf3n.\\n\\nHasta este momento, nuestro cliente no necesita ser interactivo para el usuario. Se autenticar\xe1 usando el _Client Credentials Flow_ con Identity Server.\\n\\n```csharp title=\\"Identity.API/Config.cs\\"\\n// ...\\npublic static IEnumerable<Client> Clients =>\\n    new Client[] \\n    { \\n        // highlight-start \\n        new Client\\n        {\\n            ClientId = \\"api-client\\",\\n\\n            // no interactive user, use the clientid/secret for authentication\\n            AllowedGrantTypes = GrantTypes.ClientCredentials,\\n\\n            // secret for authentication\\n            ClientSecrets =\\n            {\\n                new Secret(\\"api-secret\\".Sha256())\\n            },\\n\\n            // scopes that client has access to\\n            AllowedScopes = { \\"test-scope\\" }\\n        }\\n        // highlight-end \\n    };\\n// ...\\n```\\n\\nCon esto, ya podemos conseguir un `bearer token` desde nuestro proyecto.\\n\\n<Tabs\\n  groupId=\\"demos-mariomenjr-bearer-token\\"\\n  defaultValue=\\"curl\\"\\n  values={[\\n    {label: \'cURL\', value: \'curl\'},\\n    {label: \'wget\', value: \'wget\'},\\n  ]\\n}>\\n<TabItem value=\\"curl\\">\\n\\n```\\ncurl --insecure --location --request POST \'https://localhost:5001/connect/token\' \\\\\\n--header \'Content-Type: application/x-www-form-urlencoded\' \\\\\\n--data-urlencode \'client_id=api-client\' \\\\\\n--data-urlencode \'client_secret=api-secret\' \\\\\\n--data-urlencode \'scope=test-scope\' \\\\\\n--data-urlencode \'grant_type=client_credentials\'\\n```\\n\\n</TabItem>\\n<TabItem value=\\"wget\\">\\n\\n```bash\\nwget --no-check-certificate --quiet \\\\\\n  --method POST \\\\\\n  --timeout=0 \\\\\\n  --header \'Content-Type: application/x-www-form-urlencoded\' \\\\\\n  --body-data \'client_id=api-client&client_secret=api-secret&scope=test-scope&grant_type=client_credentials\' \\\\\\n   \'https://localhost:5001/connect/token\'\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n## Asegura el API\\n\\nSi has llegado hasta aqu\xed, \xa1Felicidades! ya tienes un servicio de autenticaci\xf3n funcional. En caso hayas llegado directo hasta aqu\xed, deber\xedas revisar lo de arriba. De todas formas, vamos a empezar lo bueno.\\n\\nEn realidad podr\xedamos usar casi cualquier lenguaje y librer\xeda que nos permita construir APIs. En esta entrada, utilizaremos NodeJS y ExpressJS, ya que son parte de los stacks m\xe1s populares actualmente.\\n\\nSi no tienes nodejs en tu computadora, puedes descargar el instalador desde aqu\xed: https://nodejs.org/en/download/. Si est\xe1s en Linux, y dependiendo del distro, puedes encontrarlo en los repositorios de paquetes como `nodejs`.\\n\\n### ExpressJS\\n\\nVeamos c\xf3mo levantar una API con ExpressJS en menos de 5 minutos.\\n\\nCreamos el folder del nuevo proyecto.\\n\\n```bash\\nmd api-sample && cd api-sample\\n```\\n\\nCreamos un nuevo proyecto con NPM.\\n\\n```bash\\nnpm init -y\\n```\\n\\nInstalamos ExpressJS.\\n\\n```bash\\nnpm install express --save\\n```\\n\\nSolo nos queda crear un archivo `app.js` y hacer unas peque\xf1as modificaciones en el existente `package.json`.\\n\\n```js title=\\"app.js\\"\\nconst express = require(\'express\');\\nconst app = express();\\nconst port = 3005;\\n\\napp.get(\'/\', (req, res) => {\\n  res.send(\'Hello World!\');\\n});\\n\\napp.listen(port, () => {\\n  console.log(`App listening at http://localhost:${port}`);\\n});\\n```\\n\\n```json title=\\"package.json\\"\\n// ...\\n  // highlight-start \\n  // \\"main\\": \\"index.js\\",\\n  \\"main\\": \\"app.js\\",\\n  // highlight-end\\n  \\"scripts\\": {\\n    // highlight-start \\n    // \\"test\\": \\"echo \\\\\\"Error: no test specified\\\\\\" && exit 1\\",\\n    \\"dev\\": \\"node app.js\\"\\n    // highlight-end\\n  },\\n  \\"keywords\\": [],\\n// ...\\n```\\n\\nY ahora podemos arrancar el API.\\n\\n```bash\\nnpm run dev\\n```\\n\\n>  \\\\> api-sample@1.0.0 dev /home/mariomenjr/Samples/api-sample <br />\\n>  \\\\> node app.js\\n>\\n>  App listening at http://localhost:3005\\n\\n### JWKS\\n\\nUn JSON Web Key Set (\xf3 Conjunto de llaves JSON Web, en espa\xf1ol) es un conjunto de llaves que contiene a la llave p\xfablica que debe ser usada para verificar cualquier JSON  Web Token (`JWT`, \xf3 `bearer token`) que fue emitido por un servidor de autorizaci\xf3n y firmado por uno de los algoritmos RSA o ECDSA.\\n\\nEn palabras m\xe1s simples, lo anterior nos dice que una de las formas para verificar que nuestro `bearer token` es leg\xedtimo, y podemos usarlo para autorizar al usuario, es hacer uso de un `JWKS`. Nuestra instalaci\xf3n de Identity Server ya nos provee un endpoint para conseguir uno: [https://localhost:5001/.well-known/openid-configuration/jwks](https://localhost:5001/.well-known/openid-configuration/jwks).\\n\\nPara hacer uso de \xe9l desde nuestra API en nodejs, vamos a instalar los siguientes paquetes:\\n\\n```bash\\nnpm install express-jwt jwks-rsa --save\\n```\\n\\nUna vez instalados, es hora de crear un middleware para ayudarnos a asegurar nuestra API.\\n\\nCreamos el archivo `auth.middleware.js` dentro del folder `src/middlewares`.\\n\\n```bash\\nmd src/middlewares && cd src/middlewares && touch auth.middleware.js\\n```\\n\\nEn este archivo, configuraremos los paquetes `express-jwt` y `jwks-rsa` para obtener una funci\xf3n que nos permita asegurar rutas espec\xedficas.\\n\\n```js title=\\"src/middlewares/auth.middleware.js\\"\\nconst jwt = require(\\"express-jwt\\");\\nconst jwksRsa = require(\\"jwks-rsa\\");\\n\\n// For simplicity, we\'ve hardcoded these values here.\\n// However, you must keep these values a secret. \\n// Do not commit them to Git.\\n// I highly recommend to use the dot-env package.\\nconst IDENTITY_ISSUER = `https://localhost:5001`;\\n\\nconsole.info(`[issuer]: ${IDENTITY_ISSUER}`);\\n\\nconst authorize = jwt({\\n  secret: jwksRsa.expressJwtSecret({\\n    cache: true,\\n    rateLimit: true,\\n    jwksRequestsPerMinute: 5,\\n    jwksUri: `${IDENTITY_ISSUER}/.well-known/openid-configuration/jwks`,\\n  }),\\n  issuer: `${IDENTITY_ISSUER}`,\\n  algorithms: [`RS256`],\\n});\\n\\nmodule.exports = authorize;\\n```\\n\\n```js title=\\"app.js\\"\\nconst express = require(\'express\');\\nconst app = express();\\nconst port = 3005;\\n\\n// highlight-start \\nconst authorize = require(\\"./src/middlewares/auth.middleware\\");\\n// highlight-end\\n\\napp.get(`/`, (req, res) => {\\n  res.send(`Hello World!`);\\n});\\n\\n// highlight-start \\n// To be available by anyone\\napp.get(`/allow-anonymous`, (req, res) => {\\n  res.send(`No token needed to see this message!`);\\n});\\n\\n// To be available only for those with a bearer token\\napp.get(`/authorization-needed`, authorize, (req, res) => {\\n  res.send(`A bearer token was needed to see this message!`);\\n});\\n// highlight-end\\n\\napp.listen(port, () => {\\n  console.log(`App listening at http://localhost:${port}`);\\n})\\n```\\n\\n\xa1Genial! Al ejecutar el proyecto de nuevo y acceder a esos endpoints desde el navegador, veremos que \xfanicamente `/allow-anonymous` nos devuelve el mensaje que hemos escrito mientras que `/authorization-needed` nos devuelve un `UnauthorizedError`.\\n\\n<figure class=\\"md-captioned-image\\">\\n  <img src={require(\'../static/img/blog/2021-07-29/002-api-allow-anonymous.png\').default} alt=\\"Allow Anonymous Endpoint\\" />\\n  <figcaption>http://localhost:3005/allow-anonymous</figcaption>\\n</figure>\\n\\n<figure class=\\"md-captioned-image\\">\\n  <img src={require(\'../static/img/blog/2021-07-29/003-api-authorization-needed.png\').default} alt=\\"Authorization Needed Endpoint\\" />\\n  <figcaption>http://localhost:3005/authorization-needed</figcaption>\\n</figure>\\n\\nAunque hayamos llegado tan lejos, a\xfan nos falta responder a un par de preguntas. Primero, \xbfC\xf3mo hago para hacer llegar el `bearer token` al endpoint `authorization-needed`? y segundo, m\xe1s importante a\xfan, \xbfC\xf3mo obtengo un `bearer token`?\\n\\n## Bearer token\\n\\nEn la secci\xf3n [_Scopes + Clients_](#scopes--clients), te mostr\xe9 como obtener un `bearer token` haciendo uso del _grant_type_ `client_credential`.\\n\\n<Tabs\\n  groupId=\\"demos-mariomenjr-bearer-token\\"\\n  defaultValue=\\"curl\\"\\n  values={[\\n    {label: \'cURL\', value: \'curl\'},\\n    {label: \'wget\', value: \'wget\'},\\n  ]\\n}>\\n<TabItem value=\\"curl\\">\\n\\n```\\ncurl --insecure --location --request POST \'https://localhost:5001/connect/token\' \\\\\\n--header \'Content-Type: application/x-www-form-urlencoded\' \\\\\\n--data-urlencode \'client_id=testClient\' \\\\\\n--data-urlencode \'client_secret=testSecret\' \\\\\\n--data-urlencode \'scope=testApi\' \\\\\\n--data-urlencode \'grant_type=client_credentials\'\\n```\\n\\n</TabItem>\\n<TabItem value=\\"wget\\">\\n\\n```bash\\nwget --no-check-certificate --quiet \\\\\\n  --method POST \\\\\\n  --timeout=0 \\\\\\n  --header \'Content-Type: application/x-www-form-urlencoded\' \\\\\\n  --body-data \'client_id=testClient&client_secret=testSecret&scope=testApi&grant_type=client_credentials\' \\\\\\n   \'https://localhost:5001/connect/token\'\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\nEl _grant_type_ `client_credential` est\xe1 dise\xf1ado para permitir la comunicaci\xf3n de m\xe1quina a m\xe1quina. Es usado cuando aplicaciones requieren de un `access token` pero no hay ninguna intervenci\xf3n del usuario. Por ejemplo, un _cron job_ que ejecuta una API para hacer backups de informaci\xf3n.\\n\\nSin embargo, si quisieramos utilizar nuestro reci\xe9n creado servicio de autorizaci\xf3n con en una aplicaci\xf3n web, tenemos que ponernos creativos. Para esto existe el _Authorization Code Flow con PKCE_.\\n\\n### React App + Authorization Code Flow\\n\\nVamos a crear una Single Page Application usando el famosis\xedmo `creat-react-app`.\\n\\n```bash\\nnpx create-react-app my-app\\n```\\n\\nYa que estamos en la l\xednea de comando, vamos a instalar un paquete que nos permitir\xe1 hacer uso del Identity Server.\\n\\n```bash\\nnpm install oidc-client --save\\n```\\n\\nAhora crearemos dos archivos, un `callback.html` dentro del folder `public` y un `oidcUtils.js` en el folder `src`.\\n\\n```html title=\\"public/callback.html\\"\\n<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\"utf-8\\" />\\n    <title></title>\\n</head>\\n<body>\\n    <script src=\\"https://cdnjs.cloudflare.com/ajax/libs/oidc-client/1.11.5/oidc-client.min.js\\"><\/script>\\n    <script>\\n        new Oidc.UserManager({response_mode:\\"query\\"}).signinRedirectCallback().then(function() {\\n            window.location = \\"index.html\\";\\n        }).catch(function(e) {\\n            console.error(e);\\n        });\\n    <\/script>\\n</body>\\n</html>\\n```\\n\\n```js title=\\"src/oidcUtils.js\\"\\nimport Oidc from \\"oidc-client\\";\\n\\nexport const oidcManager = new Oidc.UserManager({\\n  authority: \\"http://localhost:5000\\",\\n  client_id: \\"js\\",\\n  redirect_uri: \\"http://localhost:3001/callback.html\\",\\n  response_type: \\"code\\",\\n  scope: \\"openid profile test-scope\\",\\n  post_logout_redirect_uri: \\"http://localhost:3001/index.html\\",\\n});\\n\\n// Redirecciona a la aplicaci\xf3n una vez aut\xe9nticado\\nexport function signinRedirectCallback() {\\n  new Oidc.UserManager({ response_mode: \\"query\\" })\\n    .signinRedirectCallback()\\n    .then(function () {\\n      window.location.reload();\\n    })\\n    .catch(function (e) {\\n      console.error(e);\\n    });\\n}\\n\\n// Redirecciona al IdentityServer para autenticarnos\\nexport function login() {\\n  oidcManager.signinRedirect();\\n}\\n\\nexport function callApi() {\\n  oidcManager.getUser().then(function (user) {\\n    var url = \\"http://localhost:3005/authorization-needed\\";\\n\\n    var xhr = new XMLHttpRequest();\\n    xhr.open(\\"GET\\", url);\\n    xhr.onload = function () {\\n      console.debug({ xhr });\\n      log(xhr.status, xhr.responseText);\\n    };\\n    xhr.setRequestHeader(\\n      \\"Authorization\\",\\n      !!user ? \\"Bearer \\" + user.access_token : ``\\n    );\\n    xhr.send();\\n  });\\n}\\n\\n// Invalida nuestro token\\nexport function logout() {\\n  oidcManager.signoutRedirect();\\n}\\n\\nexport function log() {\\n  document.getElementById(\\"results\\").innerText = \\"\\";\\n\\n  Array.prototype.forEach.call(arguments, function (msg) {\\n    if (msg instanceof Error) {\\n      msg = \\"Error: \\" + msg.message;\\n    } else if (typeof msg !== \\"string\\") {\\n      msg = JSON.stringify(msg, null, 2);\\n    }\\n    document.getElementById(\\"results\\").innerHTML += msg + \\"\\\\r\\\\n\\";\\n  });\\n}\\n```\\n\\nCon esto, reemplaza el contenido de `App.js` por lo siguiente.\\n\\n```jsx title=\\"App.js\\"\\nimport React from \\"react\\";\\nimport \'./App.css\';\\n\\nimport { oidcManager, signinRedirectCallback, log, login, logout } from \\"./oidcUtils\\";\\n\\nfunction App() {\\n  const [isLogged, isLoggedSet] = React.useState(false);\\n\\n  React.useEffect(() => {\\n    if (window.location.pathname === `/callback.html`) signinRedirectCallback();\\n    else\\n      oidcManager.getUser().then((u) => {\\n        isLoggedSet(!!u);\\n        \\n        if (!!u) log(\\"User logged in\\", u.profile);\\n        else log(\\"User not logged in\\");\\n      });\\n  }, []);\\n\\n  return <div style={{padding: 5}}>\\n    {!isLogged && <button onClick={login}>Login</button>}\\n    <button>Call API</button>\\n    {isLogged && <button onClick={logout}>Logout</button>}\\n\\n    <div id=\\"results\\"></div>\\n  </div>;\\n}\\n\\nexport default App;\\n\\n```\\n\\nSeguro notaste que configuramos el `authority` con la direcci\xf3n _http://localhost:5000_, pero nuestro Identity Server corre sobre `https` y el puerto `5001`. \\n\\nBien, debemos hacer ciertos cambios y adiciones en el Identity Server.\\n\\n### Identity Server + Authorization Code Flow\\n\\nPara evitar problemas con Chrome, y mientras estamos en el ambiente de desarrollo, vamos a cambiar esta configuraci\xf3n en el Identity Server.\\n\\n```csharp title=\\"Identity/Identity.API/Properties/launchSettings.json\\"\\n{\\n  \\"profiles\\": {\\n    \\"SelfHost\\": {\\n      \\"commandName\\": \\"Project\\",\\n      \\"launchBrowser\\": true,\\n      \\"environmentVariables\\": {\\n        \\"ASPNETCORE_ENVIRONMENT\\": \\"Development\\"\\n      },\\n      // highlight-start\\n      // \\"applicationUrl\\": \\"https://localhost:5001\\"\\n      \\"applicationUrl\\": \\"http://localhost:5000\\"\\n      // highlight-end\\n    }\\n  }\\n}\\n```\\n\\nEsto no es suficiente. Al googlear un rato, me top\xe9 con esta [respuesta](https://stackoverflow.com/a/61302188/3135446) en _StackOverflow_ y funcion\xf3 de maravilla. Primero creamos una extensi\xf3n al `IServiceCollection`.\\n\\n```csharp title=\\"Identity.API/SameSiteCookiesServiceCollectionExtensions.cs\\"\\nusing System;\\nusing Microsoft.AspNetCore.Builder;\\nusing Microsoft.AspNetCore.Http;\\n \\nnamespace Microsoft.Extensions.DependencyInjection\\n{\\n   public static class SameSiteCookiesServiceCollectionExtensions\\n   {\\n      private const SameSiteMode Unspecified = (SameSiteMode) (-1);\\n \\n      public static IServiceCollection ConfigureNonBreakingSameSiteCookies(this IServiceCollection services)\\n      {\\n         services.Configure<CookiePolicyOptions>(options =>\\n         {\\n            options.MinimumSameSitePolicy = Unspecified;\\n            options.OnAppendCookie = cookieContext =>\\n               CheckSameSite(cookieContext.Context, cookieContext.CookieOptions);\\n            options.OnDeleteCookie = cookieContext =>\\n               CheckSameSite(cookieContext.Context, cookieContext.CookieOptions);\\n         });\\n \\n         return services;\\n      }\\n\\n      private static void CheckSameSite(HttpContext httpContext, CookieOptions options)\\n      {\\n         if (options.SameSite == SameSiteMode.None)\\n         {\\n            var userAgent = httpContext.Request.Headers[\\"User-Agent\\"].ToString();\\n\\n            if (DisallowsSameSiteNone(userAgent))\\n            {\\n               options.SameSite = Unspecified;\\n            }\\n         }\\n      }\\n \\n      private static bool DisallowsSameSiteNone(string userAgent)\\n      {\\n         if (userAgent.Contains(\\"CPU iPhone OS 12\\")\\n            || userAgent.Contains(\\"iPad; CPU OS 12\\"))\\n         {\\n            return true;\\n         }\\n\\n         if (userAgent.Contains(\\"Safari\\")\\n            && userAgent.Contains(\\"Macintosh; Intel Mac OS X 10_14\\")\\n            && userAgent.Contains(\\"Version/\\"))\\n         {\\n            return true;\\n         }\\n\\n         if (userAgent.Contains(\\"Chrome/5\\") || userAgent.Contains(\\"Chrome/6\\"))\\n         {\\n            return true;\\n         }\\n\\n         var chromeVersion = GetChromeVersion(userAgent);\\n         if (chromeVersion >= 80)\\n         {\\n            return true;\\n         }\\n\\n         return false;\\n      }\\n\\n      private static int GetChromeVersion(string userAgent)\\n      {\\n         try\\n         {\\n            var subStr = Convert.ToInt32(userAgent.Split(\\"Chrome/\\")[1].Split(\'.\')[0]);\\n            return subStr;\\n         }\\n         catch (Exception)\\n         {\\n            return 0;\\n         }\\n      }\\n   }\\n}\\n```\\n\\nY luego la implementamos en las configuraciones del `Startup.cs`.\\n\\n```csharp title=\\"Identity.API/Startup.cs\\"\\npublic void ConfigureServices(IServiceCollection services)\\n{\\n   // ...\\n   // highlight-start\\n   services.ConfigureNonBreakingSameSiteCookies();\\n   // highlight-end\\n}\\n // ...\\npublic void Configure(IApplicationBuilder app)\\n{\\n   // ...\\n   // A\xf1ade esta l\xednea antes de cualquier `middleware` que pueda escribir `cookies`\\n   // highlight-start\\n   app.UseCookiePolicy();\\n   // highlight-end\\n   // ...\\n   // Esto escribir\xe1 `cookies`, aseg\xfarate que se a\xf1ada despu\xe9s de la pol\xedtica de `cookies`\\n   app.UseAuthentication();\\n   // ...\\n}\\n```\\n\\nTambi\xe9n debemos configurar CORS.\\n\\n```csharp title=\\"Identity.API/Startup.cs\\"\\npublic void ConfigureServices(IServiceCollection services)\\n{\\n    // ...\\n    // highlight-start\\n    services.AddCors(options =>\\n    {\\n        // Esto define una pol\xedtica de CORS llamada \\"default\\"\\n        options.AddPolicy(\\"default\\", policy =>\\n        {\\n           // El puerto de la React App\\n            policy.WithOrigins(\\"http://localhost:3001\\")\\n                .AllowAnyHeader()\\n                .AllowAnyMethod();\\n        });\\n    });\\n    // highlight-end\\n}\\n// ...\\npublic void Configure(IApplicationBuilder app)\\n{\\n    // ...\\n    app.UseRouting();\\n    // ...\\n    // highlight-start\\n    app.UseCors(\\"default\\");\\n    // highlight-end\\n    // ...\\n}\\n```\\n\\nAl ejecutar el project de nuevo, ver\xe1s que ahora corre en la nueva direcci\xf3n.\\n\\n> [21:48:29 Debug] IdentityServer4.Startup <br />\\n> Using idsrv as default ASP.NET Core scheme for forbid <br />\\n> \\n> [21:48:29 Information] Microsoft.Hosting.Lifetime <br />\\n> Now listening on: http://localhost:5000\\n\\n<Tabs\\n  groupId=\\"operating-systems\\"\\n  defaultValue=\\"cli\\"\\n  values={[\\n    {label: \'Command Line Interface\', value: \'cli\'},\\n  ]\\n}>\\n<TabItem value=\\"cli\\">\\n\\n```bash \\ndotnet run --project Identity.API\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n<figure class=\\"md-captioned-image\\">\\n  <img src={require(\'../static/img/blog/2021-07-29/001-authorization-code-flow.gif\').default} alt=\\"Authorization Code Flow\\" />\\n  <figcaption>Authorization Code Flow con PKCE en acci\xf3n.</figcaption>\\n</figure>\\n\\n### API + Bearer Token\\n\\nFinalmente, consumiremos nuestra API desde la React App haciendo uso del `access token` que acabamos de obtener desde el Identity Server.\\n\\n```jsx title=\\"src/App.js\\"\\nimport React from \\"react\\";\\nimport \'./App.css\';\\n\\n// highlight-start\\nimport { oidcManager, signinRedirectCallback, log, login, logout, callApi } from \\"./oidcUtils\\";\\n// highlight-end\\n\\nfunction App() {\\n  const [isLogged, isLoggedSet] = React.useState(false);\\n\\n  React.useEffect(() => {\\n    if (window.location.pathname === `/callback.html`) signinRedirectCallback();\\n    else\\n      oidcManager.getUser().then((u) => {\\n        isLoggedSet(!!u);\\n        \\n        if (!!u) log(\\"User logged in\\", u.profile);\\n        else log(\\"User not logged in\\");\\n      });\\n  }, []);\\n\\n  return <div style={{padding: 5}}>\\n    {!isLogged && <button onClick={login}>Login</button>}\\n    // highlight-start\\n    <button onClick={callApi}>Call API</button>\\n    // highlight-end\\n    {isLogged && <button onClick={logout}>Logout</button>}\\n\\n    <div id=\\"results\\"></div>\\n  </div>;\\n}\\n\\nexport default App;\\n```\\n\\nHaz click sobre el bot\xf3n _Call API_ antes de loguearte, notar\xe1s que recibes un `UnauthorizedError`. Una vez nos logueamos a trav\xe9s del Identity Server, nuestro _/authorization-needed_ endpoint nos devuelve el mensaje escrito sin problemas.\\n\\n<figure class=\\"md-captioned-image\\">\\n  <img src={require(\'../static/img/blog/2021-07-29/002-consume-api-bearer.gif\').default} alt=\\"Consumiendo un API protegida desde una SPA\\" />\\n  <figcaption>Consumiendo un API protegida desde una SPA.</figcaption>\\n</figure>\\n\\n## Autenticaci\xf3n, \xf3 c\xf3mo saber qui\xe9n est\xe1 siendo autorizado\\n\\nHasta este momento, hemos visto c\xf3mo Identity Server nos ha permitido asegurar APIs con un `access token`. Sin embargo, a\xfan no conocemos qui\xe9n es ese usuario del cu\xe1l recibimos el `token`. Recuerda, autorizar no es lo mismo que aut\xe9nticar.\\n\\nVamos a instalar un paquete, crear un nuevo archivo y hacer unas peque\xf1as modificaciones en nuestra _ExpressJS API_ para lograr identificar a nuestro usuario.\\n\\nEl paquete a instalar es:\\n\\n```bash\\nnpm install jwt-decode --save\\n```\\n\\nEl nuevo archivo se llamar\xe1 `identity.middleware` dentro del folder `middlewares`.\\n\\n```js title=\\"src/middlewares/identity.middleware\\"\\nconst jwt_decode = require(\\"jwt-decode\\");\\n\\nfunction identify() {\\n  return function(req, res, next) {\\n    req.user = jwt_decode(req.headers.authorization.split(` `)[1]);\\n    console.debug({ user: req.user, accessToken: req.headers.authorization.split(` `)[1] });\\n    next();\\n  }\\n}\\n\\nmodule.exports = identify;\\n```\\n\\nY ahora configuramos este middleware en nuestra API. El middleware se encargar\xe1 de decodificar el `access token` para obtener informaci\xf3n del acceso, incluyendo un `user identifier`.\\n\\n```js title=\\"src/App.js\\"\\n// ...\\nconst authorize = require(\\"./src/middlewares/auth.middleware\\");\\n// highlight-start\\nconst identify = require(\\"./src/middlewares/identity.middleware\\");\\n// highlight-end\\n\\napp.use(cors());\\n// highlight-start\\napp.use(identify());\\n// highlight-end\\n// ...\\n```\\n\\nUna vez volvemos a ejecutar nuestra API y loguearnos en nuestra ReactApp, al hacer click en el bot\xf3n _Call API_\\n\\n<figure class=\\"md-captioned-image\\">\\n  <img src={require(\'../static/img/blog/2021-07-29/004-sub-in-token.png\').default} alt=\\"Consumiendo un API protegida desde una SPA\\" />\\n  <figcaption>En el access token usado para autorizar el uso del API, hay una propiedad llamada sub. Es est\xe1 propiedad la que identifica al usuario. Es un user ID.</figcaption>\\n</figure>\\n\\nAl imprimir el `access token` en la consola de JavaScript, podemos copiar y pegarlo en el comando cURL de abajo, reemplazando el `<accessToken>`, y al ejecutarlo obtener la informaci\xf3n de usuario. Con esta informaci\xf3n, podr\xedamos realizar condicionante en nuestra l\xf3gica de negocio que est\xe9n basadas en los _claims_ o roles que definamos en nuestros _clientes_ del Identity Server.\\n\\n```bash\\ncurl --location --request GET \'http://localhost:5000/connect/userinfo\' \\\\\\n--header \'Authorization: Bearer <accessToken>\'\\n```\\n\\n> { <br />\\n>   \\"name\\": \\"Bob Smith\\", <br />\\n>   \\"given_name\\": \\"Bob\\", <br />\\n>   \\"family_name\\": \\"Smith\\", <br />\\n>   \\"website\\": \\"http://bob.com\\", <br />\\n>   \\"sub\\": \\"88421113\\" <br />\\n> } <br />\\n\\nPodr\xedamos incorporar esta informaci\xf3n en nuestro ciclo de vida del request, pero dejaremos eso para otro post.\\n\\n## Conclusi\xf3n\\n\\nUna de las principales ventajas al delegar la autorizaci\xf3n y aut\xe9nticaci\xf3n de tus aplicaciones a una implementaci\xf3n del OAuth 2.0 y OpenID es la seguridad. Al ser un est\xe1ndar avalado por grandes compa\xf1\xedas y consorcios podemos estar seguros de su efectividad y fiabilidad.\\n\\nDesde un punto de vista m\xe1s enfocado a la arquitectura de nuestra aplicaci\xf3n, es interesante c\xf3mo ninguna de las Apps aqu\xed mostradas (piensa el API de Express JS y la SPA de React) tuvo la necesidad de manejar ni el usuario ni la contrase\xf1a del usuario. Esto es poderoso. Permite que Apps de terceros trabajen juntas sin necesidad de preocuparse en los mecanismos de autenticaci\xf3n y autorizaci\xf3n.\\n\\nSin embargo, ning\xfan software es perfecto. Como vimos, OAuth va por su segunda versi\xf3n y es del otod probable que en el futuro haya una tercera. Lo qu\xe9 nos queda es nunca para de aprender.\\n\\nEspero este post te haya servido, si es as\xed, comp\xe1rtelo con tus colegas. Happy coding!\\n\\n## Referencias\\n\\n- [Authentication vs. Authorization](https://www.okta.com/identity-101/authentication-vs-authorization/)\\n- [What is OAuth 2.0?](https://auth0.com/intro-to-iam/what-is-oauth-2/)\\n- [Authentication and Authorization Flows](https://auth0.com/docs/flows)\\n- [Identity Server 4: The Big Picture](https://identityserver4.readthedocs.io/en/latest/intro/big_picture.html)\\n- [JKWS by IBM](https://www.ibm.com/docs/en/sva/10.0.1?topic=applications-jwks)\\n- [Adding a JavaScript client](https://identityserver4.readthedocs.io/en/latest/quickstarts/4_javascript_client.html)\\n- [How to prepare your IdentityServer for Chrome\'s SameSite cookie changes - and how to deal with Safari, nevertheless](https://www.thinktecture.com/en/identity/samesite/prepare-your-identityserver/)"},{"id":"2021/04/04/como-trabajar-con-react-context-y-hooks","metadata":{"permalink":"/blog/2021/04/04/como-trabajar-con-react-context-y-hooks","editUrl":"https://github.com/mariomenjr/mariomenjr/edit/main/blog/2021-04-04_como-trabajar-con-react-context-y-hooks.md","source":"@site/blog/2021-04-04_como-trabajar-con-react-context-y-hooks.md","title":"C\xf3mo trabajar con React Context y Hooks","description":"Esta ma\xf1ana, por curiosidad, le\xeda la fechas de lanzamientos de algunas de las herramientas que hoy damos por hecho. React, por ejemplo, fue lanzado el 29 de mayo del a\xf1o 2013. En estos casi 10 a\xf1os, hemos visto la evoluci\xf3n de este ecosistema, desde _Class Components_ a _Hooks_. Hoy, te mostrar\xe9 c\xf3mo hacer uso de una de las \xfaltimas caracter\xedsticas a\xf1adidas a este popular Framework: el contexto.","date":"2021-04-04T17:07:02.000Z","formattedDate":"4 de abril de 2021","tags":[{"label":"react","permalink":"/blog/tags/react"},{"label":"redux","permalink":"/blog/tags/redux"},{"label":"javascript","permalink":"/blog/tags/javascript"},{"label":"react context","permalink":"/blog/tags/react-context"}],"readingTime":6.4,"truncated":true,"authors":[{"name":"Mario Menj\xedvar","title":"Software Engineer","url":"https://github.com/mariomenjr","imageURL":"https://avatars3.githubusercontent.com/u/1946936?s=460&v=4"}],"frontMatter":{"slug":"2021/04/04/como-trabajar-con-react-context-y-hooks","title":"C\xf3mo trabajar con React Context y Hooks","author":"Mario Menj\xedvar","author_title":"Software Engineer","author_url":"https://github.com/mariomenjr","author_image_url":"https://avatars3.githubusercontent.com/u/1946936?s=460&v=4","tags":["react","redux","javascript","react context"],"keywords":["react","espa\xf1ol","react context","c\xf3mo usar react context","user","blog","hooks","reemplazar redux","reemplazar redux con context","dejar de usar redux","redux","reducer","global state"],"date":"2021-04-04T17:07:02.000Z","description":"Esta ma\xf1ana, por curiosidad, le\xeda la fechas de lanzamientos de algunas de las herramientas que hoy damos por hecho. React, por ejemplo, fue lanzado el 29 de mayo del a\xf1o 2013. En estos casi 10 a\xf1os, hemos visto la evoluci\xf3n de este ecosistema, desde _Class Components_ a _Hooks_. Hoy, te mostrar\xe9 c\xf3mo hacer uso de una de las \xfaltimas caracter\xedsticas a\xf1adidas a este popular Framework: el contexto.","image":"https://imgur.com/5ZmbSG2.png"},"prevItem":{"title":"Autenticaci\xf3n como servicio con Identity Server 4","permalink":"/blog/2021/07/29/autenticacion-como-servicio-con-identity-server-4"},"nextItem":{"title":"C\xf3mo validar formularios en React, sin l\xe1grimas","permalink":"/blog/2020/09/04/como-validar-formularios-en-react-sin-lagrimas"}},"content":"Esta ma\xf1ana, por curiosidad, le\xeda la fechas de lanzamientos de algunas de las herramientas que hoy damos por hecho. React, por ejemplo, fue lanzado el 29 de mayo del a\xf1o 2013. En estos casi 10 a\xf1os, hemos visto la evoluci\xf3n de este ecosistema, desde _Class Components_ a _Hooks_. Hoy, te mostrar\xe9 c\xf3mo hacer uso de una de las caracter\xedsticas m\xe1s \xfatiles de este popular Framework: el contexto.\\n\\n\x3c!--truncate--\x3e\\n\\n## Hold on\\n\\nPara ser pr\xe1cticos, estoy asumiendo que:\\n\\n- Ya conoces c\xf3mo funcionan los _Hooks_.\\n- Ya haz trabajado con librer\xedas de Estado global (por ejemplo, _Redux_).\\n\\nSi este no es tu caso, igual qu\xe9date. Nos vamos a divertir.\\n\\n## Ok, React Context\\n\\n_In a nutshell_, _React Context_ nos permite compartir el _State_ de nuestra aplicaci\xf3n a trav\xe9s del \xe1rbol de componentes sin tener que _pasar_ las propiedades explic\xedtamente por cada uno de ellos. Pero... \xbfPor qu\xe9 querr\xedamos acceder a las propiedades sin tener que pasarlas expl\xedcitamente?\\n\\nVeamos el siguiente ejemplo, un carrito de compras:\\n\\n```jsx\\n// App.js\\n\\nimport React from \\"react\\";\\nimport { Container, Row, Col, Form } from \\"reactstrap\\";\\n\\nexport default function App() {\\n  const [cart] = React.useState([{ name: `iPad` }, { name: `OnePlus 9` }]);\\n  const [user] = React.useState({ name: `Mario` });\\n  /*\\n   * En nuestra App, aqu\xed tenemos el origen de datos\\n   */\\n  return <Layout cart={cart} user={user} />;\\n}\\n\\nfunction Layout({ cart, user }) {\\n  /*\\n   * Constru\xedmos el esqueleto de la interfaz\\n   */\\n  return (\\n    <Container>\\n      <Row>\\n        <Col>\\n          <CartForm cart={cart} user={user} />\\n        </Col>\\n      </Row>\\n    </Container>\\n  );\\n}\\n\\nfunction CartForm({ cart, user }) {\\n  /*\\n   * Aqu\xed consumimos a user, pero no a cart\\n   */\\n  return (\\n    <Form>\\n      <h1>Carrito de {user.name}</h1>\\n      <CartList cart={cart} />\\n      <button type=\\"submit\\">Buy</button>\\n    </Form>\\n  );\\n}\\n\\nfunction CartList({ cart }) {\\n  /*\\n   * Finalmente consumimos a cart\\n   */\\n  return (\\n    <div className={`p-2`}>\\n      {cart.map((item, index) => (\\n        <div key={index}>\\n          <span style={{ color: `red`, cursor: `pointer` }}>[x]</span>\\n          <span className={`mx-1`} />\\n          <span>{item.name}</span>\\n        </div>\\n      ))}\\n    </div>\\n  );\\n}\\n```\\n\\nSeguro notaste como los _States_ **_user_** y **_cart_** tienen que _pasar_ por todos los componentes del \xe1rbol para llegar a los componentes d\xf3nde realmente ser\xe1n de utilidad. Cre\xe9me cuando te digo que esto puede complicarse a\xfan m\xe1s.\\n\\n\xbfNo ser\xeda m\xe1s sencillo poder acceder a ellos justo d\xf3nde los necesitemos?\\n\\n## Provider, Consumer, useReducer y useContext\\n\\nYa que tengo tu atenci\xf3n, vamos a introducir unos cuantos conceptos:\\n\\n- **_Provider_**: Como su nombre lo sugiere (proveedor en espa\xf1ol), es el componente que proveer\xe1 los datos a _todos_ sus componentes hijos. Es aqu\xed d\xf3nde el _State_ vivir\xe1.\\n\\n- **_Consumer_**: Con \xe9l, cada nodo (o componente) puede acceder al _State_ que vive en el _Provider_.\\n\\nEstos dos conceptos son fundamentales para entender lo qu\xe9 sucede al implementar React Context en tu aplicaci\xf3n. Sin embargo, el t\xedtulo de este art\xedculo tiene un \\"y Hooks\\" al final. As\xed que debemos presentar los siguientes Hooks:\\n\\n- **_useReducer_**: Si has utilizado _Redux_, ya conoces el pr\xf3posito de un _reducer_. Es una funci\xf3n que recibe dos parametros, el _state_ actual y una _action_. Con estos dos p\xe1rametros, podemos organizar la forma en c\xf3mo el _State_ ser\xe1 actualizado _reduciendo_ las actualizaciones a casos. Los utilizaremos aqu\xed junto con _useContext_.\\n\\n- **_useContext_**: _In a nutshell_, este Hook act\xfaa como un _Consumer_.\\n\\n## Ah s\xed, el Context\\n\\nLo siguiente en nuestra lista es:\\n\\n- Configurar un Contexto\\n- Establecer una forma de actualizar el Context\\n- Consumir el Contexto\\n\\nPara eso, necesitamos el siguiente script. Encontrar\xe1s comentarios expl\xedcativos.\\n\\n```jsx\\n// context.js\\n\\nimport React from \\"react\\";\\n\\nconst StateContext = React.createContext();\\nconst DispatchContext = React.createContext();\\n\\nfunction reducer(state, action) {\\n  switch (action.type) {\\n    case `REMOVE_ITEM`:\\n      const index = Number(action.data.index);\\n      return {\\n        ...state,\\n        cart: [...state.cart.slice(0, index), ...state.cart.slice(index + 1)],\\n      };\\n\\n    default:\\n      return state;\\n  }\\n}\\n\\nfunction Provider({ children }) {\\n  /*\\n   * Creamos un State usando el hook useReducer\\n   * De esta manera, obtenemos la habilidad de separar nuestra l\xf3gica\\n   * En acciones.\\n   *\\n   * Ver: https://es.reactjs.org/docs/hooks-reference.html#usereducer\\n   */\\n  const [state, dispatch] = React.useReducer(reducer, {\\n    user: { name: `Mario` },\\n    cart: [\\n      { name: `iPad Air` },\\n      { name: `OnePlus 9` },\\n      { name: `Thinpad X1 Carbo 9 Gen` },\\n    ],\\n  });\\n\\n  /*\\n   * Establecemos 2 Providers\\n   * 1 para proveer el State\\n   * 1 para proveer la funci\xf3n Dispatch\\n   *\\n   * Esto es as\xed, ya que la funci\xf3n Dispatch nunca cambiar\xe1\\n   * Por esta raz\xf3n, la separamos del resto del State\\n   */\\n  return (\\n    <StateContext.Provider value={state}>\\n      <DispatchContext.Provider value={dispatch}>\\n        {children}\\n      </DispatchContext.Provider>\\n    </StateContext.Provider>\\n  );\\n}\\n\\nfunction useConsumer() {\\n  /*\\n   * Finalmente, hacemos uso del Hook useContext\\n   * para consumir el State que reside en cada Provider\\n   *\\n   * La raz\xf3n por la que es un Array es para darle el formato\\n   * de un custom Hook.\\n   */\\n  return [\\n    React.useContext(StateContext),\\n    React.useContext(DispatchContext),\\n  ].map((ctx) => {\\n    if (ctx === undefined) throw new Error(`Provider not found`);\\n    return ctx;\\n  });\\n}\\n\\n/*\\n * Exportamos\\n */\\nexport { Provider, useConsumer };\\n```\\n\\nEn el script anterior, nos encontramos con 3 funciones importantes.\\n\\n- **_Provider_**: M\xe1s que una funci\xf3n, un tipo. Para ser m\xe1s espec\xedficos, un componente de React. Este componente proveer\xe1 el _State_ global.\\n\\n- **_useConsumer_**: M\xe1s que una funci\xf3n, un custom Hook. Con \xe9l, consumiremos el _State_ en los hijos del componente `<Provider />`.\\n\\n- **_reducer_**: Nuestra funci\xf3n **_reducer_**. Con ella, organizaremos c\xf3mo actualizaremos nuestro _State_.\\n\\nPor \xfaltimo, exportamos \xfanicamente lo que usaremos en los componentes d\xf3nde necesitemos el _State_. En nuestro script `App.js`.\\n\\n```jsx\\n// App.js\\n\\n// ...\\n- function CartForm({ cart, user }) {       // Removed\\n+ function CartForm()) {                    // Added\\n\\n+  const [state, dispatch] = useConsumer();\\n\\n+  function removeItem(index) {\\n+    dispatch({ type: `REMOVE_ITEM`, data: { index } });\\n+  }\\n\\n  /*\\n   * Aqu\xed consumimos a user, pero no a cart\\n   */\\n  return (\\n    <Form>\\n-     <h1>Carrito de {user.name}</h1>\\n+     <h1>Carrito de {state.user.name}</h1>\\n\\n-     <CartList cart={state.cart} removeItem={removeItem} />\\n+     <CartList cart={state.cart} removeItem={removeItem} />\\n\\n-     <Button type=\\"submit\\">Buy</Button>\\n+     <Button type=\\"submit\\" onClick={() => alert(`Thank you!`)}>Buy</Button>\\n    </Form>\\n  );\\n}\\n// ...\\n```\\n\\nEn este ejemplo, `<CartForm>` es el componente desde el cu\xe1l accedimos al contexto utilizando nuestro _Consumer_ `useConsumer`. En \xe9l, programamos l\xf3gica para poder ejecutar acciones como remover un _item_ de la lita del carrito.\\n\\n```jsx\\n// App.js\\n\\n// ...\\n- function CartList({ cart }) {             // Removed\\n+ function CartList({ cart, removeItem }) { // Added\\n  /*\\n   * Finalmente consumimos a cart\\n   */\\n  return (\\n    <div className={`p-2`}>\\n      {cart.map((item, index) => (\\n        <div key={index}>\\n-         <span style={{ color: `red`, cursor: `pointer` }}>[x]</span>\\n+         <span style={{ color: `red`, cursor: `pointer` }} onClick={() => removeItem(index)}>[x]</span>\\n          <span className={`mx-1`} />\\n          <span>{item.name}</span>\\n        </div>\\n      ))}\\n    </div>\\n  );\\n}\\n// ...\\n```\\n\\nTe preguntar\xe1s, \xbfPor qu\xe9 consumir el _State_ \xfanicamente en el componente `<CartForm />` y no tambi\xe9n en `<CartList>`? La respuesta es simple. El _React Context_ es una herramienta muy poderosa, pero no significa que debamos usarla para todo.\\n\\nEn nuestro ejemplo, es m\xe1s importante mantener el componente `<CartList>` reusable, de esta forma, si tenemos que renderizar la lista en otro lado, no dependeremos del contexto que creamos aqu\xed.\\n\\n\x3c!-- Puedes ver la Aplicaci\xf3n resultante abajo: --\x3e\\n\\n\x3c!-- <iframe src=\\"https://codesandbox.io/embed/boring-pasteur-gx6vs?fontsize=14&hidenavigation=1&moduleview=1&theme=dark\\"\\n  style=\\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\\"\\n  title=\\"boring-pasteur-gx6vs\\"\\n  allow=\\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\\"\\n  sandbox=\\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\\"\\n></iframe>\\n\\n<br /> --\x3e\\n\\n## Conclusi\xf3n\\n\\nEspero te haya sido de utilidad este Post. Seguramente ver\xe1s como m\xe1s y m\xe1s proyectos utilizan las APIs nativas de React para manejar varibles globales, en lugar de instalar librer\xedas de terceros.\\n\\n\xdanicamente ten en cuenta que est\xe1s son meramente herramientas, y no hay una sola que sea perfecta para cada caso de uso. En el ejemplo, tomamos la decisi\xf3n de dejar el componente presentacional `<CartList>` independiente para poder usarlo en otros contextos sin problemas.\\n\\n## Referencias\\n\\n- [Context](https://reactjs.org/docs/context.html)\\n- [useReducer](https://reactjs.org/docs/hooks-reference.html#usereducer)\\n- [React Context Explained (2020)](https://www.youtube.com/watch?v=rFnfvhtrNbQ)\\n- [How to use React Context effectively](https://kentcdodds.com/blog/how-to-use-react-context-effectively)"},{"id":"2020/09/04/como-validar-formularios-en-react-sin-lagrimas","metadata":{"permalink":"/blog/2020/09/04/como-validar-formularios-en-react-sin-lagrimas","editUrl":"https://github.com/mariomenjr/mariomenjr/edit/main/blog/2020-09-04_como-validar-formularios-en-react-sin-lagrimas.md","source":"@site/blog/2020-09-04_como-validar-formularios-en-react-sin-lagrimas.md","title":"C\xf3mo validar formularios en React, sin l\xe1grimas","description":"Hist\xf3ricamente, validar un formulario en React requiere de una cantidad impresionante de boilerplate que a\xf1ade complejidad innecesaria. Veamos c\xf3mo librarnos de eso.","date":"2020-09-04T14:08:02.000Z","formattedDate":"4 de septiembre de 2020","tags":[{"label":"formik","permalink":"/blog/tags/formik"},{"label":"react","permalink":"/blog/tags/react"},{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":7.15,"truncated":true,"authors":[{"name":"Mario Menj\xedvar","title":"Software Engineer","url":"https://github.com/mariomenjr","imageURL":"https://avatars3.githubusercontent.com/u/1946936?s=460&v=4"}],"frontMatter":{"slug":"2020/09/04/como-validar-formularios-en-react-sin-lagrimas","title":"C\xf3mo validar formularios en React, sin l\xe1grimas","author":"Mario Menj\xedvar","author_title":"Software Engineer","author_url":"https://github.com/mariomenjr","author_image_url":"https://avatars3.githubusercontent.com/u/1946936?s=460&v=4","tags":["formik","react","javascript"],"keywords":["formik","espa\xf1ol","react","c\xf3mo","validar formularios react","formulario html","formulario react","validar formularios javascript","validar formularios"],"date":"2020-09-04T14:08:02.000Z","description":"Hist\xf3ricamente, validar un formulario en React requiere de una cantidad impresionante de boilerplate que a\xf1ade complejidad innecesaria. Veamos c\xf3mo librarnos de eso.","image":"https://imgur.com/wm6iA0l.png"},"prevItem":{"title":"C\xf3mo trabajar con React Context y Hooks","permalink":"/blog/2021/04/04/como-trabajar-con-react-context-y-hooks"},"nextItem":{"title":"#Algoritmos: B\xfasqueda binaria","permalink":"/blog/2020/08/14/algoritmos-busqueda-binaria"}},"content":"Todos los desarrolladores de software que trabajamos con React, absolutamente todos, hemos tenido ese tedioso ticket para crear y/o validar un formulario. Afortunadamente para ti, hoy te mostrar\xe9 la forma m\xe1s sencilla de cerrarlo: Formik.\\n\\n\x3c!--truncate--\x3e\\n\\n## Formik what?\\n\\n[Formik](https://formik.org/docs/overview) es uno de los paquetes de software de c\xf3digo abierto m\xe1s \xfatiles que podemos encontrar en el repositorio de `npm` (o `yarn`, como gustes). En palabras de uno de sus creadores, [@JaredPalmer](https://twitter.com/jaredpalmer):\\n\\n> \\"Adm\xedtamoslo, los formularios requiren de much\xedsimo c\xf3digo en React. Para poner las cosas peor, la mayor\xeda de utilidades para construirlos hacen much\xedsima, demasiada magia que frecuentemente trae un costo al desempe\xf1o\\" de [Formik Docs](https://formik.org/docs/overview)\\n\\nPara Jared y compa\xf1\xeda hab\xeda un beneficio en estandarizar los componentes de entrada y c\xf3mo los datos flu\xedan a trav\xe9s del Form. Es la raz\xf3n de ser de Formik.\\n\\n## Preparando el ejemplo\\n\\nPara ser pr\xe1cticos, vamos a hacer uso del famos\xedsimo toolchain `create-react-app`. Ve a tu l\xednea de comandos y ejecuta:\\n\\n```shell\\n$ npx create-react-app formik-sample\\n$ cd formik-sample\\n$ npm start\\n```\\n\\n![React App by create-react-app](https://imgur.com/8tQZ4qO.png)\\n\\nAhora tenemos la base para trabajar nuestra aplicaci\xf3n React, pero necesitamos un form al cu\xe1l validar, para eso instalaremos el siguiente paquete:\\n\\n```shell\\n$ npm install bootstrap reactstrap --save\\n```\\n\\nEste paquete componetiza la mayor\xeda de utilidades del popular framework CSS Bootstrap, lo cu\xe1l acelera nuestra habilidad de construir el layout del formulario. Una vez completa la instalaci\xf3n, copia y pega este c\xf3digo en tu archivo `src/App.js`:\\n\\n```javascript\\n// src/App.js\\n\\nimport React from \\"react\\";\\nimport {\\n  Container,\\n  Button,\\n  Form,\\n  FormGroup,\\n  Label,\\n  Input,\\n  Card,\\n  CardBody,\\n  CardHeader,\\n  FormFeedback,\\n} from \\"reactstrap\\";\\n\\nfunction Formulario() {\\n  return (\\n    <Container className=\\"p-5\\">\\n      <Card>\\n        <CardHeader></CardHeader>\\n        <CardBody>\\n          <Form>\\n            <h1>Form</h1>\\n            <FormGroup>\\n              <Label for=\\"name\\">Name</Label>\\n              <Input type=\\"text\\" name=\\"name\\" placeholder=\\"Woody Allen\\" />\\n            </FormGroup>\\n            <FormGroup>\\n              <Label for=\\"email\\">Email</Label>\\n              <Input\\n                type=\\"email\\"\\n                name=\\"email\\"\\n                placeholder=\\"contoso@domain.com\\"\\n              />\\n            </FormGroup>\\n            <FormGroup>\\n              <Label for=\\"password\\">Password</Label>\\n              <Input\\n                type=\\"password\\"\\n                name=\\"password\\"\\n                placeholder=\\"Provide a password\\"\\n              />\\n            </FormGroup>\\n            <FormGroup>\\n              <Label for=\\"bio\\">Text Area</Label>\\n              <Input type=\\"textarea\\" name=\\"bio\\" />\\n            </FormGroup>\\n\\n            <Button type=\\"submit\\">Submit</Button>\\n          </Form>\\n        </CardBody>\\n      </Card>\\n    </Container>\\n  );\\n}\\n\\nexport default Formulario;\\n```\\n\\nTambi\xe9n, a\xf1ade est\xe1 l\xednea en el archivo `src/index.js`:\\n\\n```javascript\\n// src/index.js\\n\\nimport React from \'react\';\\nimport ReactDOM from \'react-dom\';\\nimport \'bootstrap/dist/css/bootstrap.css\'; // Importa bootstrap a la React App\\n// ...\\n```\\n\\nDeber\xedas ver un formulario similar al de la imagen:\\n\\n![Form built with reactstrap](https://imgur.com/6NWfclG.png)\\n\\nContinuemos.\\n\\n## Formik\\n\\nLlegados a este punto, ya estamos listos para ver la magia de Formik.\\n\\n```shell\\n$ npm install formik --save\\n```\\n\\nYa que la instalaci\xf3n haya finalizado, vamos a hacer unas modificaciones a nuestro c\xf3digo en `src/App.js`.\\n\\n```javascript\\n// src/App.js\\n\\nimport React from \\"react\\";\\nimport { Formik } from \\"formik\\"; // Importamos el component <Formik />\\nimport {\\n  Container,\\n// ...\\n```\\n\\nEste componente debe encapsular a nuestro formulario, c\xf3mo se muestra abajo. Formik se mantiene al tanto del estado del formulario y te provee valores, m\xe9todos reusables y manejadores de eventos a trav\xe9s de `props`.\\n\\nAdem\xe1s, Formik sigue una regla b\xe1sica para simplificar el proceso de validaci\xf3n. Para que la librer\xeda puede relacionar un `initialValues` a un `<Input>` espec\xedfico, tanto la propiedad como el `name` de `<Input>` deben tener el mismo nombre. En el ejemplo de abajo, hemos definido 5 controles: `name`, `email`, `password`, `bio`, and `multiple`.\\n\\nAunque no debemos olvidar que estamos en React, por lo qu\xe9 debemos manejar el cambio de los valores de los controles. Esto lo logramos con los manejadores provistos por Formik: `handleChange` y `handleBlur`. Sin olvidar que debemos renderizar el valor adecuado en el control, para eso haremos uso de la propiedad `values`.\\n\\nAparte de las \xfatiles `props` provistas por Formik, tambi\xe9n el tag en s\xed mismo necesita de ciertas propiedades para funcionar:\\n\\n- `initialValues`: Le dice a Formik de cuales valores debe mantenerse al tanto y buscar sus respectivos controles en el formulario.\\n- `validate`: Esta funci\xf3n recibe como parametro los `values` de los cu\xe1les la librer\xeda est\xe1 al tanto para ser validados.\\n- `onSubmit`: Quiz\xe1 la funci\xf3n que m\xe1s te interese de la librer\xeda. Es aqu\xed d\xf3nde definimos que debe suceder si nuestro formulario ha sido validado con \xe9xito. Por ejemplo, postear los valores a un servicio del backend.\\n\\nYa qu\xe9 hemos cubierto una breve explicaci\xf3n, es hora de ver todo esto en c\xf3digo.\\n\\n```javascript\\n// src/App.js\\n\\n// ...\\nfunction Formulario() {\\n  return (\\n    <Container className=\\"p-5\\">\\n      <Card>\\n        <CardHeader></CardHeader>\\n        <CardBody>\\n          <Formik\\n            initialValues={{\\n              name: \\"\\",\\n              email: \\"\\",\\n              password: \\"\\",\\n              bio: \\"\\",\\n            }}\\n            validate={(values) => {\\n              const errors = {};\\n\\n              // We need a name\\n              if (!values.name) errors.name = \\"Required\\";\\n\\n              // We need a valid e-mail\\n              if (!values.email) errors.email = \\"Required\\";\\n              else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,}$/i.test(values.email))\\n                errors.email = \\"Invalid email address\\";\\n\\n              // We need a valid password\\n              if (!values.password) errors.password = \\"Required\\";\\n              else if (`${values.password}`.length < 7)\\n                errors.password =\\n                  \\"Password must be larger than 7 characters\\";\\n\\n              console.log({ values, errors });\\n\\n              return errors;\\n            }}\\n            onSubmit={(values, { setSubmitting }) => {\\n              setTimeout(() => {\\n                alert(JSON.stringify(values, null, 2));\\n\\n                setSubmitting(false);\\n              }, 250);\\n            }}\\n          >\\n            {(props) => {\\n              const {\\n                values,\\n                errors,\\n                touched,\\n                handleChange,\\n                handleBlur,\\n                handleSubmit,\\n                isSubmitting,\\n                /* y otras m\xe1s */\\n              } = props;\\n              return (\\n                <Form onSubmit={handleSubmit}>\\n                  <h1>Form</h1>\\n                  <FormGroup>\\n                    <Label for=\\"name\\">Name</Label>\\n                    <Input\\n                      type=\\"text\\"\\n                      name=\\"name\\"\\n                      placeholder=\\"Woody Allen\\"\\n                      invalid={errors.name && touched.name}\\n                      onChange={handleChange}\\n                      onBlur={handleBlur}\\n                      value={values.name}\\n                    />\\n                    <FormFeedback>{errors.name}</FormFeedback>\\n                  </FormGroup>\\n                  <FormGroup>\\n                    <Label for=\\"email\\">Email</Label>\\n                    <Input\\n                      type=\\"email\\"\\n                      name=\\"email\\"\\n                      placeholder=\\"contoso@domain.com\\"\\n                      invalid={errors.email && touched.email}\\n                      onChange={handleChange}\\n                      onBlur={handleBlur}\\n                      value={values.email}\\n                    />\\n                    <FormFeedback>{errors.email}</FormFeedback>\\n                  </FormGroup>\\n                  <FormGroup>\\n                    <Label for=\\"password\\">Password</Label>\\n                    <Input\\n                      type=\\"password\\"\\n                      name=\\"password\\"\\n                      placeholder=\\"Provide a password\\"\\n                      invalid={errors.password && touched.password}\\n                      onChange={handleChange}\\n                      onBlur={handleBlur}\\n                      value={values.password}\\n                    />\\n                    <FormFeedback>{errors.password}</FormFeedback>\\n                  </FormGroup>\\n                  <FormGroup>\\n                    <Label for=\\"bio\\">Text Area</Label>\\n                    <Input\\n                      type=\\"textarea\\"\\n                      name=\\"bio\\"\\n                      onChange={handleChange}\\n                      onBlur={handleBlur}\\n                      value={values.name}\\n                    />\\n                  </FormGroup>\\n\\n                  <Button type=\\"submit\\" disabled={isSubmitting}>\\n                    {isSubmitting ? `Loading` : `Submit`}\\n                  </Button>\\n                </Form>\\n              );\\n            }}\\n          </Formik>\\n        </CardBody>\\n      </Card>\\n    </Container>\\n  );\\n}\\n// ...\\n```\\n\\nEl c\xf3digo de arriba nos permite validar el nombre, e-mail y contrase\xf1a en nuestro formulario. Al hacer clic en `Submit`, sin completar un solo `<Input>`, deber\xedas ver algo similar a esto:\\n\\n![Formulario validado](https://imgur.com/IIVx4c9.png)\\n\\nListo, ya hemos validado el formulario. Lo \xfanico que nos queda es definir el manejador `onSubmit` en el tag `Formik` y tendremos la certeza de qu\xe9 si nuestro programa ejecuta ese `callback` se debe a que nuestros datos han sido previamente validados.\\n\\n## Podemos hacerlo mejor\\n\\nSeguramente tienes alguna de estas preguntas en tu cabeza: \xbfPor qu\xe9 repetir la asignaci\xf3n de `handleChange` y `handleBlur`? y \xbfPor qu\xe9 validar _manualmente_ cada propiedad paso a paso?. Cre\xe9me, yo tambi\xe9n me hice esas preguntas.\\n\\nPara fortuna de qui\xe9n tenga que mantener este formulario, hay una forma m\xe1s sencilla de definir las validaci\xf3n y los controles de estado.\\n\\n### Formik Field\\n\\nPara reducir el n\xfamero de veces que repetimos la asignaci\xf3n de los manejadores de eventos, vamos a importar otro elemento de la librer\xeda Formik.\\n\\n```javascript\\n// src/App.js\\n\\n// ...\\nimport { Formik, Field } from \\"formik\\"; // Importamos el component <Field />\\n// ...\\n```\\n\\nEste componente nos permite ahorrarnos la asignaci\xf3n de manejadores y valor directamente al componente. Lo \xfanico que debemos hacer, y ya que estamos usando `reacstrap`, es asignarlo a la propiedad `tag` de cada elemento `<Input>`. Formik se encargar\xe1 del resto.\\n\\n```javascript\\n<Input\\n  type=\\"text\\"\\n  name=\\"name\\"\\n  placeholder=\\"Woody Allen\\"\\n  invalid={errors.name && touched.name}\\n- onChange={handleChange}\\n- onBlur={handleBlur}\\n- value={values.name}\\n+ tag={Field}\\n/>\\n```\\n\\nEs imprescindible que la propiedad `name` del `<Input>` tenga el mismo nombre a una propiedad en `initialValues`.\\n\\n### Formik + Yup\\n\\n[`Yup`](https://github.com/jquense/yup) es una librer\xeda que nos permite construir esquemas de conversi\xf3n y validaci\xf3n. El punto m\xe1s fuerte de `Yup` es el n\xedvel de expresividad que las validaciones pueden alcanzar, sencillas o complejas.\\n\\nDe acuerdo a la [documentaci\xf3n](https://formik.org/docs/guides/validation#validationschema) de `Formik`, `Yup` es un ciudadano de primera clase en la librer\xeda por lo que posee una `prop` especial en el elemento `<Formik>` llamada `validationSchema`.\\n\\n```shell\\n$ npm install yup --save\\n```\\n\\nUna vez instalamos `Yup`, debemos importarlo:\\n\\n```javascript\\n// src/App.js\\n\\n// ...\\nimport * as Yup from \\"yup\\"; // Importando Yup\\nimport {\\n  Container,\\n// ...\\n```\\n\\nRegresemos al c\xf3digo del componente `Formulario`. Justo en la propiedades del elmento `<Formik>` vamos a eliminar la propiedad `validate` y en su lugar asignaremos la propiedad `validationSchema`.\\n\\n```javascript\\n<Formik\\n  initialValues={{\\n    name: \\"\\",\\n    email: \\"\\",\\n    password: \\"\\",\\n    bio: \\"\\",\\n  }}\\n  validationSchema={Yup.object().shape({\\n    name: Yup.string().required(\\"Required\\"),\\n    email: Yup.string().email(\\"Invalid email\\").required(\\"Required\\"),\\n    password: Yup.string().min(8, \\"Password is too short\\").required(\\"Required\\"),\\n  })}\\n  onSubmit={(values, { setSubmitting }) => {\\n    setTimeout(() => {\\n      alert(JSON.stringify(values, null, 2));\\n\\n      setSubmitting(false);\\n    }, 250);\\n  }}\\n>\\n```\\n\\nPor \xfaltimo, podemos llenar nuestro formulario y ver que una vez validado, el `callback` en la propiedad `onSubmit` del elemento `<Formik>` es ejecutada.\\n\\n![Formulario completo](https://imgur.com/wm6iA0l.png)\\n\\n## Conclusi\xf3n\\n\\nEspero este post te sea de mucha ayuda. En mi experiencia con React, Formik me ha facilitado el validar formularios al proveerme de m\xe9todos que me permiten ajustar a cada momento los valores y las validaciones necesarias. La expresividad del c\xf3digo es de gran valor ya que permite escalar y/o mantener de una forma sencilla sin reinventar la rueda para cada formulario.\\n\\n## Referencias\\n\\n- [Formik documentation](https://formik.org/docs/overview)"},{"id":"2020/08/14/algoritmos-busqueda-binaria","metadata":{"permalink":"/blog/2020/08/14/algoritmos-busqueda-binaria","editUrl":"https://github.com/mariomenjr/mariomenjr/edit/main/blog/2020-08-14_algoritmos-busqueda-binaria.md","source":"@site/blog/2020-08-14_algoritmos-busqueda-binaria.md","title":"#Algoritmos: B\xfasqueda binaria","description":"A qu\xe9 alguna vez te toco buscar un n\xfamero de tel\xe9fono en aquellos gigantescos directorios tel\xe9fonicos, \xbfC\xf3mo le hac\xedas, p\xe1gina por p\xe1gina o te tratabas de ahorrar tiempo salt\xe1ndote p\xe1ginas?","date":"2020-08-14T16:47:12.000Z","formattedDate":"14 de agosto de 2020","tags":[{"label":"algoritmos","permalink":"/blog/tags/algoritmos"},{"label":"computer science","permalink":"/blog/tags/computer-science"},{"label":"busqueda binaria","permalink":"/blog/tags/busqueda-binaria"}],"readingTime":4.28,"truncated":true,"authors":[{"name":"Mario Menj\xedvar","title":"Software Engineer","url":"https://github.com/mariomenjr","imageURL":"https://avatars3.githubusercontent.com/u/1946936?s=460&v=4"}],"frontMatter":{"slug":"2020/08/14/algoritmos-busqueda-binaria","title":"#Algoritmos: B\xfasqueda binaria","author":"Mario Menj\xedvar","author_title":"Software Engineer","author_url":"https://github.com/mariomenjr","author_image_url":"https://avatars3.githubusercontent.com/u/1946936?s=460&v=4","tags":["algoritmos","computer science","busqueda binaria"],"keywords":["algoritmos","computer","science","busqueda","binaria","blog","ciencias","computacion"],"date":"2020-08-14T16:47:12.000Z","description":"A qu\xe9 alguna vez te toco buscar un n\xfamero de tel\xe9fono en aquellos gigantescos directorios tel\xe9fonicos, \xbfC\xf3mo le hac\xedas, p\xe1gina por p\xe1gina o te tratabas de ahorrar tiempo salt\xe1ndote p\xe1ginas?","image":"https://upload.wikimedia.org/wikipedia/commons/f/f7/Binary_search_into_array.png"},"prevItem":{"title":"C\xf3mo validar formularios en React, sin l\xe1grimas","permalink":"/blog/2020/09/04/como-validar-formularios-en-react-sin-lagrimas"},"nextItem":{"title":"C\xf3mo crear un blog a base de markdown y JavaScript","permalink":"/blog/2020/08/09/como-crear-un-blog-a-base-de-markdown-y-javascript"}},"content":"A qu\xe9 alguna vez te toco buscar un n\xfamero de tel\xe9fono en aquellos gigantescos directorios tel\xe9fonicos, \xbfC\xf3mo le hac\xedas, p\xe1gina por p\xe1gina o tratabas de ahorrar tiempo salt\xe1ndote p\xe1ginas?\\n\\n\x3c!--truncate--\x3e\\n\\n## La idea\\n\\nRetomando el gigantesco directorio tel\xe9fonico, podemos estar seguros de una cosa: los n\xfameros de tel\xe9fono se presentan en orden alfab\xe9tico por el nombre del propietario. Esto es es imprecindible para el algoritmo de b\xfasqueda binaria. \\n\\nSuponiendo que buscamos el n\xfamero tel\xe9fonico de Juan, \xbfTiene sentido empezar desde las primeras p\xe1ginas d\xf3nde estar\xe1n los n\xfameros de personas c\xf3mo Alberto o Alejandra? Si tu respuesta es no, est\xe1s en lo correcto, ser\xe1 much\xedsimo m\xe1s f\xe1cil identificar en cu\xe1l p\xe1gina empiezan a listarse los nombres que inician con J, y empezar nuestra b\xfasqueda desde ah\xed. Una vez en esta p\xe1gina, podr\xedamos incluso tratar de id\xe9ntificar en cu\xe1l p\xe1gina empiezan a listarse los nombres que empiezan con Ju, y as\xed sucesivamente hasta encontrar a Juan.\\n\\n## En c\xf3digo\\n\\nPero en este blog nosotros ya no usamos esos gigantescos directorios tel\xe9fonicos, as\xed que vamos a ver un ejemplo m\xe1s acorde a lo que sabemos hacer aqu\xed: c\xf3digo. Por lo qu\xe9 para nuestro ejemplo pr\xe1ctico, vamos a validar si un n\xfamero `X` est\xe1 inclu\xeddo dentro de una lista de `N` elementos.\\n\\nComo mencionamos antes en el ejemplo del directorio, pod\xedamos estar seguros de una cosa: sus datos est\xe1n ordenados. Esto se mantiene a la hora de utilizar c\xf3digo. Nuestro arreglo de datos debe estar ordenado. Sino lo est\xe1, debemos ordenarlo. Eso lo dejaremos para futuros posts.\\n\\nEsta ser\xe1 nuestra lista de trabajo:\\n\\n```javascript\\nconst numbers = [2, 3, 5, 9, 15, 17, 55, 69];\\n```\\n\\nPara ejecutar de manera efectiva el algoritmo, necesitaremos tener la noci\xf3n del mayor y menor n\xfamero en nuestra lista, y ya qu\xe9 no hay mejor manera de localizar valores en una lista que usar su indice, guardaremos eso, los indices:\\n\\n```javascript\\nlet maxIndex = numbers.length - 1;\\nlet minIndex = 0;\\n```\\n\\n\xbfRecuerdas como en el ejemplo del directorio, tratabamos de identificar la p\xe1gina en la cu\xe1l los nombres que inician con J empezaban a listarse? Al aplicar el algoritmo de b\xfasqueda binaria tomamos un enfoque m\xe1s general. Esto significa que nosotros siempre dividiremos la lista por la mitad y, partiendo de una comparaci\xf3n, definiremos a cu\xe1l de las dos mitades pertence el valor que deseamos encontrar. Una vez conozcamos la mitad a la qu\xe9 pertenece, repetimos el proceso y as\xed sucesivamente hasta que nuestra \xe1rea de b\xfasqueda se reduce a uno, o simplemente no encontramos el valor.\\n\\n> ![B\xfasqueda binaria](https://upload.wikimedia.org/wikipedia/commons/f/f7/Binary_search_into_array.png)\\n> Este es el esquema del funcionamiento del algoritmo de [Wikipedia](https://es.wikipedia.org/wiki/B%C3%BAsqueda_binaria)\\n\\nAntes de ejemplificar lo anterior, nos queda mostrar c\xf3mo identificaremos la mitad de nuestra lista:\\n\\n```javascript\\nlet half = Math.floor((minIndex + maxIndex)/2);\\n```\\n\\nAhora s\xed, armemos el algoritmo:\\n\\n```javascript\\nconst find = 17;\\nconst numbers = [2, 3, 5, 9, 15, 17, 55, 69];\\n\\nfunction busquedaBinaria(collection, findee) {\\n  // Asignando los valores del rango inicial\\n  let minIndex = 0;\\n  let maxIndex = numbers.length - 1;\\n\\n  while (minIndex <= maxIndex) {\\n    \\n    // Calculando la posici\xf3n en el medio de la lista\\n    let half = Math.floor((minIndex + maxIndex) / 2);\\n\\n    // Recoger el valor del medio\\n    let guess = collection[half];\\n\\n    if (guess === findee) // Comparamos si es el valor que buscamos\\n      return half;\\n\\n    else if (guess > findee) \\n      // Si el valor que buscamos es menor al valor supuesto\\n      // debemos reducir nuestro rango de b\xfasqueda.\\n      // Ahora nuestro mayor valor est\xe1 justo debajo de la mitad calculada.\\n      maxIndex = half - 1; \\n    \\n    else \\n      // Si el valor que buscamos es mayor al valor supuesto\\n      // debemos reducir nuestro rango de b\xfasqueda.\\n      // Ahora nuestro menor valor est\xe1 justo arriba de la mitad calculada.\\n      minIndex = half + 1;\\n  }\\n  return -1;\\n}\\n\\nconst foundIndex = busquedaBinaria(numbers, find);\\nconsole.log(\\n  foundIndex === -1\\n    ? `El n\xfamero ${find} no fue encontrado.`\\n    : `El n\xfamero ${find} est\xe1 en el \xedndice ${foundIndex}.`\\n);\\n```\\n\\nEs esta din\xe1mica de decidir \xfanicamente entre dos opciones, cada vez que reducimos el \xe1rea de b\xfasqueda, lo qu\xe9 le da el nombre algoritmo.\\n\\n## Conclusi\xf3n\\n\\nPudimos simplemente ejecutar el siguiente c\xf3digo:\\n\\n```javascript\\nconst find = 17;\\nconst numbers = [2, 3, 5, 9, 15, 17, 55, 69];\\n\\nlet foundIndex = -1;\\n\\nfor (let index = 0; index < numbers.length; index++) {\\n  if (find === numbers[index]) {\\n    foundIndex = index;\\n    break;\\n  }\\n}\\n\\nconsole.log(\\n  foundIndex === -1\\n    ? `El n\xfamero ${find} no fue encontrado.`\\n    : `El n\xfamero ${find} est\xe1 en el \xedndice ${foundIndex}.`\\n);\\n```\\n\\nComparar cada uno de los `items` en la lista y, cuando lo encontramos, listo. Podr\xedas pensar que es enfoque es much\xedsimo m\xe1s f\xe1cil y r\xe1pido de programar, y tienes raz\xf3n. Pero, \xbfQu\xe9 pasa cuando nuestra lista no contiene 8 `items` sino 1,000,000?\\n\\nLa intenci\xf3n de este post es mostrarte que, si bien es cierto en programaci\xf3n hay muchas formas de resolver un problema, nuestro objetivo conforme avanzamos en nuestra carrera es escogar la m\xe1s \xf3ptima. Cada problema es un mundo y es nuestro trabajo encontrar la mejor soluci\xf3n.\\n\\n## Referencias\\n\\n- [Binary search algorithm from Wikipedia](https://en.wikipedia.org/wiki/Binary_search_algorithm)\\n- [Grokking Algorithms: An Illustrated Guide For Programmers and Other Curious People](https://www.goodreads.com/book/show/22847284-grokking-algorithms-an-illustrated-guide-for-programmers-and-other-curio)"},{"id":"2020/08/09/como-crear-un-blog-a-base-de-markdown-y-javascript","metadata":{"permalink":"/blog/2020/08/09/como-crear-un-blog-a-base-de-markdown-y-javascript","editUrl":"https://github.com/mariomenjr/mariomenjr/edit/main/blog/2020-08-09_como-crear-un-blog-a-base-de-markdown-y-javascript.md","source":"@site/blog/2020-08-09_como-crear-un-blog-a-base-de-markdown-y-javascript.md","title":"C\xf3mo crear un blog a base de markdown y JavaScript","description":"Seguramente te haz hecho la siguiente pregunta: \xbfC\xf3mo hostear un blog que sea f\xe1cil de mantener, sin pagar un centavo? En este post te explico una de tantas alternativas.","date":"2020-08-09T17:23:17.000Z","formattedDate":"9 de agosto de 2020","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"},{"label":"svelte","permalink":"/blog/tags/svelte"},{"label":"blog","permalink":"/blog/tags/blog"},{"label":"markdown","permalink":"/blog/tags/markdown"},{"label":"howto","permalink":"/blog/tags/howto"}],"readingTime":8.62,"truncated":true,"authors":[{"name":"Mario Menj\xedvar","title":"Software Engineer","url":"https://github.com/mariomenjr","imageURL":"https://avatars3.githubusercontent.com/u/1946936?s=460&v=4"}],"frontMatter":{"slug":"2020/08/09/como-crear-un-blog-a-base-de-markdown-y-javascript","title":"C\xf3mo crear un blog a base de markdown y JavaScript","author":"Mario Menj\xedvar","author_title":"Software Engineer","author_url":"https://github.com/mariomenjr","author_image_url":"https://avatars3.githubusercontent.com/u/1946936?s=460&v=4","tags":["javascript","svelte","blog","markdown","howto"],"keywords":["javascript","svelte","blog","markdown","howto"],"date":"2020-08-09T17:23:17.000Z","description":"Seguramente te haz hecho la siguiente pregunta: \xbfC\xf3mo hostear un blog que sea f\xe1cil de mantener, sin pagar un centavo? En este post te explico una de tantas alternativas."},"prevItem":{"title":"#Algoritmos: B\xfasqueda binaria","permalink":"/blog/2020/08/14/algoritmos-busqueda-binaria"}},"content":"Seguramente te haz hecho la siguiente pregunta: \xbfC\xf3mo hostear un blog que sea f\xe1cil de mantener, sin pagar un centavo? En este post te explico una de tantas alternativas.\\n\\n\x3c!--truncate--\x3e\\n\\n## Porqu\xe9\\n\\nOtra pregunta que probablemente este en tu cabeza es \xbfPor qu\xe9 markdown y JavaScript? La respuesta es un poco m\xe1s elaborada. Para empezar, \xbfQu\xe9 es markdown? Seg\xfan Wikipedia: \\n\\n> \\"Markdown es un lenguaje de marcado ligero que trata de conseguir la m\xe1xima legibilidad y facilidad de publicaci\xf3n tanto en su forma de entrada como de salida, inspir\xe1ndose en muchas convenciones existentes para marcar mensajes de correo electr\xf3nico usando texto plano\\" de [Wikipedia](https://es.wikipedia.org/wiki/Markdown).\\n\\nAl usar markdown para escribir un post, estamos estructurando nuestro contenido sin necesidad de incluir HTML o CSS en el momento. Es decir, nos enfocamos enteramente en lo importante: el texto. Esta simplicidad se ver\xe1 potencializada al incluir _Git_ y _Github_ en la formula, ya que podremos versionar nuestro contenido.\\n\\nComo mencion\xe9, hay muchas alternativas para lograrlo. Fundamentalmente una p\xe1gina web no es m\xe1s que HTML, CSS y JavaScript. Herramientas como [_Jekyll_](https://jekyllrb.com/), aprovechan esta regla de oro para ayudarte a generar y administrar posts f\xe1cilmente haciendo uso de markdown. Pero, \xbfQu\xe9 pasa si queremos tomar ventaja de todas las herramientas disponibles en el ecosistema JavaScript que se han establecido en los \xfaltimos 10 a\xf1os?  Para eso tenemos [_Gatsby_](https://www.gatsbyjs.org/), [_Next.js_](https://nextjs.org/) o [_Sapper_](https://sapper.svelte.dev/docs).\\n\\n_In a nutshell_, estos tres frameworks permiten generar sitios est\xe1ticos haciendo uso de herramientas modernas como React o Svelte. En este post nos centraremos en _Sapper_.\\n\\n## \xbfPor qu\xe9 _Sapper_?\\n\\nSvelte es el nuevo chico de la cuadra. Su propuesta insignia es mover la reactividad de la UI desde mediadores como el Virtual DOM hacia el lenguaje, o mejor dicho, al compilador, en contraste con React o Vue. Esto aumenta el desempe\xf1o de las aplicaciones y disminuye el tama\xf1o del _bundle_.\\n\\nPuedes echar un vistazo a la [comparativa](https://www.swyx.io/writing/svelte-static/) entre Gatsby y Sapper realizada por [Shawn Wang](https://twitter.com/swyx), un popular desarrollador en [egghead.io](https://egghead.io/). Se muestra una reducci\xf3n del 93% en el tama\xf1o del _bundle_ con _Sapper_.\\n\\n## Setup\\n\\nPara instalar Sapper, basta con ejecutar los siguientes comandos:\\n\\n```shell\\n[user@host ~]$ npx degit \\"sveltejs/sapper-template#rollup\\" my-blog\\n[user@host ~]$ cd my-blog\\n[user@host my-blog]$ npm install\\n[user@host my-blog]$ npm run dev\\n```\\n\\nEn el folder del projecto _my-blog_, nos interesan los siguientes files:\\n\\n```text\\n...\\n\u251c src\\n\u2502 \u251c routes\\n| | \u251c blog\\n| | | \u251c _posts.js\\n| | | \u251c [slug].json.js\\n| | | \u251c [slug].svelte\\n| | | \u251c index.json.js\\n| | | \u251c index.svelte\\n...\\n```\\n\\nDe paso creamos el siguiente directorio y archivo:\\n\\n```text\\n...\\n+ \u251c content\\n+ \u2502 \u251c 2020-08-08_hola-mundo.md\\n  \u251c src\\n  \u2502 \u251c routes\\n...\\n```\\n\\nCon el siguiente contenido:\\n\\n```text\\n---\\nauthor: \'Mario Menj\xedvar\'\\nslug: \'hola-mundo\'\\ntitle: \'Hola Mundo\'\\ntimestamp: \'2020-08-08T10:23:17.000-07:00\'\\n---\\n\\n# Hola mundo\\n\\nHola mundo.\\n```\\n\\nNecesitamos instalar los siguientes paquetes:\\n\\n```shell\\n[user@host my-blog]$ npm i gray-matter highlight.js marked\\n```\\n\\nEn mi caso, quiero que los posts est\xe9n ordenados por su fecha de publicaci\xf3n y que esto se refleje en la URL. Tendremos que hacer unos cambios a los siguientes archivos:\\n\\n```text\\n...\\n- | | | \u251c [slug].json.js\\n- | | | \u251c [slug].svelte\\n+ | | | \u251c [...slug].json.js\\n+ | | | \u251c [...slug].svelte\\n...\\n```\\n\\nLuego, reemplazamos el contenido:\\n\\n```javascript\\n// src/routes/blog/[...slug].json.js\\n\\nimport fs from \\"fs\\";\\nimport path from \\"path\\";\\nimport marked from \\"marked\\";\\nimport hljs from \\"highlight.js\\";\\nimport grayMatter from \\"gray-matter\\";\\n\\n/*\\n * Para obtener el contenido del post\\n */\\nfunction getPost(year, month, day, fileName) {\\n  return fs.readFileSync(\\n    path.resolve(\\"content\\", `${year}-${month}-${day}_${fileName}.md`),\\n    \\"utf-8\\"\\n  );\\n}\\n\\n/*\\n * En Sapper, este m\xe9todo responde a una request a trav\xe9s del m\xe9todo GET\\n * En nuestro caso, la request de un JSON\\n */\\nexport function get(req, res, next) {\\n  // As\xed es c\xf3mo resolvemos una `dynamic route` en Sapper,\\n  // obtenemos cada valor en su variable respectiva\\n  let [year, month, day, slug] = req.params.slug;\\n\\n  const postMarkdown = getPost(year, month, day, slug);\\n  const renderer = new marked.Renderer();\\n\\n  // marked provee una manera de formatear partes espec\xedficas del markdown\\n  // en este caso, el c\xf3digo\\n  renderer.code = (source, lang) => {\\n    const { value: highlighted } = hljs.highlight(lang, source);\\n    return `<pre class=\'language-${lang} overflow-x-auto\'><code>${highlighted}</code></pre>`;\\n  };\\n\\n  marked.use({ renderer });\\n\\n  const { data, content } = grayMatter(postMarkdown);\\n  const html = marked(content);\\n\\n  if (html) {\\n    res.writeHead(200, { \\"Content-Type\\": \\"application/json\\" });\\n    res.end(JSON.stringify({ html, ...data }));\\n  } else {\\n    res.writeHead(404, { \\"Content-Type\\": \\"application/json\\" });\\n    res.end(JSON.stringify({ message: `Not found` }));\\n  }\\n}\\n```\\n```html\\n\x3c!-- src/routes/blog/[...slug].svelte --\x3e\\n\\n<script context=\\"module\\">\\n  /*\\n   * Este m\xe9todo representa un paso en el ciclo de vida de un component en Sapper.\\n   *\\n   * \xdanicamente se ejecuta cuando el componente es montado. Aqu\xed haremos la petici\xf3n de nuestro JSON con la informaci\xf3n del post\\n   */\\n  export async function preload({ params }) {\\n    let [year, month, day, slug] = params.slug;\\n\\n    const res = await this.fetch(`blog/${year}/${month}/${day}/${slug}.json`);\\n    const data = await res.json();\\n\\n    if (res.status === 200) {\\n      return { post: data };\\n    } else {\\n      this.error(res.status, data.message);\\n    }\\n  }\\n<\/script>\\n\\n<script>\\n  export let post;\\n<\/script>\\n\\n<svelte:head>\\n  <title>{post.title} by {post.author}</title>\\n</svelte:head>\\n\\n<article>\\n  {@html post.html}\\n</article>\\n```\\n\\nDe esta forma se renderizar\xe1 el post. Ya puedes verlo en tu ambiente local yendo a [/blog/2020/08/08/hola-mundo](http://localhost:3000/blog/2020/08/08/hola-mundo).\\n\\nA\xfan hay un peque\xf1o detalle que debemos cubrir para cumplir con las reglas que _Sapper_ establece si queremos exportar nuestro peque\xf1o blog como un sitio est\xe1tico.\\n\\n> \\"... cualquier p\xe1gina que quieras que sea inclu\xedda en el sitio (est\xe1tico) exportado debe ser esta ligado con una etiqueta del tipo \\\\<a\\\\> o a\xf1adida c\xf3mo parametro de la opci\xf3n  --entry del comando `sapper export`\\" de [Sapper docs](https://sapper.svelte.dev/docs#How_it_works).\\n\\nDe acuerdo a la documentaci\xf3n, debemos incluir elementos **\\\\<a\\\\>** que apunten a nuestras p\xe1ginas generadas a partir de rutas din\xe1micas, para que al exportar el sitio estas tambi\xe9n se incluyan. Por eso programaremos el endpoint [/blog](http://localhost:3000/blog).\\n\\n```javascript\\n// src/routes/blog/index.json.js\\n\\nimport fs from \\"fs\\";\\nimport path from \\"path\\";\\nimport grayMatter from \\"gray-matter\\";\\n\\nfunction getAllPosts() {\\n  const posts = fs\\n    .readdirSync(\\"content\\")\\n    .map((fileName) => {\\n      const post = fs.readFileSync(path.resolve(\\"content\\", fileName), \\"utf-8\\");\\n      return grayMatter(post).data;\\n    })\\n    .sort((a, b) => {\\n      if (b.timestamp < a.timestamp) return -1;\\n      if (b.timestamp > a.timestamp) return 1;\\n\\n      return 0;\\n    });\\n  return posts;\\n}\\n\\nexport function get(req, res) {\\n  res.writeHead(200, { \\"Content-Type\\": \\"application/json\\" });\\n  res.end(JSON.stringify(getAllPosts()));\\n}\\n```\\n```html\\n\x3c!-- src/routes/blog/index.svelte --\x3e\\n\\n<script context=\\"module\\">\\n  export function preload({ params, query }) {\\n    return this.fetch(`blog.json`)\\n      .then((r) => r.json())\\n      .then((posts) => ({\\n        posts: posts.map((post) => {\\n          const timestamp = new Date(post.timestamp);\\n          return {\\n            ...post,\\n            timestamp,\\n            date: {\\n              year: timestamp.getFullYear(),\\n              month: `${timestamp.getMonth() + 1}`.padStart(2, `0`),\\n              day: `${timestamp.getDate()}`.padStart(2, `0`),\\n            },\\n          };\\n        }),\\n      }));\\n  }\\n<\/script>\\n\\n<script>\\n  export let posts;\\n<\/script>\\n\\n<svelte:head>\\n  <title>Blog | Mario Menj\xedvar</title>\\n</svelte:head>\\n\\n<ul>\\n  {#each posts as post}\\n  <li>\\n    <a\\n      rel=\\"prefetch\\"\\n      href=\\"blog/{post.date.year}/{post.date.month}/{post.date.day}/{post.slug}\\"\\n    >\\n      {post.title}\\n    </a>\\n    <p class=\\"blog-timestamp\\">\\n      Posted on {post.timestamp.toLocaleString()} by {post.author}\\n    </p>\\n  </li>\\n  {/each}\\n</ul>\\n```\\n\\nListo.\\n\\n## Sitio est\xe1tico\\n\\nAntes de desplegar nuestro fant\xe1stico blog, necesitamos asegurarnos que las p\xe1ginas est\xe1ticas se generaran sin problemas. Para eso necesitamos ejecutar lo siguiente en la l\xednea de comandos:\\n\\n```shell\\n[user@host my-blog]$ npm run export\\n[user@host my-blog]$ npx serve __sapper__/export\\n```\\n\\nSi no tienes ningun problema al acceder a este endpoint [/blog/2020/08/08/hola-mundo](http://localhost:5000/blog/2020/08/08/hola-mundo), \xa1Felicidades! solo nos queda desplegar el sitio.\\n\\n\\n## Despliegue: Github Pages\\n\\nNuestro sitio est\xe1tico ha sido generado y los archivos est\xe1n dentro de la carpeta `__sapper__/export`. Existen una infinidad de servicios que te permiten almacenar y servir este tipo de sitios, entre los m\xe1s populares tenemos Netlify o Github Pages. En este post te mostrar\xe9 c\xf3mo hacerlo con _Github Pages_.\\n\\nPodr\xedamos subir el folder `__sapper__/export` a un nuevo repositorio, activar la opci\xf3n _Github Pages_ y repetir este proceso manualmente cada vez que actualicemos nuestro sitio con un nuevo post. En mi opini\xf3n, hacerlo de manera manual le quita la diversi\xf3n. Afortunadamente, exite _Github Actions_.\\n\\nEl primer paso es crear dos repositorios en _Github_, el primero es el repositorio de nuestro projecto y el segundo el repositorio al cu\xe1l subiremos nuestro sitio est\xe1tico. En mi caso, [mariomenjr/mariomenjr](https://github.com/mariomenjr/mariomenjr) y [mariomenjr/mariomenjr.github.io](https://github.com/mariomenjr/mariomenjr.github.io) respectivamente. Una vez hecho esto, creamos los siguientes folders y archivos en el folder del projecto:\\n\\n```text\\n...\\n\u251c .github\\n\u2502 \u251c workflows\\n| | | deploy.yml\\n\u251c src\\n...\\n```\\n```yml\\n# .github/workflows/deploy.yml\\n\\nname: Build and deploy\\non:\\n    push:\\n      branches: \\n        # \xdanicamente cuando actualicemos master\\n        - master\\njobs:\\n  build-and-deploy:\\n    runs-on: ubuntu-latest\\n    steps:\\n      - name: Checkout \ud83d\udece\ufe0f\\n        uses: actions/checkout@v2.3.1\\n        with:\\n          persist-credentials: false\\n      - name: Install and build\\n        run: |\\n          npm install\\n          npm run export\\n      - name: Deploy \ud83d\ude80\\n        uses: JamesIves/github-pages-deploy-action@3.5.9\\n        with:\\n          # Limpiar\xe1 el despliegue previo\\n          CLEAN: true\\n          # Necesitamos crear este secret para el repositorio\\n          GITHUB_TOKEN: ${{ secrets.DEPLOY_MARIOMENJR }}\\n          BRANCH: master\\n          FOLDER: __sapper__/export\\n          BASE_BRANCH: master\\n          REPOSITORY_NAME: mariomenjr/mariomenjr.github.io\\n\\n```\\n\\nEl archivo anterior se explica en la [documentaci\xf3n](https://github.com/marketplace/actions/deploy-to-github-pages) de la acci\xf3n. En este post nos centraremos en un l\xednea 1 l\xednea: \\n\\n```yml\\n...\\njobs:\\n  build-and-deploy:\\n    ...\\n    steps:\\n      ...\\n      - name: Deploy \ud83d\ude80\\n        ...\\n        with:\\n          ...\\n          # Necesitamos crear este secret para el repositorio\\n          GITHUB_TOKEN: ${{ secrets.DEPLOY_MARIOMENJR }}\\n          ...\\n```\\n\\nEs esta l\xednea la que autoriza a la acci\xf3n a hacer cambios al repositorio `mariomenjr/mariomenjr.github.io`.\\n\\nPara generar tu _Github token_, dir\xedgete a [github.com/settings/tokens](https://github.com/settings/tokens), haz clic en el bot\xf3n `Generate new token`, escribe un nombre significativo en el campo `Note`, selecciona el _checkbox_ **_repo_** y, por \xfaltimo, haz clic en el bot\xf3n `Generate token`.\\n\\n![Github personal access tokens](https://imgur.com/HbbMgm7.png)\\n\\nNo olvides copiar el token.\\n\\nPor \xfaltimo, dir\xedgete al repositorio del projecto para crear la variable de entorno que incluir\xe1s en el archivo `deploy.yml`.\\n\\n![Add secret to repository](https://imgur.com/iuyGLdc.png)\\n\\n```yml\\n...\\njobs:\\n  build-and-deploy:\\n    ...\\n    steps:\\n      ...\\n      - name: Deploy \ud83d\ude80\\n        ...\\n        with:\\n          ...\\n          # Necesitamos crear este secret para el repositorio\\n          GITHUB_TOKEN: ${{ secrets.MI_VARIABLE }}\\n          ...\\n```\\n\\nListo. Tan pronto hagas push al repositorio del projecto, _Github Actions_ desplegar\xe1 tu sitio est\xe1tico.\\n\\n![Github Action Deployment](https://imgur.com/fHxzGuf.png)\\n\\nNo olvides activar la opci\xf3n Github Pages en el repositorio al que desplegaste el sitio.\\n\\n![Settings](https://imgur.com/tkl8wSO.png)\\n\\n![Github Pages Setting](https://imgur.com/86osvtX.png)\\n\\n## Conclusi\xf3n\\n\\nPuedes usar WordPress, Ghosts, incluso Jekyll si lo prefieres. El objetivo de este post es mostrarte como todas esas herramientas tienen su origen en cosas b\xe1sicas que con el tiempo se convierten en herramientas robustas listas para sacarles provecho.\\n\\nMe decid\xed a construir este blog, de esta manera, para poner en pr\xe1ctica el concepto [Aprender en P\xfablico](https://ricardoerl.com/blog/aprender-en-publico) que present\xf3 [Ricardo](https://ricardoerl.com), un desarrollador salvadore\xf1o, en un charla de [Caf\xe9 Digital](https://twitter.com/cafedigitalsv) y as\xed salir de mi zona de comfort. Cre\xe9me cuando te digo que me divert\xed.\\n\\n\\n## Referencias\\n\\n- [Building a blog with Svelte, Sapper, and Markdown](https://www.mahmoudashraf.dev/blog/build-a-blog-with-svelte-and-markdown/) \\n- [Sapper docs](https://sapper.svelte.dev/docs#How_it_works)\\n- [Static Svelte: JavaScript Blogging with 93% less JavaScript](https://www.swyx.io/writing/svelte-static/)\\n- [Markdown](https://es.wikipedia.org/wiki/Markdown)"}]}')}}]);