"use strict";(self.webpackChunkmariomenjr=self.webpackChunkmariomenjr||[]).push([[5564],{3905:function(e,a,n){n.d(a,{Zo:function(){return p},kt:function(){return c}});var r=n(7294);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function t(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?t(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,r,o=function(e,a){if(null==e)return{};var n,r,o={},t=Object.keys(e);for(r=0;r<t.length;r++)n=t[r],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(r=0;r<t.length;r++)n=t[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),m=function(e){var a=r.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},p=function(e){var a=m(e.components);return r.createElement(s.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},u=r.forwardRef((function(e,a){var n=e.components,o=e.mdxType,t=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=m(n),c=o,k=u["".concat(s,".").concat(c)]||u[c]||d[c]||t;return n?r.createElement(k,i(i({ref:a},p),{},{components:n})):r.createElement(k,i({ref:a},p))}));function c(e,a){var n=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var t=n.length,i=new Array(t);i[0]=u;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var m=2;m<t;m++)i[m]=n[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7686:function(e,a,n){n.r(a),n.d(a,{assets:function(){return p},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return l},metadata:function(){return m},toc:function(){return d}});var r=n(3117),o=n(102),t=(n(7294),n(3905)),i=["components"],l={slug:"2020/09/04/como-validar-formularios-en-react-sin-lagrimas",title:"C\xf3mo validar formularios en React, sin l\xe1grimas",author:"Mario Menj\xedvar",author_title:"Software Engineer",author_url:"https://github.com/mariomenjr",author_image_url:"https://avatars3.githubusercontent.com/u/1946936?s=460&v=4",tags:["formik","react","javascript"],keywords:["formik","espa\xf1ol","react","c\xf3mo","validar formulario react","formulario html","formulario react","validar formulario javascript","validar formulario"],date:new Date("2020-09-04T14:08:02.000Z"),description:"Hist\xf3ricamente, validar un formulario en React requiere de una cantidad impresionante de boilerplate que a\xf1ade complejidad innecesaria. Veamos c\xf3mo librarnos de eso.",image:"https://imgur.com/wm6iA0l.png"},s=void 0,m={permalink:"/blog/2020/09/04/como-validar-formularios-en-react-sin-lagrimas",editUrl:"https://github.com/mariomenjr/mariomenjr/edit/main/blog/2020-09-04_como-validar-formularios-en-react-sin-lagrimas.md",source:"@site/blog/2020-09-04_como-validar-formularios-en-react-sin-lagrimas.md",title:"C\xf3mo validar formularios en React, sin l\xe1grimas",description:"Hist\xf3ricamente, validar un formulario en React requiere de una cantidad impresionante de boilerplate que a\xf1ade complejidad innecesaria. Veamos c\xf3mo librarnos de eso.",date:"2020-09-04T14:08:02.000Z",formattedDate:"4 de septiembre de 2020",tags:[{label:"formik",permalink:"/blog/tags/formik"},{label:"react",permalink:"/blog/tags/react"},{label:"javascript",permalink:"/blog/tags/javascript"}],readingTime:7.155,hasTruncateMarker:!0,authors:[{name:"Mario Menj\xedvar",title:"Software Engineer",url:"https://github.com/mariomenjr",imageURL:"https://avatars3.githubusercontent.com/u/1946936?s=460&v=4"}],frontMatter:{slug:"2020/09/04/como-validar-formularios-en-react-sin-lagrimas",title:"C\xf3mo validar formularios en React, sin l\xe1grimas",author:"Mario Menj\xedvar",author_title:"Software Engineer",author_url:"https://github.com/mariomenjr",author_image_url:"https://avatars3.githubusercontent.com/u/1946936?s=460&v=4",tags:["formik","react","javascript"],keywords:["formik","espa\xf1ol","react","c\xf3mo","validar formulario react","formulario html","formulario react","validar formulario javascript","validar formulario"],date:"2020-09-04T14:08:02.000Z",description:"Hist\xf3ricamente, validar un formulario en React requiere de una cantidad impresionante de boilerplate que a\xf1ade complejidad innecesaria. Veamos c\xf3mo librarnos de eso.",image:"https://imgur.com/wm6iA0l.png"},prevItem:{title:"C\xf3mo trabajar con React Context y Hooks",permalink:"/blog/2021/04/04/como-trabajar-con-react-context-y-hooks"},nextItem:{title:"#Algoritmos: B\xfasqueda binaria",permalink:"/blog/2020/08/14/algoritmos-busqueda-binaria"}},p={authorsImageUrls:[void 0]},d=[{value:"Formik what?",id:"formik-what",level:2},{value:"Preparando el ejemplo",id:"preparando-el-ejemplo",level:2},{value:"Formik",id:"formik",level:2},{value:"Podemos hacerlo mejor",id:"podemos-hacerlo-mejor",level:2},{value:"Formik Field",id:"formik-field",level:3},{value:"Formik + Yup",id:"formik--yup",level:3},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2},{value:"Referencias",id:"referencias",level:2}],u={toc:d};function c(e){var a=e.components,n=(0,o.Z)(e,i);return(0,t.kt)("wrapper",(0,r.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"Todos los desarrolladores de software que trabajamos con React, absolutamente todos, hemos tenido ese tedioso ticket para crear y/o validar un formulario. Afortunadamente para ti, hoy te mostrar\xe9 la forma m\xe1s sencilla de cerrarlo: Formik."),(0,t.kt)("h2",{id:"formik-what"},"Formik what?"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://formik.org/docs/overview"},"Formik")," es uno de los paquetes de software de c\xf3digo abierto m\xe1s \xfatiles que podemos encontrar en el repositorio de ",(0,t.kt)("inlineCode",{parentName:"p"},"npm")," (o ",(0,t.kt)("inlineCode",{parentName:"p"},"yarn"),", como gustes). En palabras de uno de sus creadores, ",(0,t.kt)("a",{parentName:"p",href:"https://twitter.com/jaredpalmer"},"@JaredPalmer"),":"),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},'"Adm\xedtamoslo, los formularios requiren de much\xedsimo c\xf3digo en React. Para poner las cosas peor, la mayor\xeda de utilidades para construirlos hacen much\xedsima, demasiada magia que frecuentemente trae un costo al desempe\xf1o" de ',(0,t.kt)("a",{parentName:"p",href:"https://formik.org/docs/overview"},"Formik Docs"))),(0,t.kt)("p",null,"Para Jared y compa\xf1\xeda hab\xeda un beneficio en estandarizar los componentes de entrada y c\xf3mo los datos flu\xedan a trav\xe9s del Form. Es la raz\xf3n de ser de Formik."),(0,t.kt)("h2",{id:"preparando-el-ejemplo"},"Preparando el ejemplo"),(0,t.kt)("p",null,"Para ser pr\xe1cticos, vamos a hacer uso del famos\xedsimo toolchain ",(0,t.kt)("inlineCode",{parentName:"p"},"create-react-app"),". Ve a tu l\xednea de comandos y ejecuta:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-shell"},"$ npx create-react-app formik-sample\n$ cd formik-sample\n$ npm start\n")),(0,t.kt)("p",null,(0,t.kt)("img",{parentName:"p",src:"https://imgur.com/8tQZ4qO.png",alt:"React App by create-react-app"})),(0,t.kt)("p",null,"Ahora tenemos la base para trabajar nuestra aplicaci\xf3n React, pero necesitamos un form al cu\xe1l validar, para eso instalaremos el siguiente paquete:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-shell"},"$ npm install bootstrap reactstrap --save\n")),(0,t.kt)("p",null,"Este paquete componetiza la mayor\xeda de utilidades del popular framework CSS Bootstrap, lo cu\xe1l acelera nuestra habilidad de construir el layout del formulario. Una vez completa la instalaci\xf3n, copia y pega este c\xf3digo en tu archivo ",(0,t.kt)("inlineCode",{parentName:"p"},"src/App.js"),":"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'// src/App.js\n\nimport React from "react";\nimport {\n  Container,\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Card,\n  CardBody,\n  CardHeader,\n  FormFeedback,\n} from "reactstrap";\n\nfunction Formulario() {\n  return (\n    <Container className="p-5">\n      <Card>\n        <CardHeader></CardHeader>\n        <CardBody>\n          <Form>\n            <h1>Form</h1>\n            <FormGroup>\n              <Label for="name">Name</Label>\n              <Input type="text" name="name" placeholder="Woody Allen" />\n            </FormGroup>\n            <FormGroup>\n              <Label for="email">Email</Label>\n              <Input\n                type="email"\n                name="email"\n                placeholder="contoso@domain.com"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label for="password">Password</Label>\n              <Input\n                type="password"\n                name="password"\n                placeholder="Provide a password"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label for="bio">Text Area</Label>\n              <Input type="textarea" name="bio" />\n            </FormGroup>\n\n            <Button type="submit">Submit</Button>\n          </Form>\n        </CardBody>\n      </Card>\n    </Container>\n  );\n}\n\nexport default Formulario;\n')),(0,t.kt)("p",null,"Tambi\xe9n, a\xf1ade est\xe1 l\xednea en el archivo ",(0,t.kt)("inlineCode",{parentName:"p"},"src/index.js"),":"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},"// src/index.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'; // Importa bootstrap a la React App\n// ...\n")),(0,t.kt)("p",null,"Deber\xedas ver un formulario similar al de la imagen:"),(0,t.kt)("p",null,(0,t.kt)("img",{parentName:"p",src:"https://imgur.com/6NWfclG.png",alt:"Form built with reactstrap"})),(0,t.kt)("p",null,"Continuemos."),(0,t.kt)("h2",{id:"formik"},"Formik"),(0,t.kt)("p",null,"Llegados a este punto, ya estamos listos para ver la magia de Formik."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-shell"},"$ npm install formik --save\n")),(0,t.kt)("p",null,"Ya que la instalaci\xf3n haya finalizado, vamos a hacer unas modificaciones a nuestro c\xf3digo en ",(0,t.kt)("inlineCode",{parentName:"p"},"src/App.js"),"."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'// src/App.js\n\nimport React from "react";\nimport { Formik } from "formik"; // Importamos el component <Formik />\nimport {\n  Container,\n// ...\n')),(0,t.kt)("p",null,"Este componente debe encapsular nuestro formulario, c\xf3mo se muestra abajo. Formik se mantiene al tanto del estado del formulario y te provee valores, m\xe9todos reusables y manejadores de eventos a trav\xe9s de ",(0,t.kt)("inlineCode",{parentName:"p"},"props"),"."),(0,t.kt)("p",null,"Adem\xe1s, Formik sigue una regla b\xe1sica para simplificar el proceso de validaci\xf3n. Para que la librer\xeda puede relacionar un ",(0,t.kt)("inlineCode",{parentName:"p"},"initialValues")," a un ",(0,t.kt)("inlineCode",{parentName:"p"},"<Input>")," espec\xedfico, tanto la propiedad como el ",(0,t.kt)("inlineCode",{parentName:"p"},"name")," de ",(0,t.kt)("inlineCode",{parentName:"p"},"<Input>")," deben tener el mismo nombre. En el ejemplo de abajo, hemos definido 5 controles: ",(0,t.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,t.kt)("inlineCode",{parentName:"p"},"email"),", ",(0,t.kt)("inlineCode",{parentName:"p"},"password"),", ",(0,t.kt)("inlineCode",{parentName:"p"},"bio"),", and ",(0,t.kt)("inlineCode",{parentName:"p"},"multiple"),"."),(0,t.kt)("p",null,"Aunque no debemos olvidar que estamos en React, por lo qu\xe9 debemos manejar el cambio de los valores de los controles. Esto lo logramos con los manejadores provistos por Formik: ",(0,t.kt)("inlineCode",{parentName:"p"},"handleChange")," y ",(0,t.kt)("inlineCode",{parentName:"p"},"handleBlur"),". Sin olvidar que debemos renderizar el valor adecuado en el control, para eso haremos uso de la propiedad ",(0,t.kt)("inlineCode",{parentName:"p"},"values"),"."),(0,t.kt)("p",null,"Aparte de las \xfatiles ",(0,t.kt)("inlineCode",{parentName:"p"},"props")," provistas por Formik, tambi\xe9n el tag en s\xed mismo necesita de ciertas propiedades para funcionar:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"initialValues"),": Le dice a Formik de cuales valores debe mantenerse al tanto y buscar sus respectivos controles en el formulario."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"validate"),": Esta funci\xf3n recibe como parametro los ",(0,t.kt)("inlineCode",{parentName:"li"},"values")," de los cu\xe1les la librer\xeda est\xe1 al tanto para ser validados."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"onSubmit"),": Quiz\xe1 la funci\xf3n que m\xe1s te interese de la librer\xeda. Es aqu\xed d\xf3nde definimos que debe suceder si nuestro formulario ha sido validado con \xe9xito. Por ejemplo, postear los valores a un servicio del backend.")),(0,t.kt)("p",null,"Ya qu\xe9 hemos cubierto una breve explicaci\xf3n, es hora de ver todo esto en c\xf3digo."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'// src/App.js\n\n// ...\nfunction Formulario() {\n  return (\n    <Container className="p-5">\n      <Card>\n        <CardHeader></CardHeader>\n        <CardBody>\n          <Formik\n            initialValues={{\n              name: "",\n              email: "",\n              password: "",\n              bio: "",\n            }}\n            validate={(values) => {\n              const errors = {};\n\n              // We need a name\n              if (!values.name) errors.name = "Required";\n\n              // We need a valid e-mail\n              if (!values.email) errors.email = "Required";\n              else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email))\n                errors.email = "Invalid email address";\n\n              // We need a valid password\n              if (!values.password) errors.password = "Required";\n              else if (`${values.password}`.length < 7)\n                errors.password =\n                  "Password must be larger than 7 characters";\n\n              console.log({ values, errors });\n\n              return errors;\n            }}\n            onSubmit={(values, { setSubmitting }) => {\n              setTimeout(() => {\n                alert(JSON.stringify(values, null, 2));\n\n                setSubmitting(false);\n              }, 250);\n            }}\n          >\n            {(props) => {\n              const {\n                values,\n                errors,\n                touched,\n                handleChange,\n                handleBlur,\n                handleSubmit,\n                isSubmitting,\n                /* y otras m\xe1s */\n              } = props;\n              return (\n                <Form onSubmit={handleSubmit}>\n                  <h1>Form</h1>\n                  <FormGroup>\n                    <Label for="name">Name</Label>\n                    <Input\n                      type="text"\n                      name="name"\n                      placeholder="Woody Allen"\n                      invalid={errors.name && touched.name}\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      value={values.name}\n                    />\n                    <FormFeedback>{errors.name}</FormFeedback>\n                  </FormGroup>\n                  <FormGroup>\n                    <Label for="email">Email</Label>\n                    <Input\n                      type="email"\n                      name="email"\n                      placeholder="contoso@domain.com"\n                      invalid={errors.email && touched.email}\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      value={values.email}\n                    />\n                    <FormFeedback>{errors.email}</FormFeedback>\n                  </FormGroup>\n                  <FormGroup>\n                    <Label for="password">Password</Label>\n                    <Input\n                      type="password"\n                      name="password"\n                      placeholder="Provide a password"\n                      invalid={errors.password && touched.password}\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      value={values.password}\n                    />\n                    <FormFeedback>{errors.password}</FormFeedback>\n                  </FormGroup>\n                  <FormGroup>\n                    <Label for="bio">Text Area</Label>\n                    <Input\n                      type="textarea"\n                      name="bio"\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      value={values.name}\n                    />\n                  </FormGroup>\n\n                  <Button type="submit" disabled={isSubmitting}>\n                    {isSubmitting ? `Loading` : `Submit`}\n                  </Button>\n                </Form>\n              );\n            }}\n          </Formik>\n        </CardBody>\n      </Card>\n    </Container>\n  );\n}\n// ...\n')),(0,t.kt)("p",null,"El c\xf3digo de arriba nos permite validar el nombre, e-mail y contrase\xf1a en nuestro formulario. Al hacer clic en ",(0,t.kt)("inlineCode",{parentName:"p"},"Submit"),", sin completar un solo ",(0,t.kt)("inlineCode",{parentName:"p"},"<Input>"),", deber\xedas ver algo similar a esto:"),(0,t.kt)("p",null,(0,t.kt)("img",{parentName:"p",src:"https://imgur.com/IIVx4c9.png",alt:"Formulario validado"})),(0,t.kt)("p",null,"Listo, ya hemos validado el formulario. Lo \xfanico que nos queda es definir el manejador ",(0,t.kt)("inlineCode",{parentName:"p"},"onSubmit")," en el tag ",(0,t.kt)("inlineCode",{parentName:"p"},"Formik")," y tendremos la certeza de qu\xe9 si nuestro programa ejecuta ese ",(0,t.kt)("inlineCode",{parentName:"p"},"callback")," se debe a que nuestros datos han sido previamente validados."),(0,t.kt)("h2",{id:"podemos-hacerlo-mejor"},"Podemos hacerlo mejor"),(0,t.kt)("p",null,"Seguramente tienes alguna de estas preguntas en tu cabeza: \xbfPor qu\xe9 repetir la asignaci\xf3n de ",(0,t.kt)("inlineCode",{parentName:"p"},"handleChange")," y ",(0,t.kt)("inlineCode",{parentName:"p"},"handleBlur"),"? y \xbfPor qu\xe9 validar ",(0,t.kt)("em",{parentName:"p"},"manualmente")," cada propiedad paso a paso?. Cre\xe9me, yo tambi\xe9n me hice esas preguntas."),(0,t.kt)("p",null,"Para fortuna de qui\xe9n tenga que mantener este formulario, hay una forma m\xe1s sencilla de definir las validaci\xf3n y los controles de estado."),(0,t.kt)("h3",{id:"formik-field"},"Formik Field"),(0,t.kt)("p",null,"Para reducir el n\xfamero de veces que repetimos la asignaci\xf3n de los manejadores de eventos, vamos a importar otro elemento de la librer\xeda Formik."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'// src/App.js\n\n// ...\nimport { Formik, Field } from "formik"; // Importamos el component <Field />\n// ...\n')),(0,t.kt)("p",null,"Este componente nos permite ahorrarnos la asignaci\xf3n de manejadores y valor directamente al componente. Lo \xfanico que debemos hacer, y ya que estamos usando ",(0,t.kt)("inlineCode",{parentName:"p"},"reacstrap"),", es asignarlo a la propiedad ",(0,t.kt)("inlineCode",{parentName:"p"},"tag")," de cada elemento ",(0,t.kt)("inlineCode",{parentName:"p"},"<Input>"),". Formik se encargar\xe1 del resto."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'<Input\n  type="text"\n  name="name"\n  placeholder="Woody Allen"\n  invalid={errors.name && touched.name}\n- onChange={handleChange}\n- onBlur={handleBlur}\n- value={values.name}\n+ tag={Field}\n/>\n')),(0,t.kt)("p",null,"Es imprescindible que la propiedad ",(0,t.kt)("inlineCode",{parentName:"p"},"name")," del ",(0,t.kt)("inlineCode",{parentName:"p"},"<Input>")," tenga el mismo nombre a una propiedad en ",(0,t.kt)("inlineCode",{parentName:"p"},"initialValues"),"."),(0,t.kt)("h3",{id:"formik--yup"},"Formik + Yup"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://github.com/jquense/yup"},(0,t.kt)("inlineCode",{parentName:"a"},"Yup"))," es una librer\xeda que nos permite construir esquemas de conversi\xf3n y validaci\xf3n. El punto m\xe1s fuerte de ",(0,t.kt)("inlineCode",{parentName:"p"},"Yup")," es el n\xedvel de expresividad que las validaciones pueden alcanzar, sencillas o complejas."),(0,t.kt)("p",null,"De acuerdo a la ",(0,t.kt)("a",{parentName:"p",href:"https://formik.org/docs/guides/validation#validationschema"},"documentaci\xf3n")," de ",(0,t.kt)("inlineCode",{parentName:"p"},"Formik"),", ",(0,t.kt)("inlineCode",{parentName:"p"},"Yup")," es un ciudadano de primera clase en la librer\xeda por lo que posee una ",(0,t.kt)("inlineCode",{parentName:"p"},"prop")," especial en el elemento ",(0,t.kt)("inlineCode",{parentName:"p"},"<Formik>")," llamada ",(0,t.kt)("inlineCode",{parentName:"p"},"validationSchema"),"."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-shell"},"$ npm install yup --save\n")),(0,t.kt)("p",null,"Una vez instalamos ",(0,t.kt)("inlineCode",{parentName:"p"},"Yup"),", debemos importarlo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'// src/App.js\n\n// ...\nimport * as Yup from "yup"; // Importando Yup\nimport {\n  Container,\n// ...\n')),(0,t.kt)("p",null,"Regresemos al c\xf3digo del componente ",(0,t.kt)("inlineCode",{parentName:"p"},"Formulario"),". Justo en la propiedades del elmento ",(0,t.kt)("inlineCode",{parentName:"p"},"<Formik>")," vamos a eliminar la propiedad ",(0,t.kt)("inlineCode",{parentName:"p"},"validate")," y en su lugar asignaremos la propiedad ",(0,t.kt)("inlineCode",{parentName:"p"},"validationSchema"),"."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'<Formik\n  initialValues={{\n    name: "",\n    email: "",\n    password: "",\n    bio: "",\n  }}\n  validationSchema={Yup.object().shape({\n    name: Yup.string().required("Required"),\n    email: Yup.string().email("Invalid email").required("Required"),\n    password: Yup.string().min(8, "Password is too short").required("Required"),\n  })}\n  onSubmit={(values, { setSubmitting }) => {\n    setTimeout(() => {\n      alert(JSON.stringify(values, null, 2));\n\n      setSubmitting(false);\n    }, 250);\n  }}\n>\n')),(0,t.kt)("p",null,"Por \xfaltimo, podemos llenar nuestro formulario y ver que una vez validado, el ",(0,t.kt)("inlineCode",{parentName:"p"},"callback")," en la propiedad ",(0,t.kt)("inlineCode",{parentName:"p"},"onSubmit")," del elemento ",(0,t.kt)("inlineCode",{parentName:"p"},"<Formik>")," es ejecutada."),(0,t.kt)("p",null,(0,t.kt)("img",{parentName:"p",src:"https://imgur.com/wm6iA0l.png",alt:"Formulario completo"})),(0,t.kt)("h2",{id:"conclusi\xf3n"},"Conclusi\xf3n"),(0,t.kt)("p",null,"Espero este post te sea de mucha ayuda. En mi experiencia con React, Formik me ha facilitado el validar formularios en React al proveerme de m\xe9todos que me permiten ajustar a cada momento los valores y las validaciones necesarias. La expresividad del c\xf3digo es de gran valor ya que permite escalar y/o mantener de una forma sencilla sin reinventar la rueda para cada formulario."),(0,t.kt)("h2",{id:"referencias"},"Referencias"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"https://formik.org/docs/overview"},"Formik documentation"))))}c.isMDXComponent=!0}}]);