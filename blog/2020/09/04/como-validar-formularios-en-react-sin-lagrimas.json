{"author":"Mario Menjívar","slug":"como-validar-formularios-en-react-sin-lagrimas","title":"Cómo validar formularios en React, sin lágrimas","timestamp":"2020-09-04T07:08:02.000-07:00","brief":"Históricamente, validar un formulario en React requiere de una cantidad impresionante de boilerplate que añade complejidad innecesaria. Veamos cómo librarnos de eso.","keywords":"formik,español,react,cómo,validar formularios react,binaria,blog","cover":"https://imgur.com/wm6iA0l.png","endpoint":"2020/09/04/como-validar-formularios-en-react-sin-lagrimas","content":"<h1 id=\"cómo-validar-formularios-en-react-sin-lágrimas\">Cómo validar formularios en React, sin lágrimas</h1>\n<p>Todos los desarrolladores de software que trabajan con React, absolutamente todos, hemos tenido ese tedioso ticket para crear y/o validar un formulario. Afortunadamente para ti, hoy te mostraré la forma más sencilla de cerrarlo: Formik.</p>\n<h2 id=\"formik-what\">Formik what?</h2>\n<p><a href=\"https://formik.org/docs/overview\">Formik</a> es uno de los paquetes de software de código abierto más útiles que podemos encontrar en el repositorio de <code>npm</code> (o <code>yarn</code>, como gustes). En palabras de uno de sus creadores, <a href=\"https://twitter.com/jaredpalmer\">@JaredPalmer</a>:</p>\n<blockquote>\n<p>&quot;Admítamoslo, los formularios requiren de muchísimo código en React. Para poner las cosas peor, la mayoría de utilidades para construirlos hacen muchísima, demasiada magia que frecuentemente trae un costo al desempeño&quot; de <a href=\"https://formik.org/docs/overview\">Formik Docs</a></p>\n</blockquote>\n<p>Para Jared y compañía había un beneficio en estandarizar los componentes de entrada y cómo los datos fluían a través del Form. Es la razón de ser de Formik.</p>\n<h2 id=\"preparando-el-ejemplo\">Preparando el ejemplo</h2>\n<p>Para ser prácticos, vamos a hacer uso del famosísimo toolchain <code>create-react-app</code>. Ve a tu línea de comandos y ejecuta:</p>\n<pre class='language-bash overflow-x-auto'><code>$ npx create-react-app formik-sample\n$ <span class=\"hljs-built_in\">cd</span> formik-sample\n$ npm start</code></pre><p><img src=\"https://imgur.com/8tQZ4qO.png\" alt=\"React App by create-react-app\"></p>\n<p>Ahora tenemos la base para trabajar nuestra aplicación React, pero necesitamos un form al cuál validar, para eso instalaremos el siguiente paquete:</p>\n<pre class='language-bash overflow-x-auto'><code>$ npm install bootstrap reactstrap --save</code></pre><p>Este paquete componetiza la mayoría de utilidades del popular framework CSS Bootstrap, lo cuál acelera nuestra habilidad de construir el layout del formulario. Una vez completa la instalación, copia y pega este código en tu archivo <code>src/App.js</code>:</p>\n<pre class='language-javascript overflow-x-auto'><code><span class=\"hljs-comment\">// src/App.js</span>\n\n<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> {\n  Container,\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Card,\n  CardBody,\n  CardHeader,\n  FormFeedback,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;reactstrap&quot;</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Formulario</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Container</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;p-5&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CardHeader</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">CardHeader</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CardBody</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Form</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Form<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormGroup</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;name&quot;</span>&gt;</span>Name<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Label</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;Woody Allen&quot;</span> /&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormGroup</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormGroup</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;email&quot;</span>&gt;</span>Email<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Label</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Input</span>\n                <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;email&quot;</span>\n                <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;email&quot;</span>\n                <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;contoso@domain.com&quot;</span>\n              /&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormGroup</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormGroup</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;password&quot;</span>&gt;</span>Password<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Label</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Input</span>\n                <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span>\n                <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span>\n                <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;Provide a password&quot;</span>\n              /&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormGroup</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormGroup</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;bio&quot;</span>&gt;</span>Text Area<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Label</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;textarea&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;bio&quot;</span> /&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormGroup</span>&gt;</span>\n\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span>Submit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Form</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">CardBody</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Container</span>&gt;</span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Formulario;</code></pre><p>También, añade está línea en el archivo <code>src/index.js</code>:</p>\n<pre class='language-javascript overflow-x-auto'><code><span class=\"hljs-comment\">// src/index.js</span>\n\n<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-dom&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;bootstrap/dist/css/bootstrap.css&#x27;</span>; <span class=\"hljs-comment\">// Importa bootstrap a la React App</span>\n<span class=\"hljs-comment\">// ...</span></code></pre><p>Deberías ver un formulario similar al de la imagen:</p>\n<p><img src=\"https://imgur.com/6NWfclG.png\" alt=\"Form built with reactstrap\"></p>\n<p>Continuemos.</p>\n<h2 id=\"formik\">Formik</h2>\n<p>Llegados a este punto, ya estamos listos para ver la magia de Formik.</p>\n<pre class='language-bash overflow-x-auto'><code>$ npm install formik --save</code></pre><p>Ya que la instalación haya finalizado, vamos a hacer unas modificaciones a nuestro código en <code>src/App.js</code>.</p>\n<pre class='language-javascript overflow-x-auto'><code><span class=\"hljs-comment\">// src/App.js</span>\n\n<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { Formik } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;formik&quot;</span>; <span class=\"hljs-comment\">// Importamos el component &lt;Formik /&gt;</span>\n<span class=\"hljs-keyword\">import</span> {\n  Container,\n<span class=\"hljs-comment\">// ...</span></code></pre><p>Este componente debe encapsular a nuestro formulario, cómo se muestra abajo. Formik se mantiene al tanto del estado del formulario y te provee valores, métodos reusables y manejadores de eventos a través de <code>props</code>.</p>\n<p>Además, Formik sigue una regla básica para simplificar el proceso de validación. Para que la librería puede relacionar un <code>initialValues</code> a un <code>&lt;Input&gt;</code> específico, tanto la propiedad como el <code>name</code> de <code>&lt;Input&gt;</code> deben tener el mismo nombre. En el ejemplo de abajo, hemos definido 5 controles: <code>name</code>, <code>email</code>, <code>password</code>, <code>bio</code>, and <code>multiple</code>.</p>\n<p>Aunque no debemos olvidar que estamos en React, por lo qué debemos manejar el cambio de los valores de los controles. Esto lo logramos con los manejadores provistos por Formik: <code>handleChange</code> y <code>handleBlur</code>. Sin olvidar que debemos renderizar el valor adecuado en el control, para eso haremos uso de la propiedad <code>values</code>.</p>\n<p>Aparte de las útiles <code>props</code> provistas por Formik, también el tag en sí mismo necesita de ciertas propiedades para funcionar:</p>\n<ul>\n<li><code>initialValues</code>: Le dice a Formik de cuales valores debe mantenerse al tanto y buscar sus respectivos controles en el formulario.</li>\n<li><code>validate</code>: Esta función recibe como parametro los <code>values</code> de los cuáles la librería está al tanto para ser validados.</li>\n<li><code>onSubmit</code>: Quizá la función que más te interese de la librería. Es aquí dónde definimos que debe suceder si nuestro formulario ha sido validado con éxito. Por ejemplo, postear los valores a un servicio del backend.</li>\n</ul>\n<p>Ya qué hemos cubierto una breve explicación, es hora de ver todo esto en código.</p>\n<pre class='language-javascript overflow-x-auto'><code><span class=\"hljs-comment\">// src/App.js</span>\n\n<span class=\"hljs-comment\">// ...</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Formulario</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Container</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;p-5&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CardHeader</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">CardHeader</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CardBody</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Formik</span>\n            <span class=\"hljs-attr\">initialValues</span>=<span class=\"hljs-string\">{{</span>\n              <span class=\"hljs-attr\">name:</span> &quot;&quot;,\n              <span class=\"hljs-attr\">email:</span> &quot;&quot;,\n              <span class=\"hljs-attr\">password:</span> &quot;&quot;,\n              <span class=\"hljs-attr\">bio:</span> &quot;&quot;,\n            }}\n            <span class=\"hljs-attr\">validate</span>=<span class=\"hljs-string\">{(values)</span> =&gt;</span> {\n              const errors = {};\n\n              // We need a name\n              if (!values.name) errors.name = &quot;Required&quot;;\n\n              // We need a valid e-mail\n              if (!values.email) errors.email = &quot;Required&quot;;\n              else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email))\n                errors.email = &quot;Invalid email address&quot;;\n\n              // We need a valid password\n              if (!values.password) errors.password = &quot;Required&quot;;\n              else if (`${values.password}`.length <span class=\"hljs-tag\">&lt; <span class=\"hljs-attr\">7</span>)\n                <span class=\"hljs-attr\">errors.password</span> =\n                  <span class=\"hljs-string\">&quot;Password must be larger than 7 characters&quot;</span>;\n\n              <span class=\"hljs-attr\">console.log</span>({ <span class=\"hljs-attr\">values</span>, <span class=\"hljs-attr\">errors</span> });\n\n              <span class=\"hljs-attr\">return</span> <span class=\"hljs-attr\">errors</span>;\n            }}\n            <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{(values,</span> { <span class=\"hljs-attr\">setSubmitting</span> }) =&gt;</span> {\n              setTimeout(() =&gt; {\n                alert(JSON.stringify(values, null, 2));\n\n                setSubmitting(false);\n              }, 250);\n            }}\n          &gt;\n            {(props) =&gt; {\n              const {\n                values,\n                errors,\n                touched,\n                handleChange,\n                handleBlur,\n                handleSubmit,\n                isSubmitting,\n                /* y otras más */\n              } = props;\n              return (\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Form</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{handleSubmit}</span>&gt;</span>\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Form<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormGroup</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;name&quot;</span>&gt;</span>Name<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Label</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Input</span>\n                      <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>\n                      <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span>\n                      <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;Woody Allen&quot;</span>\n                      <span class=\"hljs-attr\">invalid</span>=<span class=\"hljs-string\">{errors.name</span> &amp;&amp; <span class=\"hljs-attr\">touched.name</span>}\n                      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleChange}</span>\n                      <span class=\"hljs-attr\">onBlur</span>=<span class=\"hljs-string\">{handleBlur}</span>\n                      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{values.name}</span>\n                    /&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormFeedback</span>&gt;</span>{errors.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormFeedback</span>&gt;</span>\n                  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormGroup</span>&gt;</span>\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormGroup</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;email&quot;</span>&gt;</span>Email<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Label</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Input</span>\n                      <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;email&quot;</span>\n                      <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;email&quot;</span>\n                      <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;contoso@domain.com&quot;</span>\n                      <span class=\"hljs-attr\">invalid</span>=<span class=\"hljs-string\">{errors.email</span> &amp;&amp; <span class=\"hljs-attr\">touched.email</span>}\n                      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleChange}</span>\n                      <span class=\"hljs-attr\">onBlur</span>=<span class=\"hljs-string\">{handleBlur}</span>\n                      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{values.email}</span>\n                    /&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormFeedback</span>&gt;</span>{errors.email}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormFeedback</span>&gt;</span>\n                  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormGroup</span>&gt;</span>\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormGroup</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;password&quot;</span>&gt;</span>Password<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Label</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Input</span>\n                      <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span>\n                      <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span>\n                      <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;Provide a password&quot;</span>\n                      <span class=\"hljs-attr\">invalid</span>=<span class=\"hljs-string\">{errors.password</span> &amp;&amp; <span class=\"hljs-attr\">touched.password</span>}\n                      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleChange}</span>\n                      <span class=\"hljs-attr\">onBlur</span>=<span class=\"hljs-string\">{handleBlur}</span>\n                      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{values.password}</span>\n                    /&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormFeedback</span>&gt;</span>{errors.password}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormFeedback</span>&gt;</span>\n                  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormGroup</span>&gt;</span>\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormGroup</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;bio&quot;</span>&gt;</span>Text Area<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Label</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Input</span>\n                      <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;textarea&quot;</span>\n                      <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;bio&quot;</span>\n                      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleChange}</span>\n                      <span class=\"hljs-attr\">onBlur</span>=<span class=\"hljs-string\">{handleBlur}</span>\n                      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{values.name}</span>\n                    /&gt;</span>\n                  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormGroup</span>&gt;</span>\n\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">disabled</span>=<span class=\"hljs-string\">{isSubmitting}</span>&gt;</span>\n                    {isSubmitting ? `Loading` : `Submit`}\n                  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Form</span>&gt;</span>\n              );\n            }}\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Formik</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">CardBody</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Container</span>&gt;</span></span>\n  );\n}\n<span class=\"hljs-comment\">// ...</span></code></pre><p>El código de arriba nos permite validar el nombre, e-mail y contraseña en nuestro formulario. Al hacer clic en <code>Submit</code>, sin completar un solo <code>&lt;Input&gt;</code>, deberías ver algo similar a esto:</p>\n<p><img src=\"https://imgur.com/IIVx4c9.png\" alt=\"Formulario validado\"></p>\n<p>Listo, ya hemos validado el formulario. Lo único que nos queda es definir el manejador <code>onSubmit</code> en el tag <code>Formik</code> y tendremos la certeza de qué si nuestro programa ejecuta ese <code>callback</code> se debe a que nuestros datos han sido previamente validados.</p>\n<h2 id=\"podemos-hacerlo-mejor\">Podemos hacerlo mejor</h2>\n<p>Seguramente tienes alguna de estas preguntas en tu cabeza: ¿Por qué repetir la asignación de <code>handleChange</code> y <code>handleBlur</code>? y ¿Por qué validar <em>manualmente</em> cada propiedad paso a paso?. Creéme, yo también me hice esas preguntas.</p>\n<p>Para fortuna de quién tenga que mantener este formulario, hay una forma más sencilla de definir las validación y los controles de estado.</p>\n<h3 id=\"formik-field\">Formik Field</h3>\n<p>Para reducir el número de veces que repetimos la asignación de los manejadores de eventos, vamos a importar otro elemento de la librería Formik.</p>\n<pre class='language-javascript overflow-x-auto'><code><span class=\"hljs-comment\">// src/App.js</span>\n\n<span class=\"hljs-comment\">// ...</span>\n<span class=\"hljs-keyword\">import</span> { Formik, Field } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;formik&quot;</span>; <span class=\"hljs-comment\">// Importamos el component &lt;Field /&gt;</span>\n<span class=\"hljs-comment\">// ...</span></code></pre><p>Este componente nos permite ahorrarnos la asignación de manejadores y valor directamente al componente. Lo único que debemos hacer, y ya que estamos usando <code>reacstrap</code>, es asignarlo a la propiedad <code>tag</code> de cada elemento <code>&lt;Input&gt;</code>. Formik se encargará del resto.</p>\n<pre class='language-javascript overflow-x-auto'><code>&lt;Input\n  type=<span class=\"hljs-string\">&quot;text&quot;</span>\n  name=<span class=\"hljs-string\">&quot;name&quot;</span>\n  placeholder=<span class=\"hljs-string\">&quot;Woody Allen&quot;</span>\n  invalid={errors.name &amp;&amp; touched.name}\n- onChange={handleChange}\n- onBlur={handleBlur}\n- value={values.name}\n+ tag={Field}\n/&gt;</code></pre><p>Es imprescindible que la propiedad <code>name</code> del <code>&lt;Input&gt;</code> tenga el mismo nombre a una propiedad en <code>initialValues</code>.</p>\n<h3 id=\"formik--yup\">Formik + Yup</h3>\n<p><a href=\"https://github.com/jquense/yup\"><code>Yup</code></a> es una librería que nos permite construir esquemas de conversión y validación. El punto más fuerte de <code>Yup</code> es el nível de expresividad que las validaciones pueden alcanzar, sencillas o complejas.</p>\n<p>De acuerdo a la <a href=\"https://formik.org/docs/guides/validation#validationschema\">documentación</a> de <code>Formik</code>, <code>Yup</code> es un ciudadano de primera clase en la librería por lo que posee una <code>prop</code> especial en el elemento <code>&lt;Formik&gt;</code> llamada <code>validationSchema</code>.</p>\n<pre class='language-bash overflow-x-auto'><code>$ npm install yup --save</code></pre><p>Una vez instalamos <code>Yup</code>, debemos importarlo:</p>\n<pre class='language-javascript overflow-x-auto'><code><span class=\"hljs-comment\">// src/App.js</span>\n\n<span class=\"hljs-comment\">// ...</span>\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> Yup <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;yup&quot;</span>; <span class=\"hljs-comment\">// Importando Yup</span>\n<span class=\"hljs-keyword\">import</span> {\n  Container,\n<span class=\"hljs-comment\">// ...</span></code></pre><p>Regresemos al código del componente <code>Formulario</code>. Justo en la propiedades del elmento <code>&lt;Formik&gt;</code> vamos a eliminar la propiedad <code>validate</code> y en su lugar asignaremos la propiedad <code>validationSchema</code>.</p>\n<pre class='language-javascript overflow-x-auto'><code>&lt;Formik\n  initialValues={{\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n    <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n    <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n    <span class=\"hljs-attr\">bio</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n  }}\n  validationSchema={Yup.object().shape({\n    <span class=\"hljs-attr\">name</span>: Yup.string().required(<span class=\"hljs-string\">&quot;Required&quot;</span>),\n    <span class=\"hljs-attr\">email</span>: Yup.string().email(<span class=\"hljs-string\">&quot;Invalid email&quot;</span>).required(<span class=\"hljs-string\">&quot;Required&quot;</span>),\n    <span class=\"hljs-attr\">password</span>: Yup.string().min(<span class=\"hljs-number\">8</span>, <span class=\"hljs-string\">&quot;Password is too short&quot;</span>).required(<span class=\"hljs-string\">&quot;Required&quot;</span>),\n  })}\n  onSubmit={<span class=\"hljs-function\">(<span class=\"hljs-params\">values, { setSubmitting }</span>) =&gt;</span> {\n    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      alert(<span class=\"hljs-built_in\">JSON</span>.stringify(values, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));\n\n      setSubmitting(<span class=\"hljs-literal\">false</span>);\n    }, <span class=\"hljs-number\">250</span>);\n  }}\n&gt;</code></pre><p>Por último, podemos llenar nuestro formulario y ver que una vez validado, el <code>callback</code> en la propiedad <code>onSubmit</code> del elemento <code>&lt;Formik&gt;</code> es ejecutada.</p>\n<p><img src=\"https://imgur.com/wm6iA0l.png\" alt=\"Formulario completo\"></p>\n<h2 id=\"conclusión\">Conclusión</h2>\n<p>Espero este post te sea de mucha ayuda. En mi experiencia con React, Formik ha facilitado el trabajo con lo que a validar formularios se refiere.</p>\n<h2 id=\"referencias\">Referencias</h2>\n<ul>\n<li><a href=\"https://formik.org/docs/overview\">Formik documentation</a></li>\n</ul>\n"}