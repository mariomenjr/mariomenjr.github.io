{"author":"Mario Menjívar","slug":"como-crear-un-blog-a-base-de-markdown-y-javascript","title":"Cómo crear un blog a base de markdown y javascript","timestamp":"2020-08-08T10:23:17.000-07:00","brief":"Seguramente te haz hecho la siguiente pregunta: ¿Cómo hostear mi blog sin pagar un centavo? En este post te explico una de tantas alternativas.","keywords":"javascript,svelte,blog,markdown,howto","endpoint":"2020/08/08/como-crear-un-blog-a-base-de-markdown-y-javascript","content":"<h1 id=\"cómo-crear-un-blog-a-base-de-markdown-y-javascript\">Cómo crear un blog a base de markdown y JavaScript</h1>\n<p>Seguramente te haz hecho la siguiente pregunta: ¿Cómo hostear mi blog sin pagar un centavo? En este post te explico una de tantas alternativas.</p>\n<h2 id=\"empecemos\">Empecemos</h2>\n<p>Como ya mencioné, hay muchas formas de lograrlo. Fundamentalmente una página web no es más que HTML, CSS y JavaScript. Herramientas como <a href=\"https://jekyllrb.com/\">Jekyll</a> aprovecha esta regla de oro para ayudarte a generar y administrar posts fácilmente.</p>\n<p>Pero, ¿Qué pasa si queremos tomar ventaja de todas las herramientas disponibles en el ecosistema JavaScript que se han establecido en los últimos 10 años? Tengo 3 respuestas concretas a esa pregunta: <a href=\"https://www.gatsbyjs.org/\">Gatsby</a>, <a href=\"https://nextjs.org/\">Next.js</a> y <a href=\"https://sapper.svelte.dev/docs\">Sapper</a>.</p>\n<p><em>In a nutshell</em>, estos tres frameworks permiten hacer algo muy importante para cumplir con nuestro objetivo, generar sitios estáticos. En este post nos centraremos en <em>Sapper</em>.</p>\n<h2 id=\"¿por-qué-sapper\">¿Por qué Sapper?</h2>\n<p>Svelte es el nuevo chico de la cuadra. Su propuesta insignia es mover el proceso reactivo al lenguaje, sin mediadores del tipo Virtual DOM, cómo lo hace React o Vue. Esto disminuye el tamaño del <em>bundle</em> así cómo la velocidad de ejecución.</p>\n<p>Puedes echar un vistazo a la <a href=\"https://www.swyx.io/writing/svelte-static/\">comparativa</a> entre Gatsby y Sapper realizada por <a href=\"https://twitter.com/swyx\">Shawn Wang</a>, un popular desarrollador en <a href=\"https://egghead.io/\">egghead.io</a>. Se muestra una reducción del 93% en el tamaño del <em>bundle</em> con Sapper.</p>\n<h2 id=\"setup\">Setup</h2>\n<p>Para instalar Sapper, basta con ejecutar los siguientes comandos:</p>\n<pre class='language-bash overflow-x-auto'><code>[user@host ~]$ npx degit <span class=\"hljs-string\">&quot;sveltejs/sapper-template#rollup&quot;</span> my-blog\n[user@host ~]$ <span class=\"hljs-built_in\">cd</span> my-blog\n[user@host my-blog]$ npm install\n[user@host my-blog]$ npm run dev</code></pre><p>En el folder del project <em>my-blog</em>, nos interesan los siguientes files:</p>\n<pre class='language-text overflow-x-auto'><code>...\n├ src\n│ ├ routes\n| | ├ blog\n| | | ├ _posts.js\n| | | ├ [slug].json.js\n| | | ├ [slug].svelte\n| | | ├ index.json.js\n| | | ├ index.svelte\n...</code></pre><p>De paso creamos el siguiente directorio y archivo:</p>\n<pre class='language-text overflow-x-auto'><code>...\n+ ├ content\n+ │ ├ 2020-08-08_hola-mundo.md\n  ├ src\n  │ ├ routes\n...</code></pre><p>Necesitamos instalar los siguientes paquetes:</p>\n<pre class='language-bash overflow-x-auto'><code>[user@host my-blog]$ npm i gray-matter highlight.js marked</code></pre><p>En mi caso, quiero que los posts estén ordenados por su fecha de publicación y que esto se refleje en la URL. Tendremos que hacer unos cambios a los archivos mencionados, primero renombramos dos archivos:</p>\n<pre class='language-text overflow-x-auto'><code>...\n- | | | ├ [slug].json.js\n- | | | ├ [slug].svelte\n+ | | | ├ [...slug].json.js\n+ | | | ├ [...slug].svelte\n...</code></pre><p>Luego, reemplazamos el contenido de la siguiente manera:</p>\n<pre class='language-javascript overflow-x-auto'><code><span class=\"hljs-comment\">// src/routes/blog/[...slug].json.js</span>\n\n<span class=\"hljs-keyword\">import</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;fs&quot;</span>;\n<span class=\"hljs-keyword\">import</span> path <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;path&quot;</span>;\n<span class=\"hljs-keyword\">import</span> marked <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;marked&quot;</span>;\n<span class=\"hljs-keyword\">import</span> hljs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;highlight.js&quot;</span>;\n<span class=\"hljs-keyword\">import</span> grayMatter <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;gray-matter&quot;</span>;\n\n<span class=\"hljs-comment\">/*\n * Para obtener el contenido del post\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getPost</span>(<span class=\"hljs-params\">year, month, day, fileName</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> fs.readFileSync(\n    path.resolve(<span class=\"hljs-string\">&quot;content&quot;</span>, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${year}</span>-<span class=\"hljs-subst\">${month}</span>-<span class=\"hljs-subst\">${day}</span>_<span class=\"hljs-subst\">${fileName}</span>.md`</span>),\n    <span class=\"hljs-string\">&quot;utf-8&quot;</span>\n  );\n}\n\n<span class=\"hljs-comment\">/*\n * En Sapper, este método responde a una request a través del método GET\n * En nuestro caso, la request de un JSON\n */</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">req, res, next</span>) </span>{\n  <span class=\"hljs-comment\">// Así es cómo resolvemos una `dynamic route` en Sapper,</span>\n  <span class=\"hljs-comment\">// obtenemos cada valor en su variable respectiva</span>\n  <span class=\"hljs-keyword\">let</span> [year, month, day, slug] = req.params.slug;\n\n  <span class=\"hljs-keyword\">const</span> postMarkdown = getPost(year, month, day, slug);\n  <span class=\"hljs-keyword\">const</span> renderer = <span class=\"hljs-keyword\">new</span> marked.Renderer();\n\n  <span class=\"hljs-comment\">// marked provee una manera de formatear partes específicas del markdown</span>\n  <span class=\"hljs-comment\">// en este caso, el código</span>\n  renderer.code = <span class=\"hljs-function\">(<span class=\"hljs-params\">source, lang</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> { <span class=\"hljs-attr\">value</span>: highlighted } = hljs.highlight(lang, source);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`&lt;pre class=&#x27;language-<span class=\"hljs-subst\">${lang}</span> overflow-x-auto&#x27;&gt;&lt;code&gt;<span class=\"hljs-subst\">${highlighted}</span>&lt;/code&gt;&lt;/pre&gt;`</span>;\n  };\n\n  marked.use({ renderer });\n\n  <span class=\"hljs-keyword\">const</span> { data, content } = grayMatter(postMarkdown);\n  <span class=\"hljs-keyword\">const</span> html = marked(content);\n\n  <span class=\"hljs-keyword\">if</span> (html) {\n    res.writeHead(<span class=\"hljs-number\">200</span>, { <span class=\"hljs-string\">&quot;Content-Type&quot;</span>: <span class=\"hljs-string\">&quot;application/json&quot;</span> });\n    res.end(<span class=\"hljs-built_in\">JSON</span>.stringify({ html, ...data }));\n  } <span class=\"hljs-keyword\">else</span> {\n    res.writeHead(<span class=\"hljs-number\">404</span>, { <span class=\"hljs-string\">&quot;Content-Type&quot;</span>: <span class=\"hljs-string\">&quot;application/json&quot;</span> });\n    res.end(<span class=\"hljs-built_in\">JSON</span>.stringify({ <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">`Not found`</span> }));\n  }\n}</code></pre><pre class='language-html overflow-x-auto'><code><span class=\"hljs-comment\">&lt;!-- src/routes/blog/[...slug].svelte --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">context</span>=<span class=\"hljs-string\">&quot;module&quot;</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-comment\">/*\n   * Este método representa un paso en el ciclo de vida de un component en Sapper.\n   *\n   * Únicamente se ejecuta cuando el componente es montado. Aquí haremos la petición de nuestro JSON con la información del post\n   */</span>\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">preload</span>(<span class=\"hljs-params\">{ params }</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> [year, month, day, slug] = params.slug;\n\n    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.fetch(<span class=\"hljs-string\">`blog/<span class=\"hljs-subst\">${year}</span>/<span class=\"hljs-subst\">${month}</span>/<span class=\"hljs-subst\">${day}</span>/<span class=\"hljs-subst\">${slug}</span>.json`</span>);\n    <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> res.json();\n\n    <span class=\"hljs-keyword\">if</span> (res.status === <span class=\"hljs-number\">200</span>) {\n      <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">post</span>: data };\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-built_in\">this</span>.error(res.status, data.message);\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> post;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svelte:head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>{post.title} by {post.author}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svelte:head</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">article</span>&gt;</span>\n  {@html post.html}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">article</span>&gt;</span></code></pre><p>Acabamos de programar cómo se renderizará el post. Ya deberías poder verlo en <a href=\"http://localhost:3000/blog/2020/08/08/hola-mundo\">/blog/2020/08/08/hola-mundo</a> en tu local.</p>\n<p>Podrías pensar que ya terminamos, pero hay un pequeño detalle que debemos cubrir para cumplir con las reglas de Sapper si queremos exportar nuestro pequeño blog como un sitio estático.</p>\n<blockquote>\n<p>&quot;... any pages you want to be included in the exported site must either be reachable by &lt;a&gt; elements or added to the --entry option of the sapper export command.&quot;\nat <a href=\"https://sapper.svelte.dev/docs#How_it_works\">sapper-export</a></p>\n</blockquote>\n<p>De acuerdo a la documentación, debemos incluir elementos <strong>&lt;a&gt;</strong> que apunten a nuestras páginas generadas a partir de rutas dinámicas para que al exportar el sitio, estas también se incluyan. Por eso programaremos el endpoint <a href=\"http://localhost:3000/blog\">/blog</a>.</p>\n<pre class='language-javascript overflow-x-auto'><code><span class=\"hljs-comment\">// src/routes/blog/index.json.js</span>\n\n<span class=\"hljs-keyword\">import</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;fs&quot;</span>;\n<span class=\"hljs-keyword\">import</span> path <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;path&quot;</span>;\n<span class=\"hljs-keyword\">import</span> grayMatter <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;gray-matter&quot;</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getAllPosts</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> posts = fs\n    .readdirSync(<span class=\"hljs-string\">&quot;content&quot;</span>)\n    .map(<span class=\"hljs-function\">(<span class=\"hljs-params\">fileName</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">const</span> post = fs.readFileSync(path.resolve(<span class=\"hljs-string\">&quot;content&quot;</span>, fileName), <span class=\"hljs-string\">&quot;utf-8&quot;</span>);\n      <span class=\"hljs-keyword\">return</span> grayMatter(post).data;\n    })\n    .sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">if</span> (b.timestamp &lt; a.timestamp) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n      <span class=\"hljs-keyword\">if</span> (b.timestamp &gt; a.timestamp) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    });\n  <span class=\"hljs-keyword\">return</span> posts;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">req, res</span>) </span>{\n  res.writeHead(<span class=\"hljs-number\">200</span>, { <span class=\"hljs-string\">&quot;Content-Type&quot;</span>: <span class=\"hljs-string\">&quot;application/json&quot;</span> });\n  res.end(<span class=\"hljs-built_in\">JSON</span>.stringify(getAllPosts()));\n}</code></pre><pre class='language-html overflow-x-auto'><code><span class=\"hljs-comment\">&lt;!-- src/routes/blog/index.svelte --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">context</span>=<span class=\"hljs-string\">&quot;module&quot;</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">preload</span>(<span class=\"hljs-params\">{ params, query }</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.fetch(<span class=\"hljs-string\">`blog.json`</span>)\n      .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">r</span>) =&gt;</span> r.json())\n      .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">posts</span>) =&gt;</span> ({\n        <span class=\"hljs-attr\">posts</span>: posts.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">post</span>) =&gt;</span> {\n          <span class=\"hljs-keyword\">const</span> timestamp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(post.timestamp);\n          <span class=\"hljs-keyword\">return</span> {\n            ...post,\n            timestamp,\n            <span class=\"hljs-attr\">date</span>: {\n              <span class=\"hljs-attr\">year</span>: timestamp.getFullYear(),\n              <span class=\"hljs-attr\">month</span>: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${timestamp.getMonth() + <span class=\"hljs-number\">1</span>}</span>`</span>.padStart(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">`0`</span>),\n              <span class=\"hljs-attr\">day</span>: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${timestamp.getDate()}</span>`</span>.padStart(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">`0`</span>),\n            },\n          };\n        }),\n      }));\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> posts;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svelte:head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Blog | Mario Menjívar<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svelte:head</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n  {#each posts as post}\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span>\n      <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;prefetch&quot;</span>\n      <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;blog/{post.date.year}/{post.date.month}/{post.date.day}/{post.slug}&quot;</span>\n    &gt;</span>\n      {post.title}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;c-label-last-updated&quot;</span>&gt;</span>\n      Posted on {post.timestamp.toLocaleString()} by {post.author}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  {/each}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></code></pre><p>Listo.</p>\n<h2 id=\"sitio-estático\">Sitio estático</h2>\n<p>Antes de desplegar nuestro fantástico blog, necesitamos asegurarnos que las páginas estáticas se generaran sin problemas. Para eso necesitamos ejecutar lo siguiente en la línea de comandos:</p>\n<pre class='language-bash overflow-x-auto'><code>[user@host my-blog]$ npm run <span class=\"hljs-built_in\">export</span>\n[user@host my-blog]$ npx serve __sapper__/<span class=\"hljs-built_in\">export</span></code></pre><p>Si no tienes ningun problema al acceder a este endpoint <a href=\"http://localhost:5000/blog/2020/08/08/hola-mundo\">/blog/2020/08/08/hola-mundo</a>, ¡Felicidades! solo nos falta desplegar.</p>\n<h2 id=\"despliegue-github-pages\">Despliegue: Github Pages</h2>\n<p>En este punto, podríamos copiar la carpeta __sapper__/export y llevarla a cualquier CDN para ser servido. Por ejemplo, Netlify o Github Pages. En este post te mostraré cómo hacerlo con Github Pages.</p>\n<p>... pero hacerlo de manera manual, en mi opinión, le quita la diversión.</p>\n"}