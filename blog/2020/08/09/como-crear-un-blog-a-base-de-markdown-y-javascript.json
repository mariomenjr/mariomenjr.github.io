{"author":"Mario Menjívar","slug":"como-crear-un-blog-a-base-de-markdown-y-javascript","title":"Cómo crear un blog a base de markdown y JavaScript","timestamp":"2020-08-09T10:23:17.000-07:00","brief":"Seguramente te haz hecho la siguiente pregunta: ¿Cómo hostear un blog que sea fácil de mantener, sin pagar un centavo? En este post te explico una de tantas alternativas.","keywords":"javascript,svelte,blog,markdown,howto","endpoint":"2020/08/09/como-crear-un-blog-a-base-de-markdown-y-javascript","content":"<h1 id=\"cómo-crear-un-blog-a-base-de-markdown-y-javascript\">Cómo crear un blog a base de markdown y JavaScript</h1>\n<p>Seguramente te haz hecho la siguiente pregunta: ¿Cómo hostear un blog que sea fácil de mantener, sin pagar un centavo? En este post te explico una de tantas alternativas.</p>\n<h2 id=\"porqué\">Porqué</h2>\n<p>Otra pregunta que probablemente este en tu cabeza es ¿Por qué markdown y JavaScript? La respuesta es un poco más elaborada. Para empezar, ¿Qué es markdown? Según Wikipedia: </p>\n<blockquote>\n<p>&quot;Markdown es un lenguaje de marcado ligero que trata de conseguir la máxima legibilidad y facilidad de publicación tanto en su forma de entrada como de salida, inspirándose en muchas convenciones existentes para marcar mensajes de correo electrónico usando texto plano&quot; de <a href=\"https://es.wikipedia.org/wiki/Markdown\">Wikipedia</a>.</p>\n</blockquote>\n<p>Al usar markdown para escribir un post, estamos estructurando nuestro contenido sin necesidad de incluir HTML o CSS en el momento. Es decir, nos enfocamos enteramente en lo importante: el texto. Esta simplicidad se verá potencializada al incluir <em>Git</em> y <em>Github</em> en la formula, ya que podremos versionar nuestro contenido.</p>\n<p>Como mencioné, hay muchas alternativas para lograrlo. Fundamentalmente una página web no es más que HTML, CSS y JavaScript. Herramientas como <a href=\"https://jekyllrb.com/\"><em>Jekyll</em></a>, aprovechan esta regla de oro para ayudarte a generar y administrar posts fácilmente haciendo uso de markdown. Pero, ¿Qué pasa si queremos tomar ventaja de todas las herramientas disponibles en el ecosistema JavaScript que se han establecido en los últimos 10 años?  Para eso tenemos <a href=\"https://www.gatsbyjs.org/\"><em>Gatsby</em></a>, <a href=\"https://nextjs.org/\"><em>Next.js</em></a> o <a href=\"https://sapper.svelte.dev/docs\"><em>Sapper</em></a>.</p>\n<p><em>In a nutshell</em>, estos tres frameworks permiten generar sitios estáticos haciendo uso de herramientas modernas como React o Svelte. En este post nos centraremos en <em>Sapper</em>.</p>\n<h2 id=\"¿por-qué-sapper\">¿Por qué <em>Sapper</em>?</h2>\n<p>Svelte es el nuevo chico de la cuadra. Su propuesta insignia es mover la reactividad de la UI desde mediadores como el Virtual DOM hacia el lenguaje, o mejor dicho, al compilador, en contraste con React o Vue. Esto aumenta el desempeño de las aplicaciones y disminuye el tamaño del <em>bundle</em>.</p>\n<p>Puedes echar un vistazo a la <a href=\"https://www.swyx.io/writing/svelte-static/\">comparativa</a> entre Gatsby y Sapper realizada por <a href=\"https://twitter.com/swyx\">Shawn Wang</a>, un popular desarrollador en <a href=\"https://egghead.io/\">egghead.io</a>. Se muestra una reducción del 93% en el tamaño del <em>bundle</em> con <em>Sapper</em>.</p>\n<h2 id=\"setup\">Setup</h2>\n<p>Para instalar Sapper, basta con ejecutar los siguientes comandos:</p>\n<pre class='language-bash'><code class=\"hljs\">[user@host ~]$ npx degit <span class=\"hljs-string\">&quot;sveltejs/sapper-template#rollup&quot;</span> my-blog\n[user@host ~]$ <span class=\"hljs-built_in\">cd</span> my-blog\n[user@host my-blog]$ npm install\n[user@host my-blog]$ npm run dev</code></pre><p>En el folder del projecto <em>my-blog</em>, nos interesan los siguientes files:</p>\n<pre class='language-text'><code class=\"hljs\">...\n├ src\n│ ├ routes\n| | ├ blog\n| | | ├ _posts.js\n| | | ├ [slug].json.js\n| | | ├ [slug].svelte\n| | | ├ index.json.js\n| | | ├ index.svelte\n...</code></pre><p>De paso creamos el siguiente directorio y archivo:</p>\n<pre class='language-text'><code class=\"hljs\">...\n+ ├ content\n+ │ ├ 2020-08-08_hola-mundo.md\n  ├ src\n  │ ├ routes\n...</code></pre><p>Con el siguiente contenido:</p>\n<pre class='language-text'><code class=\"hljs\">---\nauthor: &#x27;Mario Menjívar&#x27;\nslug: &#x27;hola-mundo&#x27;\ntitle: &#x27;Hola Mundo&#x27;\ntimestamp: &#x27;2020-08-08T10:23:17.000-07:00&#x27;\n---\n\n# Hola mundo\n\nHola mundo.</code></pre><p>Necesitamos instalar los siguientes paquetes:</p>\n<pre class='language-bash'><code class=\"hljs\">[user@host my-blog]$ npm i gray-matter highlight.js marked</code></pre><p>En mi caso, quiero que los posts estén ordenados por su fecha de publicación y que esto se refleje en la URL. Tendremos que hacer unos cambios a los siguientes archivos:</p>\n<pre class='language-text'><code class=\"hljs\">...\n- | | | ├ [slug].json.js\n- | | | ├ [slug].svelte\n+ | | | ├ [...slug].json.js\n+ | | | ├ [...slug].svelte\n...</code></pre><p>Luego, reemplazamos el contenido:</p>\n<pre class='language-javascript'><code class=\"hljs\"><span class=\"hljs-comment\">// src/routes/blog/[...slug].json.js</span>\n\n<span class=\"hljs-keyword\">import</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;fs&quot;</span>;\n<span class=\"hljs-keyword\">import</span> path <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;path&quot;</span>;\n<span class=\"hljs-keyword\">import</span> marked <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;marked&quot;</span>;\n<span class=\"hljs-keyword\">import</span> hljs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;highlight.js&quot;</span>;\n<span class=\"hljs-keyword\">import</span> grayMatter <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;gray-matter&quot;</span>;\n\n<span class=\"hljs-comment\">/*\n * Para obtener el contenido del post\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getPost</span>(<span class=\"hljs-params\">year, month, day, fileName</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> fs.readFileSync(\n    path.resolve(<span class=\"hljs-string\">&quot;content&quot;</span>, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${year}</span>-<span class=\"hljs-subst\">${month}</span>-<span class=\"hljs-subst\">${day}</span>_<span class=\"hljs-subst\">${fileName}</span>.md`</span>),\n    <span class=\"hljs-string\">&quot;utf-8&quot;</span>\n  );\n}\n\n<span class=\"hljs-comment\">/*\n * En Sapper, este método responde a una request a través del método GET\n * En nuestro caso, la request de un JSON\n */</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">req, res, next</span>) </span>{\n  <span class=\"hljs-comment\">// Así es cómo resolvemos una `dynamic route` en Sapper,</span>\n  <span class=\"hljs-comment\">// obtenemos cada valor en su variable respectiva</span>\n  <span class=\"hljs-keyword\">let</span> [year, month, day, slug] = req.params.slug;\n\n  <span class=\"hljs-keyword\">const</span> postMarkdown = getPost(year, month, day, slug);\n  <span class=\"hljs-keyword\">const</span> renderer = <span class=\"hljs-keyword\">new</span> marked.Renderer();\n\n  <span class=\"hljs-comment\">// marked provee una manera de formatear partes específicas del markdown</span>\n  <span class=\"hljs-comment\">// en este caso, el código</span>\n  renderer.code = <span class=\"hljs-function\">(<span class=\"hljs-params\">source, lang</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> { <span class=\"hljs-attr\">value</span>: highlighted } = hljs.highlight(lang, source);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`&lt;pre class=&#x27;language-<span class=\"hljs-subst\">${lang}</span> overflow-x-auto&#x27;&gt;&lt;code&gt;<span class=\"hljs-subst\">${highlighted}</span>&lt;/code&gt;&lt;/pre&gt;`</span>;\n  };\n\n  marked.use({ renderer });\n\n  <span class=\"hljs-keyword\">const</span> { data, content } = grayMatter(postMarkdown);\n  <span class=\"hljs-keyword\">const</span> html = marked(content);\n\n  <span class=\"hljs-keyword\">if</span> (html) {\n    res.writeHead(<span class=\"hljs-number\">200</span>, { <span class=\"hljs-string\">&quot;Content-Type&quot;</span>: <span class=\"hljs-string\">&quot;application/json&quot;</span> });\n    res.end(<span class=\"hljs-built_in\">JSON</span>.stringify({ html, ...data }));\n  } <span class=\"hljs-keyword\">else</span> {\n    res.writeHead(<span class=\"hljs-number\">404</span>, { <span class=\"hljs-string\">&quot;Content-Type&quot;</span>: <span class=\"hljs-string\">&quot;application/json&quot;</span> });\n    res.end(<span class=\"hljs-built_in\">JSON</span>.stringify({ <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">`Not found`</span> }));\n  }\n}</code></pre><pre class='language-html'><code class=\"hljs\"><span class=\"hljs-comment\">&lt;!-- src/routes/blog/[...slug].svelte --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">context</span>=<span class=\"hljs-string\">&quot;module&quot;</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-comment\">/*\n   * Este método representa un paso en el ciclo de vida de un component en Sapper.\n   *\n   * Únicamente se ejecuta cuando el componente es montado. Aquí haremos la petición de nuestro JSON con la información del post\n   */</span>\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">preload</span>(<span class=\"hljs-params\">{ params }</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> [year, month, day, slug] = params.slug;\n\n    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.fetch(<span class=\"hljs-string\">`blog/<span class=\"hljs-subst\">${year}</span>/<span class=\"hljs-subst\">${month}</span>/<span class=\"hljs-subst\">${day}</span>/<span class=\"hljs-subst\">${slug}</span>.json`</span>);\n    <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> res.json();\n\n    <span class=\"hljs-keyword\">if</span> (res.status === <span class=\"hljs-number\">200</span>) {\n      <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">post</span>: data };\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-built_in\">this</span>.error(res.status, data.message);\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> post;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svelte:head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>{post.title} by {post.author}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svelte:head</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">article</span>&gt;</span>\n  {@html post.html}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">article</span>&gt;</span></code></pre><p>De esta forma se renderizará el post. Ya puedes verlo en tu ambiente local yendo a <a href=\"http://localhost:3000/blog/2020/08/08/hola-mundo\">/blog/2020/08/08/hola-mundo</a>.</p>\n<p>Aún hay un pequeño detalle que debemos cubrir para cumplir con las reglas que <em>Sapper</em> establece si queremos exportar nuestro pequeño blog como un sitio estático.</p>\n<blockquote>\n<p>&quot;... cualquier página que quieras que sea incluída en el sitio (estático) exportado debe ser esta ligado con una etiqueta del tipo &lt;a&gt; o añadida cómo parametro de la opción  --entry del comando <code>sapper export</code>&quot; de <a href=\"https://sapper.svelte.dev/docs#How_it_works\">Sapper docs</a>.</p>\n</blockquote>\n<p>De acuerdo a la documentación, debemos incluir elementos <strong>&lt;a&gt;</strong> que apunten a nuestras páginas generadas a partir de rutas dinámicas, para que al exportar el sitio estas también se incluyan. Por eso programaremos el endpoint <a href=\"http://localhost:3000/blog\">/blog</a>.</p>\n<pre class='language-javascript'><code class=\"hljs\"><span class=\"hljs-comment\">// src/routes/blog/index.json.js</span>\n\n<span class=\"hljs-keyword\">import</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;fs&quot;</span>;\n<span class=\"hljs-keyword\">import</span> path <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;path&quot;</span>;\n<span class=\"hljs-keyword\">import</span> grayMatter <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;gray-matter&quot;</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getAllPosts</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> posts = fs\n    .readdirSync(<span class=\"hljs-string\">&quot;content&quot;</span>)\n    .map(<span class=\"hljs-function\">(<span class=\"hljs-params\">fileName</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">const</span> post = fs.readFileSync(path.resolve(<span class=\"hljs-string\">&quot;content&quot;</span>, fileName), <span class=\"hljs-string\">&quot;utf-8&quot;</span>);\n      <span class=\"hljs-keyword\">return</span> grayMatter(post).data;\n    })\n    .sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">if</span> (b.timestamp &lt; a.timestamp) <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n      <span class=\"hljs-keyword\">if</span> (b.timestamp &gt; a.timestamp) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    });\n  <span class=\"hljs-keyword\">return</span> posts;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">req, res</span>) </span>{\n  res.writeHead(<span class=\"hljs-number\">200</span>, { <span class=\"hljs-string\">&quot;Content-Type&quot;</span>: <span class=\"hljs-string\">&quot;application/json&quot;</span> });\n  res.end(<span class=\"hljs-built_in\">JSON</span>.stringify(getAllPosts()));\n}</code></pre><pre class='language-html'><code class=\"hljs\"><span class=\"hljs-comment\">&lt;!-- src/routes/blog/index.svelte --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">context</span>=<span class=\"hljs-string\">&quot;module&quot;</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">preload</span>(<span class=\"hljs-params\">{ params, query }</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.fetch(<span class=\"hljs-string\">`blog.json`</span>)\n      .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">r</span>) =&gt;</span> r.json())\n      .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">posts</span>) =&gt;</span> ({\n        <span class=\"hljs-attr\">posts</span>: posts.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">post</span>) =&gt;</span> {\n          <span class=\"hljs-keyword\">const</span> timestamp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(post.timestamp);\n          <span class=\"hljs-keyword\">return</span> {\n            ...post,\n            timestamp,\n            <span class=\"hljs-attr\">date</span>: {\n              <span class=\"hljs-attr\">year</span>: timestamp.getFullYear(),\n              <span class=\"hljs-attr\">month</span>: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${timestamp.getMonth() + <span class=\"hljs-number\">1</span>}</span>`</span>.padStart(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">`0`</span>),\n              <span class=\"hljs-attr\">day</span>: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${timestamp.getDate()}</span>`</span>.padStart(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">`0`</span>),\n            },\n          };\n        }),\n      }));\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> posts;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svelte:head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Blog | Mario Menjívar<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svelte:head</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n  {#each posts as post}\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span>\n      <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;prefetch&quot;</span>\n      <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;blog/{post.date.year}/{post.date.month}/{post.date.day}/{post.slug}&quot;</span>\n    &gt;</span>\n      {post.title}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;blog-timestamp&quot;</span>&gt;</span>\n      Posted on {post.timestamp.toLocaleString()} by {post.author}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  {/each}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></code></pre><p>Listo.</p>\n<h2 id=\"sitio-estático\">Sitio estático</h2>\n<p>Antes de desplegar nuestro fantástico blog, necesitamos asegurarnos que las páginas estáticas se generaran sin problemas. Para eso necesitamos ejecutar lo siguiente en la línea de comandos:</p>\n<pre class='language-bash'><code class=\"hljs\">[user@host my-blog]$ npm run <span class=\"hljs-built_in\">export</span>\n[user@host my-blog]$ npx serve __sapper__/<span class=\"hljs-built_in\">export</span></code></pre><p>Si no tienes ningun problema al acceder a este endpoint <a href=\"http://localhost:5000/blog/2020/08/08/hola-mundo\">/blog/2020/08/08/hola-mundo</a>, ¡Felicidades! solo nos queda desplegar el sitio.</p>\n<h2 id=\"despliegue-github-pages\">Despliegue: Github Pages</h2>\n<p>Nuestro sitio estático ha sido generado y los archivos están dentro de la carpeta <code>__sapper__/export</code>. Existen una infinidad de servicios que te permiten almacenar y servir este tipo de sitios, entre los más populares tenemos Netlify o Github Pages. En este post te mostraré cómo hacerlo con <em>Github Pages</em>.</p>\n<p>Podríamos subir el folder <code>__sapper__/export</code> a un nuevo repositorio, activar la opción <em>Github Pages</em> y repetir este proceso manualmente cada vez que actualicemos nuestro sitio con un nuevo post. En mi opinión, hacerlo de manera manual le quita la diversión. Afortunadamente, exite <em>Github Actions</em>.</p>\n<p>El primer paso es crear dos repositorios en <em>Github</em>, el primero es el repositorio de nuestro projecto y el segundo el repositorio al cuál subiremos nuestro sitio estático. En mi caso, <a href=\"https://github.com/mariomenjr/mariomenjr\">mariomenjr/mariomenjr</a> y <a href=\"https://github.com/mariomenjr/mariomenjr.github.io\">mariomenjr/mariomenjr.github.io</a> respectivamente. Una vez hecho esto, creamos los siguientes folders y archivos en el folder del projecto:</p>\n<pre class='language-text'><code class=\"hljs\">...\n├ .github\n│ ├ workflows\n| | | deploy.yml\n├ src\n...</code></pre><pre class='language-yml'><code class=\"hljs\"><span class=\"hljs-comment\"># .github/workflows/deploy.yml</span>\n\n<span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Build</span> <span class=\"hljs-string\">and</span> <span class=\"hljs-string\">deploy</span>\n<span class=\"hljs-attr\">on:</span>\n    <span class=\"hljs-attr\">push:</span>\n      <span class=\"hljs-attr\">branches:</span> \n        <span class=\"hljs-comment\"># Únicamente cuando actualicemos master</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">master</span>\n<span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">build-and-deploy:</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Checkout</span> <span class=\"hljs-string\">🛎️</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2.3.1</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">persist-credentials:</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Install</span> <span class=\"hljs-string\">and</span> <span class=\"hljs-string\">build</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|\n          npm install\n          npm run export\n</span>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Deploy</span> <span class=\"hljs-string\">🚀</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">JamesIves/github-pages-deploy-action@3.5.9</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-comment\"># Limpiará el despliegue previo</span>\n          <span class=\"hljs-attr\">CLEAN:</span> <span class=\"hljs-literal\">true</span>\n          <span class=\"hljs-comment\"># Necesitamos crear este secret para el repositorio</span>\n          <span class=\"hljs-attr\">GITHUB_TOKEN:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">secrets.DEPLOY_MARIOMENJR</span> <span class=\"hljs-string\">}}</span>\n          <span class=\"hljs-attr\">BRANCH:</span> <span class=\"hljs-string\">master</span>\n          <span class=\"hljs-attr\">FOLDER:</span> <span class=\"hljs-string\">__sapper__/export</span>\n          <span class=\"hljs-attr\">BASE_BRANCH:</span> <span class=\"hljs-string\">master</span>\n          <span class=\"hljs-attr\">REPOSITORY_NAME:</span> <span class=\"hljs-string\">mariomenjr/mariomenjr.github.io</span>\n</code></pre><p>El archivo anterior se explica en la <a href=\"https://github.com/marketplace/actions/deploy-to-github-pages\">documentación</a> de la acción. En este post nos centraremos en un línea 1 línea: </p>\n<pre class='language-yml'><code class=\"hljs\"><span class=\"hljs-string\">...</span>\n<span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">build-and-deploy:</span>\n    <span class=\"hljs-string\">...</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-string\">...</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Deploy</span> <span class=\"hljs-string\">🚀</span>\n        <span class=\"hljs-string\">...</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-string\">...</span>\n          <span class=\"hljs-comment\"># Necesitamos crear este secret para el repositorio</span>\n          <span class=\"hljs-attr\">GITHUB_TOKEN:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">secrets.DEPLOY_MARIOMENJR</span> <span class=\"hljs-string\">}}</span>\n          <span class=\"hljs-string\">...</span></code></pre><p>Es esta línea la que autoriza a la acción a hacer cambios al repositorio <code>mariomenjr/mariomenjr.github.io</code>.</p>\n<p>Para generar tu <em>Github token</em>, dirígete a <a href=\"https://github.com/settings/tokens\">github.com/settings/tokens</a>, haz clic en el botón <code>Generate new token</code>, escribe un nombre significativo en el campo <code>Note</code>, selecciona el <em>checkbox</em> <strong><em>repo</em></strong> y, por último, haz clic en el botón <code>Generate token</code>.</p>\n<p><img src=\"https://imgur.com/HbbMgm7.png\" alt=\"Github personal access tokens\"></p>\n<p>No olvides copiar el token.</p>\n<p>Por último, dirígete al repositorio del projecto para crear la variable de entorno que incluirás en el archivo <code>deploy.yml</code>.</p>\n<p><img src=\"https://imgur.com/iuyGLdc.png\" alt=\"Add secret to repository\"></p>\n<pre class='language-yml'><code class=\"hljs\"><span class=\"hljs-string\">...</span>\n<span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">build-and-deploy:</span>\n    <span class=\"hljs-string\">...</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-string\">...</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Deploy</span> <span class=\"hljs-string\">🚀</span>\n        <span class=\"hljs-string\">...</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-string\">...</span>\n          <span class=\"hljs-comment\"># Necesitamos crear este secret para el repositorio</span>\n          <span class=\"hljs-attr\">GITHUB_TOKEN:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">secrets.MI_VARIABLE</span> <span class=\"hljs-string\">}}</span>\n          <span class=\"hljs-string\">...</span></code></pre><p>Listo. Tan pronto hagas push al repositorio del projecto, <em>Github Actions</em> desplegará tu sitio estático.</p>\n<p><img src=\"https://imgur.com/fHxzGuf.png\" alt=\"Github Action Deployment\"></p>\n<p>No olvides activar la opción Github Pages en el repositorio al que desplegaste el sitio.</p>\n<p><img src=\"https://imgur.com/tkl8wSO.png\" alt=\"Settings\"></p>\n<p><img src=\"https://imgur.com/86osvtX.png\" alt=\"Github Pages Setting\"></p>\n<h1 id=\"conclusión\">Conclusión</h1>\n<p>Puedes usar WordPress, Ghosts, incluso Jekyll si lo prefieres. El objetivo de este post es mostrarte como todas esas herramientas tienen su origen en cosas básicas que con el tiempo se convierten en herramientas robustas listas para sacarles provecho.</p>\n<p>Me decidí a construir este blog, de esta manera, para poner en práctica el concepto <a href=\"https://ricardoerl.com/blog/aprender-en-publico\">Aprender en Público</a> que presentó <a href=\"https://ricardoerl.com\">Ricardo</a>, un desarrollador salvadoreño, en un charla de <a href=\"https://twitter.com/cafedigitalsv\">Café Digital</a> y así salir de mi zona de comfort. Creéme cuando te digo que me divertí.</p>\n<h1 id=\"referencias\">Referencias</h1>\n<ul>\n<li><a href=\"https://www.mahmoudashraf.dev/blog/build-a-blog-with-svelte-and-markdown/\">Building a blog with Svelte, Sapper, and Markdown</a> </li>\n<li><a href=\"https://sapper.svelte.dev/docs#How_it_works\">Sapper docs</a></li>\n<li><a href=\"https://www.swyx.io/writing/svelte-static/\">Static Svelte: JavaScript Blogging with 93% less JavaScript</a></li>\n<li><a href=\"https://es.wikipedia.org/wiki/Markdown\">Markdown</a></li>\n</ul>\n"}