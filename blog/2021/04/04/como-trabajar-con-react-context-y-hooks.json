{"author":"Mario Menjívar","slug":"como-trabajar-con-react-context-y-hooks","title":"Cómo trabajar con React Context y Hooks","timestamp":"2021-04-04T09:07:02.000-08:00","brief":"Esta mañana, por curiosidad, leía la fechas de lanzamientos de algunas de las herramientas que hoy damos por hecho. React, por ejemplo, fue lanzado el 29 de mayo del año 2013. En estos casi 10 años, hemos visto la evolución de este ecosistema, desde _Class Components_ a _Hooks_. Hoy, te mostraré cómo hacer uso de una de las últimas características añadidas a este popular Framework: el contexto.","keywords":"react,español,context,cómo usar react context,user,blog,hooks,reemplazar redux,dejar de usar redux,redux,reducer,state","cover":"https://imgur.com/5ZmbSG2.png","endpoint":"2021/04/04/como-trabajar-con-react-context-y-hooks","content":"<h1 id=\"cómo-trabajar-con-react-context-y-hooks\">Cómo trabajar con React Context y Hooks</h1>\n<p>Esta mañana, por curiosidad, leía la fechas de lanzamientos de algunas de las herramientas que hoy damos por hecho. React, por ejemplo, fue lanzado el 29 de mayo del año 2013. En estos casi 10 años, hemos visto la evolución de este ecosistema, desde <em>Class Components</em> a <em>Hooks</em>. Hoy, te mostraré cómo hacer uso de una de las características más útiles de este popular Framework: el contexto.</p>\n<h2 id=\"hold-on\">Hold on</h2>\n<p>Para ser prácticos, estoy asumiendo que:</p>\n<ul>\n<li>Ya conoces cómo funcionan los <em>Hooks</em>.</li>\n<li>Ya haz trabajado con librerías de Estado global (por ejemplo, <em>Redux</em>).</li>\n</ul>\n<p>Si este no es tu caso, igual quédate. Nos vamos a divertir.</p>\n<h2 id=\"ok-react-context\">Ok, React Context</h2>\n<p><em>In a nutshell</em>, <em>React Context</em> nos permite compartir el <em>State</em> de nuestra aplicación a través del árbol de componentes sin tener que <em>pasar</em> las propiedades explicítamente por cada uno de ellos. Pero... ¿Por qué querríamos acceder a las propiedades sin tener que pasarlas explícitamente?</p>\n<p>Veamos el siguiente ejemplo, un carrito de compras:</p>\n<pre class='language-jsx'><code class=\"hljs\"><span class=\"hljs-comment\">// App.js</span>\n\n<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { Container, Row, Col, Form } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;reactstrap&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> [cart] = React.useState([{ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">`iPad`</span> }, { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">`OnePlus 9`</span> }]);\n  <span class=\"hljs-keyword\">const</span> [user] = React.useState({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">`Mario`</span> });\n  <span class=\"hljs-comment\">/*\n   * En nuestra App, aquí tenemos el origen de datos\n   */</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Layout</span> <span class=\"hljs-attr\">cart</span>=<span class=\"hljs-string\">{cart}</span> <span class=\"hljs-attr\">user</span>=<span class=\"hljs-string\">{user}</span> /&gt;</span></span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Layout</span>(<span class=\"hljs-params\">{ cart, user }</span>) </span>{\n  <span class=\"hljs-comment\">/*\n   * Construímos el esqueleto de la interfaz\n   */</span>\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Container</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Row</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Col</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CartForm</span> <span class=\"hljs-attr\">cart</span>=<span class=\"hljs-string\">{cart}</span> <span class=\"hljs-attr\">user</span>=<span class=\"hljs-string\">{user}</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Col</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Row</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Container</span>&gt;</span></span>\n  );\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">CartForm</span>(<span class=\"hljs-params\">{ cart, user }</span>) </span>{\n  <span class=\"hljs-comment\">/*\n   * Aquí consumimos a user, pero no a cart\n   */</span>\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Form</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Carrito de {user.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CartList</span> <span class=\"hljs-attr\">cart</span>=<span class=\"hljs-string\">{cart}</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span>Buy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Form</span>&gt;</span></span>\n  );\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">CartList</span>(<span class=\"hljs-params\">{ cart }</span>) </span>{\n  <span class=\"hljs-comment\">/*\n   * Finalmente consumimos a cart\n   */</span>\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{</span>`<span class=\"hljs-attr\">p-2</span>`}&gt;</span>\n      {cart.map((item, index) =&gt; (\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{index}</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">color:</span> `<span class=\"hljs-attr\">red</span>`, <span class=\"hljs-attr\">cursor:</span> `<span class=\"hljs-attr\">pointer</span>` }}&gt;</span>[x]<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{</span>`<span class=\"hljs-attr\">mx-1</span>`} /&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{item.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      ))}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}</code></pre><p>Seguro notaste como los <em>States</em> <strong><em>user</em></strong> y <strong><em>cart</em></strong> tienen que <em>pasar</em> por todos los componentes del árbol para llegar a los componentes dónde realmente serán de utilidad. Creéme cuando te digo que esto puede complicarse aún más.</p>\n<p>¿No sería más sencillo poder acceder a ellos justo dónde los necesitemos?</p>\n<h2 id=\"provider-consumer-usereducer-y-usecontext\">Provider, Consumer, useReducer y useContext</h2>\n<p>Ya que tengo tu atención, vamos a introducir unos cuantos conceptos:</p>\n<ul>\n<li><p><strong><em>Provider</em></strong>: Como su nombre lo sugiere (proveedor en español), es el componente que proveerá los datos a <em>todos</em> sus componentes hijos. Es aquí dónde el <em>State</em> vivirá.</p>\n</li>\n<li><p><strong><em>Consumer</em></strong>: Con él, cada nodo (o componente) puede acceder al <em>State</em> que vive en el <em>Provider</em>.</p>\n</li>\n</ul>\n<p>Estos dos conceptos son fundamentales para entender lo qué sucede al implementar React Context en tu aplicación. Sin embargo, el título de este artículo tiene un &quot;y Hooks&quot; al final. Así que debemos presentar los siguientes Hooks:</p>\n<ul>\n<li><p><strong><em>useReducer</em></strong>: Si has utilizado <em>Redux</em>, ya conoces el próposito de un <em>reducer</em>. Es una función que recibe dos parametros, el <em>state</em> actual y una <em>action</em>. Con estos dos párametros, podemos organizar la forma en cómo el <em>State</em> será actualizado <em>reduciendo</em> las actualizaciones a casos. Los utilizaremos aquí junto con <em>useContext</em>.</p>\n</li>\n<li><p><strong><em>useContext</em></strong>: <em>In a nutshell</em>, este Hook actúa como un <em>Consumer</em>.</p>\n</li>\n</ul>\n<h2 id=\"ah-sí-el-context\">Ah sí, el Context</h2>\n<p>Lo siguiente en nuestra lista es:</p>\n<ul>\n<li>Configurar un Contexto</li>\n<li>Establecer una forma de actualizar el Context</li>\n<li>Consumir el Contexto</li>\n</ul>\n<p>Para eso, necesitamos el siguiente script. Encontrarás comentarios explícativos.</p>\n<pre class='language-jsx'><code class=\"hljs\"><span class=\"hljs-comment\">// context.js</span>\n\n<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> StateContext = React.createContext();\n<span class=\"hljs-keyword\">const</span> DispatchContext = React.createContext();\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reducer</span>(<span class=\"hljs-params\">state, action</span>) </span>{\n  <span class=\"hljs-keyword\">switch</span> (action.type) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">`REMOVE_ITEM`</span>:\n      <span class=\"hljs-keyword\">const</span> index = <span class=\"hljs-built_in\">Number</span>(action.data.index);\n      <span class=\"hljs-keyword\">return</span> {\n        ...state,\n        <span class=\"hljs-attr\">cart</span>: [...state.cart.slice(<span class=\"hljs-number\">0</span>, index), ...state.cart.slice(index + <span class=\"hljs-number\">1</span>)],\n      };\n\n    <span class=\"hljs-keyword\">default</span>:\n      <span class=\"hljs-keyword\">return</span> state;\n  }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Provider</span>(<span class=\"hljs-params\">{ children }</span>) </span>{\n  <span class=\"hljs-comment\">/*\n   * Creamos un State usando el hook useReducer\n   * De esta manera, obtenemos la habilidad de separar nuestra lógica\n   * En acciones.\n   *\n   * Ver: https://es.reactjs.org/docs/hooks-reference.html#usereducer\n   */</span>\n  <span class=\"hljs-keyword\">const</span> [state, dispatch] = React.useReducer(reducer, {\n    <span class=\"hljs-attr\">user</span>: { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">`Mario`</span> },\n    <span class=\"hljs-attr\">cart</span>: [\n      { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">`iPad Air`</span> },\n      { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">`OnePlus 9`</span> },\n      { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">`Thinpad X1 Carbo 9 Gen`</span> },\n    ],\n  });\n\n  <span class=\"hljs-comment\">/*\n   * Establecemos 2 Providers\n   * 1 para proveer el State\n   * 1 para proveer la función Dispatch\n   *\n   * Esto es así, ya que la función Dispatch nunca cambiará\n   * Por esta razón, la separamos del resto del State\n   */</span>\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">StateContext.Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{state}</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DispatchContext.Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{dispatch}</span>&gt;</span>\n        {children}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">DispatchContext.Provider</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">StateContext.Provider</span>&gt;</span></span>\n  );\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">useConsumer</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">/*\n   * Finalmente, hacemos uso del Hook useContext\n   * para consumir el State que reside en cada Provider\n   *\n   * La razón por la que es un Array es para darle el formato\n   * de un custom Hook.\n   */</span>\n  <span class=\"hljs-keyword\">return</span> [\n    React.useContext(StateContext),\n    React.useContext(DispatchContext),\n  ].map(<span class=\"hljs-function\">(<span class=\"hljs-params\">ctx</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (ctx === <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">`Provider not found`</span>);\n    <span class=\"hljs-keyword\">return</span> ctx;\n  });\n}\n\n<span class=\"hljs-comment\">/*\n * Exportamos\n */</span>\n<span class=\"hljs-keyword\">export</span> { Provider, useConsumer };</code></pre><p>En el script anterior, nos encontramos con 3 funciones importantes.</p>\n<ul>\n<li><p><strong><em>Provider</em></strong>: Más que una función, un tipo. Para ser más específicos, un componente de React. Este componente proveerá el <em>State</em> global.</p>\n</li>\n<li><p><strong><em>useConsumer</em></strong>: Más que una función, un custom Hook. Con él, consumiremos el <em>State</em> en los hijos del componente <code>&lt;Provider /&gt;</code>.</p>\n</li>\n<li><p><strong><em>reducer</em></strong>: Nuestra función <strong><em>reducer</em></strong>. Con ella, organizaremos cómo actualizaremos nuestro <em>State</em>.</p>\n</li>\n</ul>\n<p>Por último, exportamos únicamente lo que usaremos en los componentes dónde necesitemos el <em>State</em>. En nuestro script <code>App.js</code>.</p>\n<pre class='language-jsx'><code class=\"hljs\"><span class=\"hljs-comment\">// App.js</span>\n\n<span class=\"hljs-comment\">// ...</span>\n- <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">CartForm</span>(<span class=\"hljs-params\">{ cart, user }</span>) </span>{       <span class=\"hljs-comment\">// Removed</span>\n+ <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">CartForm</span>(<span class=\"hljs-params\"></span>)) </span>{                    <span class=\"hljs-comment\">// Added</span>\n\n+  <span class=\"hljs-keyword\">const</span> [state, dispatch] = useConsumer();\n\n+  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">removeItem</span>(<span class=\"hljs-params\">index</span>) </span>{\n+    dispatch({ <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">`REMOVE_ITEM`</span>, <span class=\"hljs-attr\">data</span>: { index } });\n+  }\n\n  <span class=\"hljs-comment\">/*\n   * Aquí consumimos a user, pero no a cart\n   */</span>\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Form</span>&gt;</span>\n-     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Carrito de {user.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n+     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Carrito de {state.user.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n\n-     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CartList</span> <span class=\"hljs-attr\">cart</span>=<span class=\"hljs-string\">{state.cart}</span> <span class=\"hljs-attr\">removeItem</span>=<span class=\"hljs-string\">{removeItem}</span> /&gt;</span>\n+     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CartList</span> <span class=\"hljs-attr\">cart</span>=<span class=\"hljs-string\">{state.cart}</span> <span class=\"hljs-attr\">removeItem</span>=<span class=\"hljs-string\">{removeItem}</span> /&gt;</span>\n\n-     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span>Buy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n+     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> alert(`Thank you!`)}&gt;Buy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Form</span>&gt;</span></span>\n  );\n}\n<span class=\"hljs-comment\">// ...</span></code></pre><p>En este ejemplo, <code>&lt;CartForm&gt;</code> es el componente desde el cuál accedimos al contexto utilizando nuestro <em>Consumer</em> <code>useConsumer</code>. En él, programamos lógica para poder ejecutar acciones como remover un <em>item</em> de la lita del carrito.</p>\n<pre class='language-jsx'><code class=\"hljs\"><span class=\"hljs-comment\">// App.js</span>\n\n<span class=\"hljs-comment\">// ...</span>\n- <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">CartList</span>(<span class=\"hljs-params\">{ cart }</span>) </span>{             <span class=\"hljs-comment\">// Removed</span>\n+ <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">CartList</span>(<span class=\"hljs-params\">{ cart, removeItem }</span>) </span>{ <span class=\"hljs-comment\">// Added</span>\n  <span class=\"hljs-comment\">/*\n   * Finalmente consumimos a cart\n   */</span>\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{</span>`<span class=\"hljs-attr\">p-2</span>`}&gt;</span>\n      {cart.map((item, index) =&gt; (\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{index}</span>&gt;</span>\n-         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">color:</span> `<span class=\"hljs-attr\">red</span>`, <span class=\"hljs-attr\">cursor:</span> `<span class=\"hljs-attr\">pointer</span>` }}&gt;</span>[x]<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n+         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">color:</span> `<span class=\"hljs-attr\">red</span>`, <span class=\"hljs-attr\">cursor:</span> `<span class=\"hljs-attr\">pointer</span>` }} <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> removeItem(index)}&gt;[x]<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{</span>`<span class=\"hljs-attr\">mx-1</span>`} /&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{item.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      ))}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n<span class=\"hljs-comment\">// ...</span></code></pre><p>Te preguntarás, ¿Por qué consumir el <em>State</em> únicamente en el componente <code>&lt;CartForm /&gt;</code> y no también en <code>&lt;CartList&gt;</code>? La respuesta es simple. El <em>React Context</em> es una herramienta muy poderosa, pero no significa que debamos usarla para todo.</p>\n<p>En nuestro ejemplo, es más importante mantener el componente <code>&lt;CartList&gt;</code> reusable, de esta forma, si tenemos que renderizar la lista en otro lado, no dependeremos del contexto que creamos aquí.</p>\n<p>Puedes ver la Aplicación resultante abajo:</p>\n<iframe src=\"https://codesandbox.io/embed/boring-pasteur-gx6vs?fontsize=14&hidenavigation=1&moduleview=1&theme=dark\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"boring-pasteur-gx6vs\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n\n<br />\n\n<h2 id=\"conclusión\">Conclusión</h2>\n<p>Espero te haya sido de utilidad este Post. Seguramente verás como más y más proyectos utilizan las APIs nativas de React para manejar varibles globales, en lugar de instalar librerías de terceros.</p>\n<p>Únicamente ten en cuenta que estás son meramente herramientas, y no hay una sola que sea perfecta para cada caso de uso. En el ejemplo, tomamos la decisión de dejar el componente presentacional <code>&lt;CartList&gt;</code> independiente para poder usarlo en otros contextos sin problemas.</p>\n<h2 id=\"referencias\">Referencias</h2>\n<ul>\n<li><a href=\"https://reactjs.org/docs/context.html\">Context</a></li>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usereducer\">useReducer</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=rFnfvhtrNbQ\">React Context Explained (2020)</a></li>\n<li><a href=\"https://kentcdodds.com/blog/how-to-use-react-context-effectively\">How to use React Context effectively</a></li>\n</ul>\n"}